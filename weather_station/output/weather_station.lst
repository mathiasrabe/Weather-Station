FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 04 BE LJMP  _SleepTimer_ISR    (0185)     ljmp	_SleepTimer_ISR
0067: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 31    MOV   A,0x31             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [_ramareas_end+199],0x0(0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+200],0x0(0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 04 4E LCALL 0x044E             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 08 16 MOV   [__r0],0x16        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 08 31 CMP   [__r0],0x31        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 08    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 03    MOV   A,0x3              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 87    MOV   X,0x87             (0368)     mov  X,<__idata_start
00AC: 55 08 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 08 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 08    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 08 0A LCALL __UserModules_end|_main|__text_start|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2551
0389: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_weather_station_Bank1
                                        (0006) export LoadConfigTBL_weather_station_Bank0
                                        (0007) export LoadConfigTBL_weather_station_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_weather_station_Bank0:
                                        (0010) ;  Instance name I2Cm, User Module I2Cm
                                        (0011) ;  Instance name LCD, User Module LCD
                                        (0012) ;  Instance name PGA_rain, User Module PGA
                                        (0013) ;       Instance name PGA_rain, Block Name GAIN(ACB02)
                                        (0014) 	db		79h, 0eh		;PGA_rain_GAIN_CR0(ACB02CR0)
                                        (0015) 	db		7ah, 21h		;PGA_rain_GAIN_CR1(ACB02CR1)
                                        (0016) 	db		7bh, 20h		;PGA_rain_GAIN_CR2(ACB02CR2)
                                        (0017) 	db		78h, 00h		;PGA_rain_GAIN_CR3(ACB02CR3)
                                        (0018) ;  Instance name PGA_sun, User Module PGA
                                        (0019) ;       Instance name PGA_sun, Block Name GAIN(ACB01)
                                        (0020) 	db		75h, 0eh		;PGA_sun_GAIN_CR0(ACB01CR0)
                                        (0021) 	db		76h, 21h		;PGA_sun_GAIN_CR1(ACB01CR1)
                                        (0022) 	db		77h, 20h		;PGA_sun_GAIN_CR2(ACB01CR2)
                                        (0023) 	db		74h, 00h		;PGA_sun_GAIN_CR3(ACB01CR3)
                                        (0024) ;  Instance name PGA_wind, User Module PGA
                                        (0025) ;       Instance name PGA_wind, Block Name GAIN(ACB00)
                                        (0026) 	db		71h, 0eh		;PGA_wind_GAIN_CR0(ACB00CR0)
                                        (0027) 	db		72h, 21h		;PGA_wind_GAIN_CR1(ACB00CR1)
                                        (0028) 	db		73h, 20h		;PGA_wind_GAIN_CR2(ACB00CR2)
                                        (0029) 	db		70h, 00h		;PGA_wind_GAIN_CR3(ACB00CR3)
                                        (0030) ;  Instance name SAR6_rain, User Module SAR6
                                        (0031) ;       Instance name SAR6_rain, Block Name SA(ASC12)
                                        (0032) 	db		88h, 00h		;SAR6_rain_CR0(ASC12CR0)
                                        (0033) 	db		89h, 5fh		;SAR6_rain_CR1(ASC12CR1)
                                        (0034) 	db		8ah, 60h		;SAR6_rain_CR2(ASC12CR2)
                                        (0035) 	db		8bh, 00h		;SAR6_rain_CR3(ASC12CR3)
                                        (0036) ;  Instance name SAR6_sun, User Module SAR6
                                        (0037) ;       Instance name SAR6_sun, Block Name SA(ASD11)
                                        (0038) 	db		84h, 00h		;SAR6_sun_CR0(ASD11CR0)
                                        (0039) 	db		85h, 9fh		;SAR6_sun_CR1(ASD11CR1)
                                        (0040) 	db		86h, 60h		;SAR6_sun_CR2(ASD11CR2)
                                        (0041) 	db		87h, 0ch		;SAR6_sun_CR3(ASD11CR3)
                                        (0042) ;  Instance name SAR6_wind, User Module SAR6
                                        (0043) ;       Instance name SAR6_wind, Block Name SA(ASC10)
                                        (0044) 	db		80h, 00h		;SAR6_wind_CR0(ASC10CR0)
                                        (0045) 	db		81h, 5fh		;SAR6_wind_CR1(ASC10CR1)
                                        (0046) 	db		82h, 60h		;SAR6_wind_CR2(ASC10CR2)
                                        (0047) 	db		83h, 00h		;SAR6_wind_CR3(ASC10CR3)
                                        (0048) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0049) ;  Global Register values Bank 0
                                        (0050) 	db		60h, 29h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0051) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0052) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0053) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0054) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0055) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0056) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0057) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0058) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0059) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0060) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0061) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0062) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0063) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0064) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0065) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0066) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0067) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0068) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0069) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0070) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0071) 	db		ffh
                                        (0072) LoadConfigTBL_weather_station_Bank1:
                                        (0073) ;  Instance name I2Cm, User Module I2Cm
                                        (0074) ;  Instance name LCD, User Module LCD
                                        (0075) ;  Instance name PGA_rain, User Module PGA
                                        (0076) ;       Instance name PGA_rain, Block Name GAIN(ACB02)
                                        (0077) ;  Instance name PGA_sun, User Module PGA
                                        (0078) ;       Instance name PGA_sun, Block Name GAIN(ACB01)
                                        (0079) ;  Instance name PGA_wind, User Module PGA
                                        (0080) ;       Instance name PGA_wind, Block Name GAIN(ACB00)
                                        (0081) ;  Instance name SAR6_rain, User Module SAR6
                                        (0082) ;       Instance name SAR6_rain, Block Name SA(ASC12)
                                        (0083) ;  Instance name SAR6_sun, User Module SAR6
                                        (0084) ;       Instance name SAR6_sun, Block Name SA(ASD11)
                                        (0085) ;  Instance name SAR6_wind, User Module SAR6
                                        (0086) ;       Instance name SAR6_wind, Block Name SA(ASC10)
                                        (0087) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0088) ;  Global Register values Bank 1
                                        (0089) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0090) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0091) 	db		60h, 15h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0092) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0093) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0094) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0095) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0096) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0097) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0098) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0099) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0100) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0101) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0102) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0103) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0104) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0105) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0106) 	db		ffh
                                        (0107) AREA psoc_config(rom, rel)
                                        (0108) LoadConfigTBL_weather_station_Ordered:
                                        (0109) ;  Ordered Global Register values
                                        (0110) 	M8C_SetBank0
038B: 62 00 00 MOV   REG[0x0],0x0       (0111) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
038E: 71 10    OR    F,0x10             
                                        (0112) 	M8C_SetBank1
0390: 62 00 03 MOV   REG[0x0],0x3       (0113) 	mov	reg[00h], 03h		; Port_0_DriveMode_0 register (PRT0DM0)
0393: 62 01 F8 MOV   REG[0x1],0xF8      (0114) 	mov	reg[01h], f8h		; Port_0_DriveMode_1 register (PRT0DM1)
0396: 70 EF    AND   F,0xEF             
                                        (0115) 	M8C_SetBank0
0398: 62 03 38 MOV   REG[0x3],0x38      (0116) 	mov	reg[03h], 38h		; Port_0_DriveMode_2 register (PRT0DM2)
039B: 62 02 00 MOV   REG[0x2],0x0       (0117) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
039E: 71 10    OR    F,0x10             
                                        (0118) 	M8C_SetBank1
03A0: 62 02 00 MOV   REG[0x2],0x0       (0119) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
03A3: 62 03 00 MOV   REG[0x3],0x0       (0120) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
03A6: 70 EF    AND   F,0xEF             
                                        (0121) 	M8C_SetBank0
03A8: 62 01 00 MOV   REG[0x1],0x0       (0122) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
03AB: 62 04 00 MOV   REG[0x4],0x0       (0123) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
03AE: 71 10    OR    F,0x10             
                                        (0124) 	M8C_SetBank1
03B0: 62 04 00 MOV   REG[0x4],0x0       (0125) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
03B3: 62 05 FF MOV   REG[0x5],0xFF      (0126) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
03B6: 70 EF    AND   F,0xEF             
                                        (0127) 	M8C_SetBank0
03B8: 62 07 FF MOV   REG[0x7],0xFF      (0128) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
03BB: 62 06 00 MOV   REG[0x6],0x0       (0129) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
03BE: 71 10    OR    F,0x10             
                                        (0130) 	M8C_SetBank1
03C0: 62 06 00 MOV   REG[0x6],0x0       (0131) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
03C3: 62 07 00 MOV   REG[0x7],0x0       (0132) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
03C6: 70 EF    AND   F,0xEF             
                                        (0133) 	M8C_SetBank0
03C8: 62 05 00 MOV   REG[0x5],0x0       (0134) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
03CB: 62 08 00 MOV   REG[0x8],0x0       (0135) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
03CE: 71 10    OR    F,0x10             
                                        (0136) 	M8C_SetBank1
03D0: 62 08 7F MOV   REG[0x8],0x7F      (0137) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
03D3: 62 09 80 MOV   REG[0x9],0x80      (0138) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
03D6: 70 EF    AND   F,0xEF             
                                        (0139) 	M8C_SetBank0
03D8: 62 0B 80 MOV   REG[0xB],0x80      (0140) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
03DB: 62 0A 00 MOV   REG[0xA],0x0       (0141) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
03DE: 71 10    OR    F,0x10             
                                        (0142) 	M8C_SetBank1
03E0: 62 0A 00 MOV   REG[0xA],0x0       (0143) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
03E3: 62 0B 00 MOV   REG[0xB],0x0       (0144) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
03E6: 70 EF    AND   F,0xEF             
                                        (0145) 	M8C_SetBank0
03E8: 62 09 00 MOV   REG[0x9],0x0       (0146) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
03EB: 62 0C 00 MOV   REG[0xC],0x0       (0147) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
03EE: 71 10    OR    F,0x10             
                                        (0148) 	M8C_SetBank1
03F0: 62 0C 00 MOV   REG[0xC],0x0       (0149) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
03F3: 62 0D 00 MOV   REG[0xD],0x0       (0150) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
03F6: 70 EF    AND   F,0xEF             
                                        (0151) 	M8C_SetBank0
03F8: 62 0F 00 MOV   REG[0xF],0x0       (0152) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
03FB: 62 0E 00 MOV   REG[0xE],0x0       (0153) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
03FE: 71 10    OR    F,0x10             
                                        (0154) 	M8C_SetBank1
0400: 62 0E 00 MOV   REG[0xE],0x0       (0155) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0403: 62 0F 00 MOV   REG[0xF],0x0       (0156) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0406: 70 EF    AND   F,0xEF             
                                        (0157) 	M8C_SetBank0
0408: 62 0D 00 MOV   REG[0xD],0x0       (0158) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
040B: 62 10 00 MOV   REG[0x10],0x0      (0159) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
040E: 71 10    OR    F,0x10             
                                        (0160) 	M8C_SetBank1
0410: 62 10 00 MOV   REG[0x10],0x0      (0161) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0413: 62 11 00 MOV   REG[0x11],0x0      (0162) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0416: 70 EF    AND   F,0xEF             
                                        (0163) 	M8C_SetBank0
0418: 62 13 00 MOV   REG[0x13],0x0      (0164) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
041B: 62 12 00 MOV   REG[0x12],0x0      (0165) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
041E: 71 10    OR    F,0x10             
                                        (0166) 	M8C_SetBank1
0420: 62 12 00 MOV   REG[0x12],0x0      (0167) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0423: 62 13 00 MOV   REG[0x13],0x0      (0168) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0426: 70 EF    AND   F,0xEF             
                                        (0169) 	M8C_SetBank0
0428: 62 11 00 MOV   REG[0x11],0x0      (0170) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
042B: 62 14 00 MOV   REG[0x14],0x0      (0171) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
042E: 71 10    OR    F,0x10             
                                        (0172) 	M8C_SetBank1
0430: 62 14 00 MOV   REG[0x14],0x0      (0173) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0433: 62 15 00 MOV   REG[0x15],0x0      (0174) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0436: 70 EF    AND   F,0xEF             
                                        (0175) 	M8C_SetBank0
0438: 62 17 00 MOV   REG[0x17],0x0      (0176) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
043B: 62 16 00 MOV   REG[0x16],0x0      (0177) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
043E: 71 10    OR    F,0x10             
                                        (0178) 	M8C_SetBank1
0440: 62 16 00 MOV   REG[0x16],0x0      (0179) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0443: 62 17 00 MOV   REG[0x17],0x0      (0180) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0446: 70 EF    AND   F,0xEF             
                                        (0181) 	M8C_SetBank0
0448: 62 15 00 MOV   REG[0x15],0x0      (0182) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
044B: 70 EF    AND   F,0xEF             
                                        (0183) 	M8C_SetBank0
044D: 7F       RET                      (0184) 	ret
                                        (0185) 
                                        (0186) 
                                        (0187) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_weather_station
                                        (0026) export _LoadConfig_weather_station
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) export Port_2_Data_SHADE
                                        (0034) export _Port_2_Data_SHADE
                                        (0035) export Port_2_DriveMode_0_SHADE
                                        (0036) export _Port_2_DriveMode_0_SHADE
                                        (0037) export Port_2_DriveMode_1_SHADE
                                        (0038) export _Port_2_DriveMode_1_SHADE
                                        (0039) 
                                        (0040) 
                                        (0041) export NO_SHADOW
                                        (0042) export _NO_SHADOW
                                        (0043) 
                                        (0044) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0045) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0046) 
                                        (0047) AREA psoc_config(rom, rel)
                                        (0048) 
                                        (0049) ;---------------------------------------------------------------------------
                                        (0050) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0051) ;                  parameters handled by boot code, like CPU speed). This
                                        (0052) ;                  function can be called from user code, but typically it
                                        (0053) ;                  is only called from boot.
                                        (0054) ;
                                        (0055) ;       INPUTS: None.
                                        (0056) ;      RETURNS: Nothing.
                                        (0057) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0058) ;               In the large memory model currently only the page
                                        (0059) ;               pointer registers listed below are modified.  This does
                                        (0060) ;               not guarantee that in future implementations of this
                                        (0061) ;               function other page pointer registers will not be
                                        (0062) ;               modified.
                                        (0063) ;          
                                        (0064) ;               Page Pointer Registers Modified: 
                                        (0065) ;               CUR_PP
                                        (0066) ;
                                        (0067) _LoadConfigInit:
                                        (0068)  LoadConfigInit:
                                        (0069)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0070)     
044E: 55 10 00 MOV   [0x10],0x0         (0071) 	mov		[Port_0_Data_SHADE], 0h
0451: 55 12 03 MOV   [0x12],0x3         (0072) 	mov		[Port_0_DriveMode_0_SHADE], 3h
0454: 55 13 F8 MOV   [0x13],0xF8        (0073) 	mov		[Port_0_DriveMode_1_SHADE], f8h
0457: 55 11 00 MOV   [0x11],0x0         (0074) 	mov		[Port_2_Data_SHADE], 0h
045A: 55 14 7F MOV   [0x14],0x7F        (0075) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
045D: 55 15 80 MOV   [0x15],0x80        (0076) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0077) 
0460: 7C 04 67 LCALL 0x0467             (0078) 	lcall	LoadConfig_weather_station
0463: 7C 03 89 LCALL 0x0389             (0079) 	lcall	LoadConfigTBL_weather_station_Ordered
                                        (0080) 
                                        (0081) 
                                        (0082)     RAM_EPILOGUE RAM_USE_CLASS_4
0466: 7F       RET                      (0083)     ret
                                        (0084) 
                                        (0085) ;---------------------------------------------------------------------------
                                        (0086) ; Load Configuration weather_station
                                        (0087) ;
                                        (0088) ;    Load configuration registers for weather_station.
                                        (0089) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0090) ;
                                        (0091) ;       INPUTS: None.
                                        (0092) ;      RETURNS: Nothing.
                                        (0093) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0094) ;               modified as may the Page Pointer registers!
                                        (0095) ;               In the large memory model currently only the page
                                        (0096) ;               pointer registers listed below are modified.  This does
                                        (0097) ;               not guarantee that in future implementations of this
                                        (0098) ;               function other page pointer registers will not be
                                        (0099) ;               modified.
                                        (0100) ;          
                                        (0101) ;               Page Pointer Registers Modified: 
                                        (0102) ;               CUR_PP
                                        (0103) ;
                                        (0104) _LoadConfig_weather_station:
                                        (0105)  LoadConfig_weather_station:
                                        (0106)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0107) 
0467: 10       PUSH  X                  (0108) 	push	x
0468: 70 EF    AND   F,0xEF             
                                        (0109)     M8C_SetBank0                    ; Force bank 0
046A: 50 00    MOV   A,0x0              (0110)     mov     a, 0                    ; Specify bank 0
046C: 67       ASR   A                  (0111)     asr     a                       ; Store in carry flag
                                        (0112)                                     ; Load bank 0 table:
046D: 50 01    MOV   A,0x1              (0113)     mov     A, >LoadConfigTBL_weather_station_Bank0
046F: 57 94    MOV   X,0x94             (0114)     mov     X, <LoadConfigTBL_weather_station_Bank0
0471: 7C 04 82 LCALL 0x0482             (0115)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0116) 
0474: 50 01    MOV   A,0x1              (0117)     mov     a, 1                    ; Specify bank 1
0476: 67       ASR   A                  (0118)     asr     a                       ; Store in carry flag
                                        (0119)                                     ; Load bank 1 table:
0477: 50 01    MOV   A,0x1              (0120)     mov     A, >LoadConfigTBL_weather_station_Bank1
0479: 57 EF    MOV   X,0xEF             (0121)     mov     X, <LoadConfigTBL_weather_station_Bank1
047B: 7C 04 82 LCALL 0x0482             (0122)     lcall   LoadConfig              ; Load the bank 1 values
047E: 70 EF    AND   F,0xEF             
                                        (0123) 
                                        (0124)     M8C_SetBank0                    ; Force return to bank 0
0480: 20       POP   X                  (0125) 	pop		x
                                        (0126) 
                                        (0127)     RAM_EPILOGUE RAM_USE_CLASS_4
0481: 7F       RET                      (0128)     ret
                                        (0129) 
                                        (0130) 
                                        (0131) 
                                        (0132) 
                                        (0133) ;---------------------------------------------------------------------------
                                        (0134) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0135) ;              pairs. Terminate on address=0xFF.
                                        (0136) ;
                                        (0137) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0138) ;           Flag Register Carry bit encodes the Register Bank
                                        (0139) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0140) ;
                                        (0141) ;  RETURNS: nothing.
                                        (0142) ;
                                        (0143) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0144) ;                X-3 Temporary store for register address
                                        (0145) ;                X-2 LSB of config table address
                                        (0146) ;                X-1 MSB of config table address
                                        (0147) ;
                                        (0148) LoadConfig:
                                        (0149)     RAM_PROLOGUE RAM_USE_CLASS_2
0482: 38 02    ADD   SP,0x2             (0150)     add     SP, 2                   ; Set up local vars
0484: 10       PUSH  X                  (0151)     push    X                       ; Save config table address on stack
0485: 08       PUSH  A                  (0152)     push    A
0486: 4F       MOV   X,SP               (0153)     mov     X, SP
0487: 56 FC 00 MOV   [X-4],0x0          (0154)     mov     [X-4], 0                ; Set default Destination to Bank 0
048A: D0 04    JNC   0x048F             (0155)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
048C: 56 FC 01 MOV   [X-4],0x1          (0156)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0157) .BankSelectSaved:
048F: 18       POP   A                  (0158)     pop     A
0490: 20       POP   X                  (0159)     pop     X
0491: 70 EF    AND   F,0xEF             
0493: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0160) 
                                        (0161) LoadConfigLp:
                                        (0162)     M8C_SetBank0                    ; Switch to bank 0
                                        (0163)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0496: 10       PUSH  X                  (0164)     push    X                       ; Preserve the config table address
0497: 08       PUSH  A                  (0165)     push    A
0498: 28       ROMX                     (0166)     romx                            ; Load register address from table
0499: 39 FF    CMP   A,0xFF             (0167)     cmp     A, END_CONFIG_TABLE     ; End of table?
049B: A0 1F    JZ    0x04BB             (0168)     jz      EndLoadConfig           ;   Yes, go wrap it up
049D: 4F       MOV   X,SP               (0169)     mov     X, SP                   ;
049E: 48 FC 01 TST   [X-4],0x1          (0170)     tst     [X-4], 1                ; Loading IO Bank 1?
04A1: A0 03    JZ    0x04A5             (0171)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
04A3: 71 10    OR    F,0x10             
                                        (0172)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0173) .IOBankNowSet:
04A5: 54 FD    MOV   [X-3],A            (0174)     mov     [X-3], A                ; Stash the register address
04A7: 18       POP   A                  (0175)     pop     A                       ; Retrieve the table address
04A8: 20       POP   X                  (0176)     pop     X
04A9: 75       INC   X                  (0177)     inc     X                       ; Advance to the data byte
04AA: 09 00    ADC   A,0x0              (0178)     adc     A, 0
04AC: 10       PUSH  X                  (0179)     push    X                       ; Save the config table address again
04AD: 08       PUSH  A                  (0180)     push    A
04AE: 28       ROMX                     (0181)     romx                            ; load config data from the table
04AF: 4F       MOV   X,SP               (0182)     mov     X, SP                   ; retrieve the register address
04B0: 59 FD    MOV   X,[X-3]            (0183)     mov     X, [X-3]
04B2: 61 00    MOV   REG[X+0x0],A       (0184)     mov     reg[X], A               ; Configure the register
04B4: 18       POP   A                  (0185)     pop     A                       ; retrieve the table address
04B5: 20       POP   X                  (0186)     pop     X
04B6: 75       INC   X                  (0187)     inc     X                       ; advance to next table entry
04B7: 09 00    ADC   A,0x0              (0188)     adc     A, 0
04B9: 8F D7    JMP   0x0491             (0189)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0190) EndLoadConfig:
04BB: 38 FC    ADD   SP,0xFC            (0191)     add     SP, -4
                                        (0192)     RAM_EPILOGUE RAM_USE_CLASS_2
04BD: 7F       RET                      (0193)     ret
                                        (0194) 
                                        (0195) AREA InterruptRAM(ram, rel)
                                        (0196) 
                                        (0197) NO_SHADOW:
                                        (0198) _NO_SHADOW:
                                        (0199) ; write only register shadows
                                        (0200) _Port_0_Data_SHADE:
                                        (0201) Port_0_Data_SHADE:	BLK	1
                                        (0202) _Port_2_Data_SHADE:
                                        (0203) Port_2_Data_SHADE:	BLK	1
                                        (0204) _Port_0_DriveMode_0_SHADE:
                                        (0205) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0206) _Port_0_DriveMode_1_SHADE:
                                        (0207) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0208) _Port_2_DriveMode_0_SHADE:
                                        (0209) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0210) _Port_2_DriveMode_1_SHADE:
                                        (0211) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0212) 
FILE: lib\sleeptimerint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimerINT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2012/3/2 at 9:15:13
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_fTick
                                        (0024) export _SleepTimer_fTick
                                        (0025) export  SleepTimer_bTimerValue
                                        (0026) export _SleepTimer_bTimerValue
                                        (0027) export  SleepTimer_bCountDown
                                        (0028) export _SleepTimer_bCountDown
                                        (0029) export  SleepTimer_TickCount
                                        (0030) export _SleepTimer_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_fTick:
                                        (0038) _SleepTimer_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_bTimerValue:
                                        (0041) _SleepTimer_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_bCountDown:
                                        (0044) _SleepTimer_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_TickCount:
                                        (0047) _SleepTimer_TickCount:    BLK  SleepTimer_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_ISR:
                                        (0090) 
04BE: 2E 09 01 OR    [0x9],0x1          (0091)    or   [SleepTimer_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
04C1: 47 0B FF TST   [0xB],0xFF         (0094)    tst  [SleepTimer_bCountDown],0xFF
04C4: A0 03    JZ    0x04C8             (0095)    jz   .DoTimer
04C6: 7A 0B    DEC   [0xB]              (0096)    dec  [SleepTimer_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
04C8: 47 0A FF TST   [0xA],0xFF         (0099)    tst  [SleepTimer_bTimerValue],0xFF
04CB: A0 03    JZ    0x04CF             (0100)    jz   .IncBigCounter
04CD: 7A 0A    DEC   [0xA]              (0101)    dec  [SleepTimer_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_TICK_CNTR_SIZE & 0x04)
04CF: 76 0F    INC   [0xF]              (0105)    inc  [SleepTimer_TickCount+3]
04D1: D0 0B    JNC   0x04DD             (0106)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0107) 
04D3: 76 0E    INC   [0xE]              (0108)    inc  [SleepTimer_TickCount+2]
04D5: D0 07    JNC   0x04DD             (0109)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_TICK_CNTR_SIZE & (0x04|0x02))
04D7: 76 0D    INC   [0xD]              (0113)    inc  [SleepTimer_TickCount+1]
04D9: D0 03    JNC   0x04DD             (0114)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
04DB: 76 0C    INC   [0xC]              (0117)    inc  [SleepTimer_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
                                        (0138)    ;lcall _My_C_Function
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
04DD: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimerINT.asm
                                        (0150) 
FILE: lib\sleeptimer.asm                (0001) ;;*****************************************************************************
04DE: 43 E0 40 OR    REG[0xE0],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   SleepTimer.asm
                                        (0004) ;;  Version: 1.0, Updated on 2012/3/2 at 9:15:13
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer User Module software implementation file for the
                                        (0008) ;;                22/24/27/29xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "SleepTimer.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name reference for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  SleepTimer_EnableInt
                                        (0041) export _SleepTimer_EnableInt
                                        (0042) export  SleepTimer_DisableInt
                                        (0043) export _SleepTimer_DisableInt
                                        (0044) 
                                        (0045) export  SleepTimer_Start
                                        (0046) export _SleepTimer_Start
                                        (0047) export  SleepTimer_Stop
                                        (0048) export _SleepTimer_Stop
                                        (0049) 
                                        (0050) export  SleepTimer_TickWait
                                        (0051) export _SleepTimer_TickWait
                                        (0052) 
                                        (0053) export  SleepTimer_SyncWait
                                        (0054) export _SleepTimer_SyncWait
                                        (0055) 
                                        (0056) export  SleepTimer_SetInterval
                                        (0057) export _SleepTimer_SetInterval
                                        (0058) 	
                                        (0059) export  SleepTimer_bGetTickCntr
                                        (0060) export _SleepTimer_bGetTickCntr
                                        (0061) 
                                        (0062) export  SleepTimer_SetTimer
                                        (0063) export _SleepTimer_SetTimer
                                        (0064) 
                                        (0065) export  SleepTimer_bGetTimer
                                        (0066) export _SleepTimer_bGetTimer
                                        (0067) 
                                        (0068) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0069) export  SleepTimer_iGetTickCntr
                                        (0070) export _SleepTimer_iGetTickCntr
                                        (0071) ENDIF
                                        (0072) 
                                        (0073) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0074) export  SleepTimer_lGetTickCntr
                                        (0075) export _SleepTimer_lGetTickCntr
                                        (0076) ENDIF
                                        (0077) 
                                        (0078) 
                                        (0079) area text (ROM,REL)
                                        (0080) 
                                        (0081) ;-----------------------------------------------
                                        (0082) ;  EQUATES
                                        (0083) ;-----------------------------------------------
                                        (0084) 
                                        (0085) ; Counter LSB Offset if 4 byte tick counter
                                        (0086) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0087) ST_LSB_OFFSET:   equ  3
                                        (0088) ENDIF
                                        (0089) 
                                        (0090) ; Counter LSB Offset if 2 byte tick counter
                                        (0091) IF(SleepTimer_TICK_CNTR_SIZE & 2)
                                        (0092) ST_LSB_OFFSET:   equ  1
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ; Counter LSB Offset if 1 byte tick counter
                                        (0096) IF(SleepTimer_TICK_CNTR_SIZE & 1)
                                        (0097) ST_LSB_OFFSET:   equ  0
                                        (0098) ENDIF
                                        (0099) 
                                        (0100) 
                                        (0101) area UserModules (ROM, REL, CON)
                                        (0102) 
                                        (0103) ;=============================================================================
                                        (0104) ;=============================================================================
                                        (0105) ;
                                        (0106) ;     Low-Level Commands
                                        (0107) ;
                                        (0108) ;=============================================================================
                                        (0109) ;=============================================================================
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: SleepTimer_EnableInt
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Enables SleepTimer interrupts.
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;
                                        (0119) ;  ARGUMENTS:
                                        (0120) ;     none.
                                        (0121) ;
                                        (0122) ;  RETURNS:
                                        (0123) ;     none.
                                        (0124) ;
                                        (0125) ;  SIDE EFFECTS:
                                        (0126) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0127) ;
                                        (0128) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0129) ;
                                        (0130)  SleepTimer_EnableInt:
                                        (0131) _SleepTimer_EnableInt:
                                        (0132)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0133)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0134)    RAM_EPILOGUE RAM_USE_CLASS_1
04E1: 7F       RET                      (0135)    ret
04E2: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0136) .ENDSECTION
                                        (0137) 
                                        (0138)     
                                        (0139) .SECTION
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;  FUNCTION NAME: SleepTimer_DisableInt
                                        (0142) ;
                                        (0143) ;  DESCRIPTION:
                                        (0144) ;     Disables the sleep timer. 
                                        (0145) ;
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     none.
                                        (0150) ;
                                        (0151) ;  RETURNS:
                                        (0152) ;     none.
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0156) ;
                                        (0157) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0158) ;
                                        (0159)  SleepTimer_DisableInt:
                                        (0160) _SleepTimer_DisableInt:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
04E5: 7F       RET                      (0164)    ret
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) 
                                        (0168) .SECTION
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;  FUNCTION NAME: SleepTimer_Start()
                                        (0171) ;
                                        (0172) ;  DESCRIPTION:
                                        (0173) ;     Clears all the variables.  
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:
                                        (0177) ;      none
                                        (0178) ;
                                        (0179) ;  RETURNS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  SIDE EFFECTS;    
                                        (0183) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0184) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0185) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0186) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0187) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0188) ;          
                                        (0189) ;    Page Pointer Registers Modified: 
                                        (0190) ;          CUR_PP
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0193) ;
                                        (0194)  SleepTimer_Start:
                                        (0195) _SleepTimer_Start:
                                        (0196)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0197)    RAM_SETPAGE_CUR >SleepTimer_fTick      
04E6: 50 00    MOV   A,0x0              (0198)    mov  A,0
04E8: 53 09    MOV   [0x9],A            (0199)    mov  [SleepTimer_fTick],A
04EA: 53 0A    MOV   [0xA],A            (0200)    mov  [SleepTimer_bTimerValue],A
04EC: 53 0B    MOV   [0xB],A            (0201)    mov  [SleepTimer_bCountDown],A
04EE: 53 0F    MOV   [0xF],A            (0202)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET],A        ; Clear TickCount[0:7]
                                        (0203) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
04F0: 53 0E    MOV   [0xE],A            (0204)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET - 1],A    ; Clear TickCount[8:15]
                                        (0205) ENDIF
                                        (0206) 
                                        (0207) 
                                        (0208) IF(SleepTimer_TICK_CNTR_SIZE & 4)
04F2: 53 0D    MOV   [0xD],A            (0209)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 2],A    ; Clear TickCount[16:31]
04F4: 53 0C    MOV   [0xC],A            (0210)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 3],A    
                                        (0211) ENDIF
                                        (0212) 
                                        (0213) 
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_4
04F6: 7F       RET                      (0215)    ret
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: SleepTimer_Stop
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;   This function does nothing at this time.  It is only here as a place 
                                        (0225) ;   holder.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;     none.
                                        (0230) ;
                                        (0231) ;  RETURNS:
                                        (0232) ;     none.
                                        (0233) ;
                                        (0234) ;  SIDE EFFECTS:
                                        (0235) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0236) ;
                                        (0237) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0238) ;
                                        (0239)  SleepTimer_Stop:
                                        (0240) _SleepTimer_Stop:
                                        (0241)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_1
04F7: 7F       RET                      (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: SleepTimer_SetInterval
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Sets sleep timer interval
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;     A <= Timer setting
                                        (0257) ;
                                        (0258) ;  RETURNS:
                                        (0259) ;     none.
                                        (0260) ;
                                        (0261) ;  SIDE EFFECTS:
                                        (0262) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0263) ;
                                        (0264) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0265) ;
                                        (0266)  SleepTimer_SetInterval:
                                        (0267) _SleepTimer_SetInterval:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
04F8: 21 18    AND   A,0x18             (0269)    and  A,SleepTimer_CLOCK_MASK               ; Mask off invalid data
04FA: 4F       MOV   X,SP               (0270)    mov  X, SP
04FB: 08       PUSH  A                  (0271)    push A
04FC: 71 10    OR    F,0x10             
                                        (0272)    M8C_SetBank1
04FE: 5D E0    MOV   A,REG[0xE0]        (0273)    mov  A, reg[OSC_CR0]                  ; Get current timer value
0500: 21 E7    AND   A,0xE7             (0274)    and  A,~SleepTimer_CLOCK_MASK   ; Zero out old timer value
0502: 2B 00    OR    A,[X+0]            (0275)    or   A, [X]                           ; Set new timer values
0504: 60 E0    MOV   REG[0xE0],A        (0276)    mov  reg[OSC_CR0],A                   ; Write it
0506: 70 EF    AND   F,0xEF             
                                        (0277)    M8C_SetBank0
0508: 18       POP   A                  (0278)    pop  A
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_2
0509: 7F       RET                      (0280)    ret
                                        (0281) .ENDSECTION
                                        (0282) 
                                        (0283) 
                                        (0284) .SECTION
                                        (0285) ;-----------------------------------------------------------------------------
                                        (0286) ;  FUNCTION NAME: SleepTimer_TickWait(BYTE bTicks)
                                        (0287) ;
                                        (0288) ;  DESCRIPTION:
                                        (0289) ;     Wait X Ticks and return
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292) ;
                                        (0293) ;  ARGUMENTS:
                                        (0294) ;     A <= Count down time
                                        (0295) ;
                                        (0296) ;  RETURNS:
                                        (0297) ;     none.
                                        (0298) ;
                                        (0299) ;  SIDE EFFECTS;    
                                        (0300) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0301) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0302) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0303) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0304) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0305) ;          
                                        (0306) ;    Page Pointer Registers Modified: 
                                        (0307) ;          CUR_PP
                                        (0308) ;
                                        (0309) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0310) ;
                                        (0311)  SleepTimer_TickWait:
                                        (0312) _SleepTimer_TickWait:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >SleepTimer_fTick      
050A: 55 09 00 MOV   [0x9],0x0          (0315)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
                                        (0316) 
                                        (0317) .WaitTick:
050D: 47 09 FF TST   [0x9],0xFF         (0318)    tst   [SleepTimer_fTick],0xFF          ; Check for tick 
0510: AF FC    JZ    0x050D             (0319)    jz    .WaitTick
0512: 55 09 00 MOV   [0x9],0x0          (0320)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
0515: 78       DEC   A                  (0321)    dec   A                                      ; Dec the timer variable
0516: BF F6    JNZ   0x050D             (0322)    jnz   .WaitTick                              ; Loop until we count down to zero
                                        (0323) 
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
0518: 7F       RET                      (0325)    ret
                                        (0326) .ENDSECTION
                                        (0327) 
                                        (0328) 
                                        (0329) .SECTION
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  FUNCTION NAME: SleepTimer_SyncWait(BYTE bCounts, BYTE fMode)
                                        (0332) ;
                                        (0333) ;  DESCRIPTION:
                                        (0334) ;     This function resets the SyncWait timer.  If fMode = 0, the timer
                                        (0335) ;     is set to the new value then exits the function immediatly.  If fMode
                                        (0336) ;     is set to 1, the firmware waits for the timer to expire before the
                                        (0337) ;     timer is reset and and exits.
                                        (0338) ;
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;
                                        (0341) ;  ARGUMENTS:
                                        (0342) ;     A <= tCounts to wait
                                        (0343) ;     X <= fMode    fMode = 0  Just reload the value, do not wait
                                        (0344) ;                   fMode = 1  Wait for last value to count down to zero
                                        (0345) ;                              then reload.
                                        (0346) ;
                                        (0347) ;  RETURNS:
                                        (0348) ;     none.
                                        (0349) ;
                                        (0350) ;  SIDE EFFECTS;    
                                        (0351) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0353) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0354) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0355) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0356) ;          
                                        (0357) ;    Page Pointer Registers Modified: 
                                        (0358) ;          CUR_PP
                                        (0359) ;
                                        (0360) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0361) ;
                                        (0362)  SleepTimer_SyncWait:
                                        (0363) _SleepTimer_SyncWait:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >SleepTimer_bCountDown
0519: 4B       SWAP  A,X                (0366)    swap  A,X
051A: 21 01    AND   A,0x1              (0367)    AND   A,SleepTimer_FORCE_RELOAD
051C: B0 06    JNZ   0x0523             (0368)    jnz   .ReloadIt
                                        (0369) 
                                        (0370) .WaitLoop:
051E: 47 0B FF TST   [0xB],0xFF         (0371)    tst   [SleepTimer_bCountDown],0xFF
0521: BF FC    JNZ   0x051E             (0372)    jnz   .WaitLoop
                                        (0373) 
                                        (0374) 
                                        (0375) .ReloadIt:
0523: 4B       SWAP  A,X                (0376)    swap  A,X
0524: 53 0B    MOV   [0xB],A            (0377)    mov   [SleepTimer_bCountDown],A 
                                        (0378) 
                                        (0379)    RAM_EPILOGUE RAM_USE_CLASS_4
0526: 7F       RET                      (0380)    ret
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) 
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: SleepTimer_bGetTickCntr
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:
                                        (0390) ;     Returns the LSB of the tick Counter
                                        (0391) ;
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     LSB of lTickCount
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS;    
                                        (0401) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0402) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0403) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0404) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0405) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0406) ;          
                                        (0407) ;    Page Pointer Registers Modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0411) ;
                                        (0412)  SleepTimer_bGetTickCntr:
                                        (0413) _SleepTimer_bGetTickCntr:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0415)    RAM_SETPAGE_CUR >SleepTimer_TickCount
0527: 51 0F    MOV   A,[0xF]            (0416)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
0529: 7F       RET                      (0418)    ret
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: SleepTimer_SetTimer
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;     Set timer with parameter in A
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     A => Value used to set Timer value
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;     None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS;    
                                        (0437) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0438) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0439) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0440) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0441) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0442) ;          
                                        (0443) ;    Page Pointer Registers Modified: 
                                        (0444) ;          CUR_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0447) ;
                                        (0448)  SleepTimer_SetTimer:
                                        (0449) _SleepTimer_SetTimer:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0451)    RAM_SETPAGE_CUR >SleepTimer_TickCount
052A: 53 0A    MOV   [0xA],A            (0452)    mov   [SleepTimer_bTimerValue],A
                                        (0453)    RAM_EPILOGUE RAM_USE_CLASS_4
052C: 7F       RET                      (0454)    ret
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: SleepTimer_bGetTimer
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Returns timer value in A
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS:
                                        (0467) ;     None
                                        (0468) ;
                                        (0469) ;  RETURNS:
                                        (0470) ;     Return timer value in A
                                        (0471) ;
                                        (0472) ;  SIDE EFFECTS;    
                                        (0473) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0474) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0475) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0476) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0477) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0478) ;          
                                        (0479) ;    Page Pointer Registers Modified: 
                                        (0480) ;          CUR_PP
                                        (0481) ;
                                        (0482) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0483) ;
                                        (0484)  SleepTimer_bGetTimer:
                                        (0485) _SleepTimer_bGetTimer:
                                        (0486)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0487)    RAM_SETPAGE_CUR >SleepTimer_TickCount
052D: 51 0A    MOV   A,[0xA]            (0488)    mov   A,[SleepTimer_bTimerValue]
                                        (0489)    RAM_EPILOGUE RAM_USE_CLASS_4
052F: 7F       RET                      (0490)    ret
0530: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0491) .ENDSECTION
                                        (0492) 
                                        (0493) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: SleepTimer_iGetTickCntr
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Returns the least significant 16 bits.
                                        (0500) ;
                                        (0501) ;-----------------------------------------------------------------------------
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     none
                                        (0505) ;
                                        (0506) ;  RETURNS:
                                        (0507) ;     (int)TickCount in A and X  
                                        (0508) ;     X  <= MSB
                                        (0509) ;     A  <= LSB
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS;    
                                        (0512) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0513) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0514) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0515) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0516) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0517) ;          
                                        (0518) ;    Page Pointer Registers Modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0522) ;
                                        (0523)  SleepTimer_iGetTickCntr:
                                        (0524) _SleepTimer_iGetTickCntr:
                                        (0525)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0526)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0527)    ; Disable interrupt here
                                        (0528)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
0533: 51 0F    MOV   A,[0xF]            (0529)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]    ; Place LSB in A
0535: 58 0E    MOV   X,[0xE]            (0530)    mov   X,[SleepTimer_TickCount + ST_LSB_OFFSET - 1]    ; Place MSB in X
0537: 43 E0 40 OR    REG[0xE0],0x40     
                                        (0531)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0532)    RAM_EPILOGUE RAM_USE_CLASS_4
053A: 7F       RET                      (0533)    ret
053B: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0534) .ENDSECTION
                                        (0535) ENDIF
                                        (0536) 
                                        (0537) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0538) .SECTION
                                        (0539) ;-----------------------------------------------------------------------------
                                        (0540) ;  FUNCTION NAME: SleepTimer_lGetTickCntr
                                        (0541) ;
                                        (0542) ;  DESCRIPTION:
                                        (0543) ;     Returns a pointer to TickCount
                                        (0544) ;
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     [A:X] => Pointer to 32 bit tick counter (X=LSB, A=MSB)
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     Pointer to lTickCount
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS;    
                                        (0554) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0555) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0556) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0557) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0558) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0559) ;          
                                        (0560) ;    Page Pointer Registers Modified: 
                                        (0561) ;          CUR_PP
                                        (0562) ;
                                        (0563) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0564) ;
                                        (0565)  SleepTimer_lGetTickCntr:
                                        (0566) _SleepTimer_lGetTickCntr:
                                        (0567)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0568)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0569)    ; Disable interrupt here
                                        (0570)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0571)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0572)    RAM_SETPAGE_IDX A
053E: 08       PUSH  A                  (0573)    push  A
053F: 51 0C    MOV   A,[0xC]            (0574)    mov   A,[SleepTimer_TickCount + 0]
0541: 54 00    MOV   [X+0],A            (0575)    mov   [X + 0],A
0543: 51 0D    MOV   A,[0xD]            (0576)    mov   A,[SleepTimer_TickCount + 1]
0545: 54 01    MOV   [X+1],A            (0577)    mov   [X + 1],A
0547: 51 0E    MOV   A,[0xE]            (0578)    mov   A,[SleepTimer_TickCount + 2]
0549: 54 02    MOV   [X+2],A            (0579)    mov   [X + 2],A
054B: 51 0F    MOV   A,[0xF]            (0580)    mov   A,[SleepTimer_TickCount + 3]
054D: 54 03    MOV   [X+3],A            (0581)    mov   [X + 3],A
054F: 18       POP   A                  (0582)    pop   A
0550: 43 E0 40 OR    REG[0xE0],0x40     
                                        (0583)    
                                        (0584)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0585)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_EPILOGUE RAM_USE_CLASS_3
0553: 7F       RET                      (0587)    ret
                                        (0588) .ENDSECTION
                                        (0589) ENDIF
                                        (0590) 
                                        (0591) 
                                        (0592) 
                                        (0593) 
                                        (0594) ; End of File SleepTimer.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2012/3/2 at 9:14:48
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0554: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0555: 10       PUSH  X                  (0209)     push  X
0556: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0557: B0 04    JNZ   0x055C             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0559: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
055A: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
055B: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
055C: 90 3C    CALL  _LCD_WriteData|LCD_Write_Data|LCD_WriteData|_LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
055E: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
055F: 18       POP   A                  (0220)     pop   A
0560: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0561: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0563: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0564: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0576: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0577: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0578: 67       ASR   A                  (0262)     asr   A
0579: 67       ASR   A                  (0263)     asr   A
057A: 67       ASR   A                  (0264)     asr   A
057B: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
057D: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
057F: 90 19    CALL  _LCD_WriteData|LCD_Write_Data|LCD_WriteData|_LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
0581: 18       POP   A                  (0268)     pop   A                            ; Restore value
0582: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0584: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0586: 90 12    CALL  _LCD_WriteData|LCD_Write_Data|LCD_WriteData|_LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0588: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0589: 4B       SWAP  A,X                (0305)     swap  A,X
058A: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
058C: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
058D: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
058F: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0590: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0592: A0 06    JZ    0x0599             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0594: 90 04    CALL  _LCD_WriteData|LCD_Write_Data|LCD_WriteData|_LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
0596: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0597: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0599: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
059A: 90 5F    CALL  0x05FB             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
059C: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
059D: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
059E: 67       ASR   A                  (0390)     asr   A
059F: 67       ASR   A                  (0391)     asr   A
05A0: 67       ASR   A                  (0392)     asr   A
05A1: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
05A3: 90 38    CALL  0x05DD             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
05A5: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
05A6: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
05A8: 40       NOP                      (0397)     nop
05A9: 40       NOP                      (0398)     nop
05AA: 40       NOP                      (0399)     nop
05AB: 90 30    CALL  0x05DD             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
05AD: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
05AE: 90 4B    CALL  0x05FB             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
05B0: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
05B1: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
05B2: 67       ASR   A                  (0436)     asr   A
05B3: 67       ASR   A                  (0437)     asr   A
05B4: 67       ASR   A                  (0438)     asr   A
05B5: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
05B7: 90 09    CALL  0x05C2             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
05B9: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
05BA: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
05BC: 40       NOP                      (0443)     nop
05BD: 40       NOP                      (0444)     nop
05BE: 40       NOP                      (0445)     nop
05BF: 90 01    CALL  0x05C2             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
05C1: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
05C2: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
05C3: 26 11 80 AND   [0x11],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
05C6: 51 11    MOV   A,[0x11]           (0480)     mov   A,[Port_2_Data_SHADE]
05C8: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
05CA: 18       POP   A                  (0483)     pop   A
05CB: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
05CD: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
05CF: 2A 11    OR    A,[0x11]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
05D1: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
05D3: 53 11    MOV   [0x11],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
05D5: 40       NOP                      (0489)     nop
05D6: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
05D8: 53 11    MOV   [0x11],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
05DA: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
05DC: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
05DD: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
05DE: 26 11 80 AND   [0x11],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
05E1: 2E 11 20 OR    [0x11],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
05E4: 51 11    MOV   A,[0x11]           (0527)     mov   A,[Port_2_Data_SHADE]
05E6: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
05E8: 18       POP   A                  (0530)     pop   A
05E9: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
05EB: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
05ED: 2A 11    OR    A,[0x11]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
05EF: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
05F1: 53 11    MOV   [0x11],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
05F3: 40       NOP                      (0536)     NOP
05F4: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
05F6: 53 11    MOV   [0x11],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
05F8: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
05FA: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
05FB: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
05FC: 26 11 80 AND   [0x11],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
05FF: 51 11    MOV   A,[0x11]           (0574)     mov   A,[Port_2_Data_SHADE]
0601: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0603: 26 14 F0 AND   [0x14],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0606: 51 14    MOV   A,[0x14]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0608: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
060A: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
060C: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
060E: 2E 11 40 OR    [0x11],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0611: 51 11    MOV   A,[0x11]           (0584)     mov   A,[Port_2_Data_SHADE]
0613: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0615: 40       NOP                      (0586)     NOP
                                        (0587) 
0616: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0617: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0619: 2E 11 50 OR    [0x11],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
061C: 51 11    MOV   A,[0x11]           (0593)     mov   A,[Port_2_Data_SHADE]
061E: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0620: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0621: 40       NOP                      (0597)     nop
0622: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0624: 08       PUSH  A                  (0610)     push  A
0625: 26 11 C0 AND   [0x11],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0628: 51 11    MOV   A,[0x11]           (0612)     mov   A,[Port_2_Data_SHADE]
062A: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
062C: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
062D: 40       NOP                      (0616)     nop                                    ; fastest PSoC
062E: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
062F: 2E 11 50 OR    [0x11],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0632: 51 11    MOV   A,[0x11]           (0620)     mov   A,[Port_2_Data_SHADE]
0634: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0636: 40       NOP                      (0623)     nop
0637: 40       NOP                      (0624)     nop
                                        (0625) 
0638: 26 11 C0 AND   [0x11],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
063B: 51 11    MOV   A,[0x11]           (0627)     mov   A,[Port_2_Data_SHADE]
063D: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
063F: 18       POP   A                  (0630)     pop   A
0640: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0642: A0 04    JZ    0x0647             (0633)     jz    .UNLOCK
0644: 79       DEC   X                  (0634)     dec   X
0645: BF D3    JNZ   0x0619             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0647: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0648: 2E 14 7F OR    [0x14],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
064B: 51 14    MOV   A,[0x14]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
064D: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
064F: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0651: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0653: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0654: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0655: 26 14 80 AND   [0x14],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0658: 2E 14 7F OR    [0x14],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
065B: 26 15 80 AND   [0x15],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
065E: 51 14    MOV   A,[0x14]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0660: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0662: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0664: 51 15    MOV   A,[0x15]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0666: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0668: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
066A: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
066C: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
066E: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0670: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0672: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0674: 9F 4C    CALL  0x05C2             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0676: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0678: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
067A: 50 03    MOV   A,0x3              (0707)     mov   A,03h
067C: 9F 44    CALL  0x05C2             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
067E: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0680: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0682: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0684: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0686: 9F 3A    CALL  0x05C2             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0688: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
068A: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
068C: 50 02    MOV   A,0x2              (0720)     mov   A,02h
068E: 9F 32    CALL  0x05C2             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0690: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0692: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0694: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0696: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
0698: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
069A: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
069C: 50 01    MOV   A,0x1              (0731)     mov   A,01h
069E: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
06A0: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06A2: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
06A4: 50 06    MOV   A,0x6              (0736)     mov   A,06h
06A6: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
06A8: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
06AA: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
06AC: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
06AE: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
06B0: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
06B2: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
06B4: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
06B6: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
06B8: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
06BA: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
06BC: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06BE: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
06C0: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
06C5: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
06C7: 10       PUSH  X                  (0791)     push  X                            ; Store COL
06C8: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
06CA: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
06CB: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
06CD: 20       POP   X                  (0795)     pop   X
                                        (0796) 
06CE: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
06D0: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
06D1: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
06D3: 78       DEC   A                  (0828)     dec   A
06D4: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
06D6: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
06DF: 08       PUSH  A                  (0871)     push  A
06E0: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
06E2: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
06E4: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
06E6: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
06E8: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
06EA: D0 06    JNC   0x06F1             (0877)     jnc   .Delay50u_End
06EC: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
06EE: 78       DEC   A                  (0880)     dec   A                              ; [4]
06EF: BF FE    JNZ   0x06EE             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
06F1: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
06F2: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
06F3: 10       PUSH  X                  (0943)     push  X
06F4: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
06F6: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
06F8: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
06F9: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
06FC: B0 05    JNZ   0x0702             (0950)     jnz   .LCD_CHECK1X
06FE: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
0700: 80 11    JMP   0x0712             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
0702: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
0705: D0 07    JNC   0x070D             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
0707: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
0709: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
070B: 80 06    JMP   0x0712             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
070D: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
070F: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
0712: 9E 86    CALL  _LCD_WriteData|LCD_Write_Data|LCD_WriteData|_LCD_Write_Data(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
0714: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
0716: BF E2    JNZ   0x06F9             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
0718: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
0719: 4F       MOV   X,SP               (1015)     mov   X, SP
071A: 10       PUSH  X                  (1016)     push  X
071B: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
071D: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
071F: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0721: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0722: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0725: B0 05    JNZ   0x072B             (1026)     jnz   .LCD_CHECK1
0727: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0729: 80 11    JMP   0x073B             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
072B: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
072E: D0 07    JNC   0x0736             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0730: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0732: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0734: 80 06    JMP   0x073B             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0736: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0738: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
073B: 9E 5D    CALL  _LCD_WriteData|LCD_Write_Data|LCD_WriteData|_LCD_Write_Data(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
073D: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
073F: BF E2    JNZ   0x0722             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
0741: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
0742: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
0744: 08       PUSH  A                  (1098)     push  A
0745: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
0747: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
0749: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
074B: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
074E: B0 05    JNZ   0x0754             (1103)     jnz   .VBG_NZ_SEGX
0750: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
0752: 80 13    JMP   0x0766             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
0754: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
0757: D0 09    JNC   0x0761             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
0759: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
075B: 78       DEC   A                  (1111)     dec   A
075C: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
075F: 80 06    JMP   0x0766             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
0761: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
0764: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
0766: 9E 32    CALL  _LCD_WriteData|LCD_Write_Data|LCD_WriteData|_LCD_Write_Data(1120)     call  LCD_WriteData                ; Write value
0768: 18       POP   A                  (1121)     pop   A
0769: 78       DEC   A                  (1122)     dec   A
076A: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
076C: BF D7    JNZ   0x0744             (1124)     jnz   .VBG_LOOPX
076E: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
076F: 4F       MOV   X,SP               (1168)     mov   X, SP
0770: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
0772: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
0774: 08       PUSH  A                  (1172)     push  A
0775: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
0777: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0779: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
077B: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
077E: B0 05    JNZ   0x0784             (1177)     jnz   .VBG_NZ_SEG
0780: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
0782: 80 13    JMP   0x0796             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
0784: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0787: D0 09    JNC   0x0791             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0789: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
078B: 78       DEC   A                  (1185)     dec   A
078C: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
078F: 80 06    JMP   0x0796             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0791: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0794: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0796: 9E 02    CALL  _LCD_WriteData|LCD_Write_Data|LCD_WriteData|_LCD_Write_Data(1194)     call  LCD_WriteData                ; Write value
0798: 18       POP   A                  (1195)     pop   A
0799: 78       DEC   A                  (1196)     dec   A
079A: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
079C: BF D7    JNZ   0x0774             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
079E: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
079F: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
07A0: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
07A1: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
07A2: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
07A4: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
07A6: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
07A9: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
07AC: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
07AE: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
07B0: D0 05    JNC   0x07B6             (1251)     jnc   .VBG_SOLID
07B2: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
07B4: 80 03    JMP   0x07B8             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
07B6: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
07B8: 9D E0    CALL  _LCD_WriteData|LCD_Write_Data|LCD_WriteData|_LCD_Write_Data(1257)     call  LCD_WriteData                ; character data
07BA: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
07BC: BF EF    JNZ   0x07AC             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
07BE: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
07C0: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
07C3: BF E5    JNZ   0x07A9             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
07C5: 18       POP   A                  (1264)     pop  A
07C6: 18       POP   A                  (1265)     pop  A
07C7: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
07C9: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
07CB: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
07DA: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
07DB: 38 03    ADD   SP,0x3             (1320)     add   SP,3
07DD: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
07DF: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
07E1: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
07E3: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
07E6: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
07E9: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
07EB: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
07EE: B0 05    JNZ   0x07F4             (1332)     jnz   .BG_OTHER
07F0: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
07F2: 80 03    JMP   0x07F6             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
07F4: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
07F6: 9D A2    CALL  _LCD_WriteData|LCD_Write_Data|LCD_WriteData|_LCD_Write_Data(1338)     call  LCD_WriteData
07F8: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
07FA: BF EE    JNZ   0x07E9             (1340)     jnz   .BG_Loop2
07FC: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
07FE: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0801: BF E4    JNZ   0x07E6             (1343)     jnz   .BG_Loop1
                                        (1344) 
0803: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0805: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0807: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0809: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: C:\Users\MATHIA~1\DOCUME~1\PSOCDE~1.2PR\WEATHE~1\WEATHE~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // Ports:
(0003) // P0_0 = MCLK
(0004) // P0_1 = XCLR adc reset
(0005) // P0_2 = Button SW
(0006) // P0_3 = windspeed input
(0007) // P0_4 = rainsensor input
(0008) // P0_5 = sunlight (solar) input
(0009) // P0_6 = I2C SDA
(0010) // P0_7 = I2C SCL
(0011) // P1_0 = Gray Code
(0012) // P1_1 = Gray Code
(0013) // P1_1 = Gray Code
(0014) // P2 = LCD
(0015) //----------------------------------------------------------------------------
(0016) 
(0017) #define LCD_LENGTH 16 // 16 plus \0 termination?
(0018) 
(0019) #include <m8c.h>        // part specific constants and macros
(0020) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0021) #include <stdio.h>
(0022) 
(0023) typedef enum {
(0024) 	overview = 0,
(0025) 	temp = 1,
(0026) 	humidity = 2,
(0027) 	rain = 3,
(0028) 	wind = 4,
(0029) } MODE;
(0030) 
(0031) void main(void)
(0032) {
__UserModules_end|_main|__text_start|_main:
  displaymode          --> X+32
  lcdSecondLine        --> X+16
  lcdFirstLine         --> X+0
    080A: 10       PUSH  X
    080B: 4F       MOV   X,SP
    080C: 38 23    ADD   SP,0x23
(0033) 	//Variables
(0034) 	char lcdFirstLine[LCD_LENGTH], lcdSecondLine[LCD_LENGTH];
(0035) 	char displaymode = 0;
    080E: 56 20 00 MOV   [X+32],0x0
(0036) 	
(0037) 	/** init **/
(0038) 	
(0039) 	// interrupt and SleepTimer init
(0040) 	M8C_EnableGInt ;                            // Turn on interrupts
    0811: 71 01    OR    F,0x1
(0041) 	SleepTimer_Start();
    0813: 10       PUSH  X
    0814: 7C 04 E6 LCALL _SleepTimer_Start
(0042)     SleepTimer_SetInterval(SleepTimer_8_HZ);    // Set interrupt to a
    0817: 50 10    MOV   A,0x10
    0819: 7C 04 F8 LCALL _SleepTimer_SetInterval
(0043)     SleepTimer_EnableInt();                     // 8 Hz rate
    081C: 7C 04 DE LCALL _SleepTimer_EnableInt
(0044) 
(0045) 	// LCD init
(0046) 	LCD_Init();
    081F: 7C 06 55 LCALL LCD_Start|_LCD_Init|LCD_Init|_LCD_Start
    0822: 20       POP   X
(0047) 	
(0048) 	// print welcome screen to LCD
(0049) 	csprintf(lcdFirstLine,"   Welcome to   ");
    0823: 50 01    MOV   A,0x1
    0825: 08       PUSH  A
    0826: 50 83    MOV   A,0x83
    0828: 08       PUSH  A
    0829: 51 08    MOV   A,[__r0]
    082B: 08       PUSH  A
    082C: 10       PUSH  X
    082D: 7C 0C 6E LCALL _csprintf
(0050) 	csprintf(lcdSecondLine, " Weatherstation ");
    0830: 50 01    MOV   A,0x1
    0832: 08       PUSH  A
    0833: 50 72    MOV   A,0x72
    0835: 08       PUSH  A
    0836: 5A 07    MOV   [__r1],X
    0838: 06 07 10 ADD   [__r1],0x10
    083B: 51 08    MOV   A,[__r0]
    083D: 08       PUSH  A
    083E: 51 07    MOV   A,[__r1]
    0840: 08       PUSH  A
    0841: 7C 0C 6E LCALL _csprintf
    0844: 38 F8    ADD   SP,0xF8
(0051) 	LCD_Position(0,0);
    0846: 10       PUSH  X
    0847: 50 00    MOV   A,0x0
    0849: 57 00    MOV   X,0x0
    084B: 7C 06 C5 LCALL _LCD_Position
    084E: 20       POP   X
(0052) 	LCD_PrString(lcdFirstLine);
    084F: 10       PUSH  X
    0850: 51 08    MOV   A,[__r0]
    0852: 7C 05 90 LCALL _LCD_PrString
(0053) 	LCD_Position(1,0);
    0855: 57 00    MOV   X,0x0
    0857: 50 01    MOV   A,0x1
    0859: 7C 06 C5 LCALL _LCD_Position
    085C: 20       POP   X
(0054) 	LCD_PrString(lcdSecondLine);
    085D: 5A 07    MOV   [__r1],X
    085F: 06 07 10 ADD   [__r1],0x10
    0862: 10       PUSH  X
    0863: 51 08    MOV   A,[__r0]
    0865: 08       PUSH  A
    0866: 51 07    MOV   A,[__r1]
    0868: 5C       MOV   X,A
    0869: 18       POP   A
    086A: 7C 05 90 LCALL _LCD_PrString
    086D: 20       POP   X
    086E: 80 91    JMP   0x0900
(0055) 	
(0056) 	while(1) {
(0057) 		// get temp and humidity here
(0058) 		
(0059) 		switch(displaymode) {
    0870: 52 20    MOV   A,[X+32]
    0872: 54 22    MOV   [X+34],A
    0874: 56 21 00 MOV   [X+33],0x0
    0877: 3D 21 00 CMP   [X+33],0x0
    087A: B0 06    JNZ   0x0881
    087C: 3D 22 00 CMP   [X+34],0x0
    087F: A0 51    JZ    0x08D1
    0881: 3D 21 00 CMP   [X+33],0x0
    0884: B0 06    JNZ   0x088B
    0886: 3D 22 01 CMP   [X+34],0x1
    0889: A0 47    JZ    0x08D1
    088B: 3D 21 00 CMP   [X+33],0x0
    088E: B0 06    JNZ   0x0895
    0890: 3D 22 02 CMP   [X+34],0x2
    0893: A0 3D    JZ    0x08D1
    0895: 3D 21 00 CMP   [X+33],0x0
    0898: B0 06    JNZ   0x089F
    089A: 3D 22 03 CMP   [X+34],0x3
    089D: A0 33    JZ    0x08D1
    089F: 3D 21 00 CMP   [X+33],0x0
    08A2: B0 06    JNZ   0x08A9
    08A4: 3D 22 04 CMP   [X+34],0x4
    08A7: A0 29    JZ    0x08D1
    08A9: 80 01    JMP   0x08AB
(0060) 			case overview:
(0061) 				// overview();
(0062) 				break;
(0063) 				
(0064) 			case temp:
(0065) 				// temp();
(0066) 				break;
(0067) 				
(0068) 			case humidity:
(0069) 				// humidity();
(0070) 				break;
(0071) 				
(0072) 			case rain:
(0073) 				// rain();
(0074) 				break;
(0075) 				
(0076) 			case wind:
(0077) 				// wind();
(0078) 				break;
(0079) 		
(0080) 			default:
(0081) 				displaymode = 0;
    08AB: 56 20 00 MOV   [X+32],0x0
(0082) 				csprintf(lcdFirstLine,"     Error      ");
    08AE: 50 01    MOV   A,0x1
    08B0: 08       PUSH  A
    08B1: 50 61    MOV   A,0x61
    08B3: 08       PUSH  A
    08B4: 51 08    MOV   A,[__r0]
    08B6: 08       PUSH  A
    08B7: 10       PUSH  X
    08B8: 7C 0C 6E LCALL _csprintf
(0083) 				csprintf(lcdSecondLine,"                ");
    08BB: 50 01    MOV   A,0x1
    08BD: 08       PUSH  A
    08BE: 50 50    MOV   A,0x50
    08C0: 08       PUSH  A
    08C1: 5A 07    MOV   [__r1],X
    08C3: 06 07 10 ADD   [__r1],0x10
    08C6: 51 08    MOV   A,[__r0]
    08C8: 08       PUSH  A
    08C9: 51 07    MOV   A,[__r1]
    08CB: 08       PUSH  A
    08CC: 7C 0C 6E LCALL _csprintf
    08CF: 38 F8    ADD   SP,0xF8
(0084) 		}
(0085) 		
(0086) 		// lets see what we've got
(0087) 		LCD_Position(0,0);
    08D1: 10       PUSH  X
    08D2: 50 00    MOV   A,0x0
    08D4: 57 00    MOV   X,0x0
    08D6: 7C 06 C5 LCALL _LCD_Position
    08D9: 20       POP   X
(0088) 		LCD_PrString(lcdFirstLine);
    08DA: 10       PUSH  X
    08DB: 51 08    MOV   A,[__r0]
    08DD: 7C 05 90 LCALL _LCD_PrString
(0089) 		LCD_Position(1,0);
    08E0: 57 00    MOV   X,0x0
    08E2: 50 01    MOV   A,0x1
    08E4: 7C 06 C5 LCALL _LCD_Position
    08E7: 20       POP   X
(0090) 		LCD_PrString(lcdSecondLine);
    08E8: 5A 07    MOV   [__r1],X
    08EA: 06 07 10 ADD   [__r1],0x10
    08ED: 10       PUSH  X
    08EE: 51 08    MOV   A,[__r0]
    08F0: 08       PUSH  A
    08F1: 51 07    MOV   A,[__r1]
    08F3: 5C       MOV   X,A
    08F4: 18       POP   A
    08F5: 7C 05 90 LCALL _LCD_PrString
(0091) 		
(0092) 		// lets sleep for a while
(0093) 		SleepTimer_SyncWait(8, SleepTimer_WAIT_RELOAD);
    08F8: 57 00    MOV   X,0x0
    08FA: 50 08    MOV   A,0x8
    08FC: 7C 05 19 LCALL _SleepTimer_SyncWait
    08FF: 20       POP   X
(0094) 	}
    0900: 8F 6F    JMP   0x0870
(0095) }
    0902: 38 DD    ADD   SP,0xDD
    0904: 20       POP   X
    0905: 8F FF    JMP   0x0905
__plcall:
    093E: 53 02    MOV   [__rX],A
    0940: 28       ROMX  
    0941: 08       PUSH  A
    0942: 51 02    MOV   A,[__rX]
    0944: 75       INC   X
    0945: 09 00    ADC   A,0x0
    0947: 28       ROMX  
    0948: 08       PUSH  A
    0949: 7F       RET   
_itoa:
    094A: 10       PUSH  X
    094B: 4F       MOV   X,SP
    094C: 38 09    ADD   SP,0x9
    094E: 52 FA    MOV   A,[X-6]
    0950: 54 03    MOV   [X+3],A
    0952: 52 F9    MOV   A,[X-7]
    0954: 54 02    MOV   [X+2],A
    0956: 3D F9 00 CMP   [X-7],0x0
    0959: B0 22    JNZ   0x097C
    095B: 3D FA 00 CMP   [X-6],0x0
    095E: B0 1D    JNZ   0x097C
    0960: 52 FC    MOV   A,[X-4]
    0962: 53 07    MOV   [__r1],A
    0964: 50 30    MOV   A,0x30
    0966: 3F 07    MVI   [__r1],A
    0968: 52 FC    MOV   A,[X-4]
    096A: 01 01    ADD   A,0x1
    096C: 53 07    MOV   [__r1],A
    096E: 50 00    MOV   A,0x0
    0970: 3F 07    MVI   [__r1],A
    0972: 52 FC    MOV   A,[X-4]
    0974: 53 07    MOV   [__r1],A
    0976: 52 FB    MOV   A,[X-5]
    0978: 53 08    MOV   [__r0],A
    097A: 81 48    JMP   0x0AC3
    097C: 52 FA    MOV   A,[X-6]
    097E: 11 00    SUB   A,0x0
    0980: 52 F9    MOV   A,[X-7]
    0982: 31 80    XOR   A,0x80
    0984: 19 80    SBB   A,0x80
    0986: D0 26    JNC   0x09AD
    0988: 3D F7 00 CMP   [X-9],0x0
    098B: B0 21    JNZ   0x09AD
    098D: 3D F8 0A CMP   [X-8],0xA
    0990: B0 1C    JNZ   0x09AD
    0992: 56 06 01 MOV   [X+6],0x1
    0995: 52 03    MOV   A,[X+3]
    0997: 73       CPL   A
    0998: 53 07    MOV   [__r1],A
    099A: 52 02    MOV   A,[X+2]
    099C: 73       CPL   A
    099D: 53 08    MOV   [__r0],A
    099F: 51 07    MOV   A,[__r1]
    09A1: 01 01    ADD   A,0x1
    09A3: 54 03    MOV   [X+3],A
    09A5: 51 08    MOV   A,[__r0]
    09A7: 09 00    ADC   A,0x0
    09A9: 54 02    MOV   [X+2],A
    09AB: 80 04    JMP   0x09B0
    09AD: 56 06 00 MOV   [X+6],0x0
    09B0: 52 FC    MOV   A,[X-4]
    09B2: 54 01    MOV   [X+1],A
    09B4: 52 F7    MOV   A,[X-9]
    09B6: 08       PUSH  A
    09B7: 52 F8    MOV   A,[X-8]
    09B9: 08       PUSH  A
    09BA: 52 02    MOV   A,[X+2]
    09BC: 08       PUSH  A
    09BD: 52 03    MOV   A,[X+3]
    09BF: 08       PUSH  A
    09C0: 7C 09 07 LCALL 0x0907
    09C3: 38 FE    ADD   SP,0xFE
    09C5: 18       POP   A
    09C6: 53 07    MOV   [__r1],A
    09C8: 18       POP   A
    09C9: 53 08    MOV   [__r0],A
    09CB: 51 07    MOV   A,[__r1]
    09CD: 54 08    MOV   [X+8],A
    09CF: 51 08    MOV   A,[__r0]
    09D1: 54 07    MOV   [X+7],A
    09D3: 50 09    MOV   A,0x9
    09D5: 13 08    SUB   A,[X+8]
    09D7: 52 07    MOV   A,[X+7]
    09D9: 31 80    XOR   A,0x80
    09DB: 53 02    MOV   [__rX],A
    09DD: 50 80    MOV   A,0x80
    09DF: 1A 02    SBB   A,[__rX]
    09E1: C0 1D    JC    0x09FF
    09E3: 52 01    MOV   A,[X+1]
    09E5: 53 07    MOV   [__r1],A
    09E7: 52 00    MOV   A,[X+0]
    09E9: 53 08    MOV   [__r0],A
    09EB: 51 07    MOV   A,[__r1]
    09ED: 01 01    ADD   A,0x1
    09EF: 54 01    MOV   [X+1],A
    09F1: 51 08    MOV   A,[__r0]
    09F3: 09 00    ADC   A,0x0
    09F5: 54 00    MOV   [X+0],A
    09F7: 52 08    MOV   A,[X+8]
    09F9: 01 30    ADD   A,0x30
    09FB: 3F 07    MVI   [__r1],A
    09FD: 80 1B    JMP   0x0A19
    09FF: 52 01    MOV   A,[X+1]
    0A01: 53 07    MOV   [__r1],A
    0A03: 52 00    MOV   A,[X+0]
    0A05: 53 08    MOV   [__r0],A
    0A07: 51 07    MOV   A,[__r1]
    0A09: 01 01    ADD   A,0x1
    0A0B: 54 01    MOV   [X+1],A
    0A0D: 51 08    MOV   A,[__r0]
    0A0F: 09 00    ADC   A,0x0
    0A11: 54 00    MOV   [X+0],A
    0A13: 52 08    MOV   A,[X+8]
    0A15: 01 57    ADD   A,0x57
    0A17: 3F 07    MVI   [__r1],A
    0A19: 52 F7    MOV   A,[X-9]
    0A1B: 08       PUSH  A
    0A1C: 52 F8    MOV   A,[X-8]
    0A1E: 08       PUSH  A
    0A1F: 52 02    MOV   A,[X+2]
    0A21: 08       PUSH  A
    0A22: 52 03    MOV   A,[X+3]
    0A24: 08       PUSH  A
    0A25: 7C 09 07 LCALL 0x0907
    0A28: 18       POP   A
    0A29: 54 03    MOV   [X+3],A
    0A2B: 18       POP   A
    0A2C: 54 02    MOV   [X+2],A
    0A2E: 38 FE    ADD   SP,0xFE
    0A30: 3D 02 00 CMP   [X+2],0x0
    0A33: BF 80    JNZ   0x09B4
    0A35: 3D 03 00 CMP   [X+3],0x0
    0A38: BF 7B    JNZ   0x09B4
    0A3A: 3D 06 00 CMP   [X+6],0x0
    0A3D: A0 19    JZ    0x0A57
    0A3F: 52 01    MOV   A,[X+1]
    0A41: 53 07    MOV   [__r1],A
    0A43: 52 00    MOV   A,[X+0]
    0A45: 53 08    MOV   [__r0],A
    0A47: 51 07    MOV   A,[__r1]
    0A49: 01 01    ADD   A,0x1
    0A4B: 54 01    MOV   [X+1],A
    0A4D: 51 08    MOV   A,[__r0]
    0A4F: 09 00    ADC   A,0x0
    0A51: 54 00    MOV   [X+0],A
    0A53: 50 2D    MOV   A,0x2D
    0A55: 3F 07    MVI   [__r1],A
    0A57: 52 01    MOV   A,[X+1]
    0A59: 53 07    MOV   [__r1],A
    0A5B: 52 00    MOV   A,[X+0]
    0A5D: 53 08    MOV   [__r0],A
    0A5F: 51 07    MOV   A,[__r1]
    0A61: 01 FF    ADD   A,0xFF
    0A63: 54 01    MOV   [X+1],A
    0A65: 51 08    MOV   A,[__r0]
    0A67: 09 FF    ADC   A,0xFF
    0A69: 54 00    MOV   [X+0],A
    0A6B: 50 00    MOV   A,0x0
    0A6D: 3F 07    MVI   [__r1],A
    0A6F: 52 FC    MOV   A,[X-4]
    0A71: 54 05    MOV   [X+5],A
    0A73: 80 3D    JMP   0x0AB1
    0A75: 52 05    MOV   A,[X+5]
    0A77: 53 07    MOV   [__r1],A
    0A79: 3E 07    MVI   A,[__r1]
    0A7B: 54 06    MOV   [X+6],A
    0A7D: 52 05    MOV   A,[X+5]
    0A7F: 53 07    MOV   [__r1],A
    0A81: 52 04    MOV   A,[X+4]
    0A83: 53 08    MOV   [__r0],A
    0A85: 51 07    MOV   A,[__r1]
    0A87: 01 01    ADD   A,0x1
    0A89: 54 05    MOV   [X+5],A
    0A8B: 51 08    MOV   A,[__r0]
    0A8D: 09 00    ADC   A,0x0
    0A8F: 54 04    MOV   [X+4],A
    0A91: 52 01    MOV   A,[X+1]
    0A93: 53 05    MOV   [__r3],A
    0A95: 3E 05    MVI   A,[__r3]
    0A97: 3F 07    MVI   [__r1],A
    0A99: 52 01    MOV   A,[X+1]
    0A9B: 53 07    MOV   [__r1],A
    0A9D: 52 00    MOV   A,[X+0]
    0A9F: 53 08    MOV   [__r0],A
    0AA1: 51 07    MOV   A,[__r1]
    0AA3: 01 FF    ADD   A,0xFF
    0AA5: 54 01    MOV   [X+1],A
    0AA7: 51 08    MOV   A,[__r0]
    0AA9: 09 FF    ADC   A,0xFF
    0AAB: 54 00    MOV   [X+0],A
    0AAD: 52 06    MOV   A,[X+6]
    0AAF: 3F 07    MVI   [__r1],A
    0AB1: 52 01    MOV   A,[X+1]
    0AB3: 53 08    MOV   [__r0],A
    0AB5: 52 05    MOV   A,[X+5]
    0AB7: 3A 08    CMP   A,[__r0]
    0AB9: CF BB    JC    0x0A75
    0ABB: 52 FC    MOV   A,[X-4]
    0ABD: 53 07    MOV   [__r1],A
    0ABF: 52 FB    MOV   A,[X-5]
    0AC1: 53 08    MOV   [__r0],A
    0AC3: 38 F7    ADD   SP,0xF7
    0AC5: 20       POP   X
    0AC6: 7F       RET   
_utoa:
    0AC7: 10       PUSH  X
    0AC8: 4F       MOV   X,SP
    0AC9: 38 07    ADD   SP,0x7
    0ACB: 52 FC    MOV   A,[X-4]
    0ACD: 54 01    MOV   [X+1],A
    0ACF: 52 F7    MOV   A,[X-9]
    0AD1: 08       PUSH  A
    0AD2: 52 F8    MOV   A,[X-8]
    0AD4: 08       PUSH  A
    0AD5: 52 F9    MOV   A,[X-7]
    0AD7: 08       PUSH  A
    0AD8: 52 FA    MOV   A,[X-6]
    0ADA: 08       PUSH  A
    0ADB: 7C 09 07 LCALL 0x0907
    0ADE: 38 FE    ADD   SP,0xFE
    0AE0: 18       POP   A
    0AE1: 53 07    MOV   [__r1],A
    0AE3: 18       POP   A
    0AE4: 53 08    MOV   [__r0],A
    0AE6: 51 07    MOV   A,[__r1]
    0AE8: 54 06    MOV   [X+6],A
    0AEA: 51 08    MOV   A,[__r0]
    0AEC: 54 05    MOV   [X+5],A
    0AEE: 50 09    MOV   A,0x9
    0AF0: 13 06    SUB   A,[X+6]
    0AF2: 52 05    MOV   A,[X+5]
    0AF4: 31 80    XOR   A,0x80
    0AF6: 53 02    MOV   [__rX],A
    0AF8: 50 80    MOV   A,0x80
    0AFA: 1A 02    SBB   A,[__rX]
    0AFC: C0 1D    JC    0x0B1A
    0AFE: 52 01    MOV   A,[X+1]
    0B00: 53 07    MOV   [__r1],A
    0B02: 52 00    MOV   A,[X+0]
    0B04: 53 08    MOV   [__r0],A
    0B06: 51 07    MOV   A,[__r1]
    0B08: 01 01    ADD   A,0x1
    0B0A: 54 01    MOV   [X+1],A
    0B0C: 51 08    MOV   A,[__r0]
    0B0E: 09 00    ADC   A,0x0
    0B10: 54 00    MOV   [X+0],A
    0B12: 52 06    MOV   A,[X+6]
    0B14: 01 30    ADD   A,0x30
    0B16: 3F 07    MVI   [__r1],A
    0B18: 80 1B    JMP   0x0B34
    0B1A: 52 01    MOV   A,[X+1]
    0B1C: 53 07    MOV   [__r1],A
    0B1E: 52 00    MOV   A,[X+0]
    0B20: 53 08    MOV   [__r0],A
    0B22: 51 07    MOV   A,[__r1]
    0B24: 01 01    ADD   A,0x1
    0B26: 54 01    MOV   [X+1],A
    0B28: 51 08    MOV   A,[__r0]
    0B2A: 09 00    ADC   A,0x0
    0B2C: 54 00    MOV   [X+0],A
    0B2E: 52 06    MOV   A,[X+6]
    0B30: 01 57    ADD   A,0x57
    0B32: 3F 07    MVI   [__r1],A
    0B34: 52 F7    MOV   A,[X-9]
    0B36: 08       PUSH  A
    0B37: 52 F8    MOV   A,[X-8]
    0B39: 08       PUSH  A
    0B3A: 52 F9    MOV   A,[X-7]
    0B3C: 08       PUSH  A
    0B3D: 52 FA    MOV   A,[X-6]
    0B3F: 08       PUSH  A
    0B40: 7C 09 07 LCALL 0x0907
    0B43: 18       POP   A
    0B44: 54 FA    MOV   [X-6],A
    0B46: 18       POP   A
    0B47: 54 F9    MOV   [X-7],A
    0B49: 38 FE    ADD   SP,0xFE
    0B4B: 3D F9 00 CMP   [X-7],0x0
    0B4E: BF 80    JNZ   0x0ACF
    0B50: 3D FA 00 CMP   [X-6],0x0
    0B53: BF 7B    JNZ   0x0ACF
    0B55: 52 01    MOV   A,[X+1]
    0B57: 53 07    MOV   [__r1],A
    0B59: 52 00    MOV   A,[X+0]
    0B5B: 53 08    MOV   [__r0],A
    0B5D: 51 07    MOV   A,[__r1]
    0B5F: 01 FF    ADD   A,0xFF
    0B61: 54 01    MOV   [X+1],A
    0B63: 51 08    MOV   A,[__r0]
    0B65: 09 FF    ADC   A,0xFF
    0B67: 54 00    MOV   [X+0],A
    0B69: 50 00    MOV   A,0x0
    0B6B: 3F 07    MVI   [__r1],A
    0B6D: 52 FC    MOV   A,[X-4]
    0B6F: 54 03    MOV   [X+3],A
    0B71: 80 3D    JMP   0x0BAF
    0B73: 52 03    MOV   A,[X+3]
    0B75: 53 07    MOV   [__r1],A
    0B77: 3E 07    MVI   A,[__r1]
    0B79: 54 04    MOV   [X+4],A
    0B7B: 52 03    MOV   A,[X+3]
    0B7D: 53 07    MOV   [__r1],A
    0B7F: 52 02    MOV   A,[X+2]
    0B81: 53 08    MOV   [__r0],A
    0B83: 51 07    MOV   A,[__r1]
    0B85: 01 01    ADD   A,0x1
    0B87: 54 03    MOV   [X+3],A
    0B89: 51 08    MOV   A,[__r0]
    0B8B: 09 00    ADC   A,0x0
    0B8D: 54 02    MOV   [X+2],A
    0B8F: 52 01    MOV   A,[X+1]
    0B91: 53 05    MOV   [__r3],A
    0B93: 3E 05    MVI   A,[__r3]
    0B95: 3F 07    MVI   [__r1],A
    0B97: 52 01    MOV   A,[X+1]
    0B99: 53 07    MOV   [__r1],A
    0B9B: 52 00    MOV   A,[X+0]
    0B9D: 53 08    MOV   [__r0],A
    0B9F: 51 07    MOV   A,[__r1]
    0BA1: 01 FF    ADD   A,0xFF
    0BA3: 54 01    MOV   [X+1],A
    0BA5: 51 08    MOV   A,[__r0]
    0BA7: 09 FF    ADC   A,0xFF
    0BA9: 54 00    MOV   [X+0],A
    0BAB: 52 04    MOV   A,[X+4]
    0BAD: 3F 07    MVI   [__r1],A
    0BAF: 52 01    MOV   A,[X+1]
    0BB1: 53 08    MOV   [__r0],A
    0BB3: 52 03    MOV   A,[X+3]
    0BB5: 3A 08    CMP   A,[__r0]
    0BB7: CF BB    JC    0x0B73
    0BB9: 52 FC    MOV   A,[X-4]
    0BBB: 53 07    MOV   [__r1],A
    0BBD: 52 FB    MOV   A,[X-5]
    0BBF: 53 08    MOV   [__r0],A
    0BC1: 38 F9    ADD   SP,0xF9
    0BC3: 20       POP   X
    0BC4: 7F       RET   
_isdigit:
    0BC5: 10       PUSH  X
    0BC6: 4F       MOV   X,SP
    0BC7: 52 FC    MOV   A,[X-4]
    0BC9: 01 13    ADD   A,0x13
    0BCB: 53 07    MOV   [__r1],A
    0BCD: 52 FB    MOV   A,[X-5]
    0BCF: 09 02    ADC   A,0x2
    0BD1: 10       PUSH  X
    0BD2: 58 07    MOV   X,[__r1]
    0BD4: 28       ROMX  
    0BD5: 20       POP   X
    0BD6: 53 07    MOV   [__r1],A
    0BD8: 55 08 00 MOV   [__r0],0x0
    0BDB: 26 07 04 AND   [__r1],0x4
    0BDE: 26 08 00 AND   [__r0],0x0
    0BE1: 20       POP   X
    0BE2: 7F       RET   
_islower:
    0BE3: 10       PUSH  X
    0BE4: 4F       MOV   X,SP
    0BE5: 52 FC    MOV   A,[X-4]
    0BE7: 01 13    ADD   A,0x13
    0BE9: 53 07    MOV   [__r1],A
    0BEB: 52 FB    MOV   A,[X-5]
    0BED: 09 02    ADC   A,0x2
    0BEF: 10       PUSH  X
    0BF0: 58 07    MOV   X,[__r1]
    0BF2: 28       ROMX  
    0BF3: 20       POP   X
    0BF4: 53 07    MOV   [__r1],A
    0BF6: 55 08 00 MOV   [__r0],0x0
    0BF9: 26 07 02 AND   [__r1],0x2
    0BFC: 26 08 00 AND   [__r0],0x0
    0BFF: 20       POP   X
    0C00: 7F       RET   
_isspace:
    0C01: 10       PUSH  X
    0C02: 4F       MOV   X,SP
    0C03: 52 FC    MOV   A,[X-4]
    0C05: 01 13    ADD   A,0x13
    0C07: 53 07    MOV   [__r1],A
    0C09: 52 FB    MOV   A,[X-5]
    0C0B: 09 02    ADC   A,0x2
    0C0D: 10       PUSH  X
    0C0E: 58 07    MOV   X,[__r1]
    0C10: 28       ROMX  
    0C11: 20       POP   X
    0C12: 53 07    MOV   [__r1],A
    0C14: 55 08 00 MOV   [__r0],0x0
    0C17: 26 07 10 AND   [__r1],0x10
    0C1A: 26 08 00 AND   [__r0],0x0
    0C1D: 20       POP   X
    0C1E: 7F       RET   
_toupper:
    0C1F: 10       PUSH  X
    0C20: 4F       MOV   X,SP
    0C21: 52 FB    MOV   A,[X-5]
    0C23: 08       PUSH  A
    0C24: 52 FC    MOV   A,[X-4]
    0C26: 08       PUSH  A
    0C27: 7C 0B E3 LCALL _islower
    0C2A: 38 FE    ADD   SP,0xFE
    0C2C: 3C 08 00 CMP   [__r0],0x0
    0C2F: B0 06    JNZ   0x0C36
    0C31: 3C 07 00 CMP   [__r1],0x0
    0C34: A0 15    JZ    0x0C4A
    0C36: 52 FC    MOV   A,[X-4]
    0C38: 11 61    SUB   A,0x61
    0C3A: 53 07    MOV   [__r1],A
    0C3C: 52 FB    MOV   A,[X-5]
    0C3E: 19 00    SBB   A,0x0
    0C40: 53 08    MOV   [__r0],A
    0C42: 06 07 41 ADD   [__r1],0x41
    0C45: 0E 08 00 ADC   [__r0],0x0
    0C48: 80 09    JMP   0x0C52
    0C4A: 52 FC    MOV   A,[X-4]
    0C4C: 53 07    MOV   [__r1],A
    0C4E: 52 FB    MOV   A,[X-5]
    0C50: 53 08    MOV   [__r0],A
    0C52: 20       POP   X
    0C53: 7F       RET   
__csdepi:
    0C54: 10       PUSH  X
    0C55: 4F       MOV   X,SP
    0C56: 5F 07 17 MOV   [__r1],[0x17]
    0C59: 5F 08 16 MOV   [__r0],[0x16]
    0C5C: 51 07    MOV   A,[__r1]
    0C5E: 01 01    ADD   A,0x1
    0C60: 53 17    MOV   [0x17],A
    0C62: 51 08    MOV   A,[__r0]
    0C64: 09 00    ADC   A,0x0
    0C66: 53 16    MOV   [0x16],A
    0C68: 52 FC    MOV   A,[X-4]
    0C6A: 3F 07    MVI   [__r1],A
    0C6C: 20       POP   X
    0C6D: 7F       RET   
_csprintf:
    0C6E: 10       PUSH  X
    0C6F: 4F       MOV   X,SP
    0C70: 38 02    ADD   SP,0x2
    0C72: 52 FC    MOV   A,[X-4]
    0C74: 53 17    MOV   [0x17],A
    0C76: 5A 08    MOV   [__r0],X
    0C78: 16 08 07 SUB   [__r0],0x7
    0C7B: 51 08    MOV   A,[__r0]
    0C7D: 54 01    MOV   [X+1],A
    0C7F: 52 00    MOV   A,[X+0]
    0C81: 08       PUSH  A
    0C82: 52 01    MOV   A,[X+1]
    0C84: 08       PUSH  A
    0C85: 52 F9    MOV   A,[X-7]
    0C87: 08       PUSH  A
    0C88: 52 FA    MOV   A,[X-6]
    0C8A: 08       PUSH  A
    0C8B: 50 03    MOV   A,0x3
    0C8D: 08       PUSH  A
    0C8E: 50 87    MOV   A,0x87
    0C90: 08       PUSH  A
    0C91: 7C 0C AD LCALL __cprint
    0C94: 38 FA    ADD   SP,0xFA
    0C96: 5F 07 17 MOV   [__r1],[0x17]
    0C99: 50 00    MOV   A,0x0
    0C9B: 3F 07    MVI   [__r1],A
    0C9D: 51 17    MOV   A,[0x17]
    0C9F: 13 FC    SUB   A,[X-4]
    0CA1: 53 07    MOV   [__r1],A
    0CA3: 51 16    MOV   A,[0x16]
    0CA5: 1B FB    SBB   A,[X-5]
    0CA7: 53 08    MOV   [__r0],A
    0CA9: 38 FE    ADD   SP,0xFE
    0CAB: 20       POP   X
    0CAC: 7F       RET   
__cprint:
    0CAD: 10       PUSH  X
    0CAE: 4F       MOV   X,SP
    0CAF: 38 11    ADD   SP,0x11
    0CB1: 56 05 00 MOV   [X+5],0x0
    0CB4: 56 04 00 MOV   [X+4],0x0
    0CB7: 83 4A    JMP   0x1002
    0CB9: 52 FA    MOV   A,[X-6]
    0CBB: 53 07    MOV   [__r1],A
    0CBD: 52 F9    MOV   A,[X-7]
    0CBF: 10       PUSH  X
    0CC0: 58 07    MOV   X,[__r1]
    0CC2: 28       ROMX  
    0CC3: 20       POP   X
    0CC4: 39 25    CMP   A,0x25
    0CC6: A0 23    JZ    0x0CEA
    0CC8: 52 FA    MOV   A,[X-6]
    0CCA: 53 07    MOV   [__r1],A
    0CCC: 52 F9    MOV   A,[X-7]
    0CCE: 10       PUSH  X
    0CCF: 58 07    MOV   X,[__r1]
    0CD1: 28       ROMX  
    0CD2: 20       POP   X
    0CD3: 10       PUSH  X
    0CD4: 08       PUSH  A
    0CD5: 52 FC    MOV   A,[X-4]
    0CD7: 53 07    MOV   [__r1],A
    0CD9: 52 FB    MOV   A,[X-5]
    0CDB: 58 07    MOV   X,[__r1]
    0CDD: 7C 09 3E LCALL __plcall
    0CE0: 38 FF    ADD   SP,0xFF
    0CE2: 20       POP   X
    0CE3: 77 05    INC   [X+5]
    0CE5: 0F 04 00 ADC   [X+4],0x0
    0CE8: 83 14    JMP   0x0FFD
    0CEA: 56 0A 00 MOV   [X+10],0x0
    0CED: 56 09 00 MOV   [X+9],0x0
    0CF0: 56 07 18 MOV   [X+7],0x18
    0CF3: 56 06 00 MOV   [X+6],0x0
    0CF6: 56 08 20 MOV   [X+8],0x20
    0CF9: 77 FA    INC   [X-6]
    0CFB: 0F F9 00 ADC   [X-7],0x0
    0CFE: 52 FA    MOV   A,[X-6]
    0D00: 53 07    MOV   [__r1],A
    0D02: 52 F9    MOV   A,[X-7]
    0D04: 10       PUSH  X
    0D05: 58 07    MOV   X,[__r1]
    0D07: 28       ROMX  
    0D08: 20       POP   X
    0D09: 54 10    MOV   [X+16],A
    0D0B: 56 0F 00 MOV   [X+15],0x0
    0D0E: 52 10    MOV   A,[X+16]
    0D10: 11 58    SUB   A,0x58
    0D12: 53 01    MOV   [__rY],A
    0D14: 52 0F    MOV   A,[X+15]
    0D16: 31 80    XOR   A,0x80
    0D18: 19 80    SBB   A,0x80
    0D1A: 2A 01    OR    A,[__rY]
    0D1C: A0 E0    JZ    0x0DFD
    0D1E: D0 1F    JNC   0x0D3E
    0D20: 52 10    MOV   A,[X+16]
    0D22: 11 45    SUB   A,0x45
    0D24: 53 01    MOV   [__rY],A
    0D26: 52 0F    MOV   A,[X+15]
    0D28: 31 80    XOR   A,0x80
    0D2A: 19 80    SBB   A,0x80
    0D2C: C0 83    JC    0x0DB0
    0D2E: 2A 01    OR    A,[__rY]
    0D30: A2 C4    JZ    0x0FF5
    0D32: 3D 0F 00 CMP   [X+15],0x0
    0D35: B0 06    JNZ   0x0D3C
    0D37: 3D 10 53 CMP   [X+16],0x53
    0D3A: A1 EE    JZ    0x0F29
    0D3C: 80 73    JMP   0x0DB0
    0D3E: 3D 0F 00 CMP   [X+15],0x0
    0D41: B0 06    JNZ   0x0D48
    0D43: 3D 10 63 CMP   [X+16],0x63
    0D46: A1 B9    JZ    0x0F00
    0D48: 3D 0F 00 CMP   [X+15],0x0
    0D4B: B0 06    JNZ   0x0D52
    0D4D: 3D 10 64 CMP   [X+16],0x64
    0D50: A0 81    JZ    0x0DD2
    0D52: 3D 0F 00 CMP   [X+15],0x0
    0D55: B0 06    JNZ   0x0D5C
    0D57: 3D 10 65 CMP   [X+16],0x65
    0D5A: A2 9A    JZ    0x0FF5
    0D5C: 3D 0F 00 CMP   [X+15],0x0
    0D5F: B0 06    JNZ   0x0D66
    0D61: 3D 10 66 CMP   [X+16],0x66
    0D64: A2 90    JZ    0x0FF5
    0D66: 3D 0F 00 CMP   [X+15],0x0
    0D69: B0 06    JNZ   0x0D70
    0D6B: 3D 10 69 CMP   [X+16],0x69
    0D6E: A0 63    JZ    0x0DD2
    0D70: 3D 0F 00 CMP   [X+15],0x0
    0D73: B0 06    JNZ   0x0D7A
    0D75: 3D 10 6F CMP   [X+16],0x6F
    0D78: A0 84    JZ    0x0DFD
    0D7A: 3D 0F 00 CMP   [X+15],0x0
    0D7D: B0 06    JNZ   0x0D84
    0D7F: 3D 10 70 CMP   [X+16],0x70
    0D82: A0 7A    JZ    0x0DFD
    0D84: 52 10    MOV   A,[X+16]
    0D86: 11 63    SUB   A,0x63
    0D88: 52 0F    MOV   A,[X+15]
    0D8A: 31 80    XOR   A,0x80
    0D8C: 19 80    SBB   A,0x80
    0D8E: C0 21    JC    0x0DB0
    0D90: 3D 0F 00 CMP   [X+15],0x0
    0D93: B0 06    JNZ   0x0D9A
    0D95: 3D 10 73 CMP   [X+16],0x73
    0D98: A1 F6    JZ    0x0F8F
    0D9A: 3D 0F 00 CMP   [X+15],0x0
    0D9D: B0 06    JNZ   0x0DA4
    0D9F: 3D 10 75 CMP   [X+16],0x75
    0DA2: A0 5A    JZ    0x0DFD
    0DA4: 3D 0F 00 CMP   [X+15],0x0
    0DA7: B0 06    JNZ   0x0DAE
    0DA9: 3D 10 78 CMP   [X+16],0x78
    0DAC: A0 50    JZ    0x0DFD
    0DAE: 80 01    JMP   0x0DB0
    0DB0: 52 FA    MOV   A,[X-6]
    0DB2: 53 07    MOV   [__r1],A
    0DB4: 52 F9    MOV   A,[X-7]
    0DB6: 10       PUSH  X
    0DB7: 58 07    MOV   X,[__r1]
    0DB9: 28       ROMX  
    0DBA: 20       POP   X
    0DBB: 10       PUSH  X
    0DBC: 08       PUSH  A
    0DBD: 52 FC    MOV   A,[X-4]
    0DBF: 53 07    MOV   [__r1],A
    0DC1: 52 FB    MOV   A,[X-5]
    0DC3: 58 07    MOV   X,[__r1]
    0DC5: 7C 09 3E LCALL __plcall
    0DC8: 38 FF    ADD   SP,0xFF
    0DCA: 20       POP   X
    0DCB: 77 05    INC   [X+5]
    0DCD: 0F 04 00 ADC   [X+4],0x0
    0DD0: 82 2C    JMP   0x0FFD
    0DD2: 52 F8    MOV   A,[X-8]
    0DD4: 01 FE    ADD   A,0xFE
    0DD6: 54 F8    MOV   [X-8],A
    0DD8: 52 F8    MOV   A,[X-8]
    0DDA: 53 07    MOV   [__r1],A
    0DDC: 3E 07    MVI   A,[__r1]
    0DDE: 54 0B    MOV   [X+11],A
    0DE0: 3E 07    MVI   A,[__r1]
    0DE2: 54 0C    MOV   [X+12],A
    0DE4: 50 00    MOV   A,0x0
    0DE6: 08       PUSH  A
    0DE7: 50 0A    MOV   A,0xA
    0DE9: 08       PUSH  A
    0DEA: 52 0B    MOV   A,[X+11]
    0DEC: 08       PUSH  A
    0DED: 52 0C    MOV   A,[X+12]
    0DEF: 08       PUSH  A
    0DF0: 52 06    MOV   A,[X+6]
    0DF2: 08       PUSH  A
    0DF3: 52 07    MOV   A,[X+7]
    0DF5: 08       PUSH  A
    0DF6: 7C 09 4A LCALL _itoa
    0DF9: 38 FA    ADD   SP,0xFA
    0DFB: 80 FC    JMP   0x0EF8
    0DFD: 52 F8    MOV   A,[X-8]
    0DFF: 01 FE    ADD   A,0xFE
    0E01: 54 F8    MOV   [X-8],A
    0E03: 52 F8    MOV   A,[X-8]
    0E05: 53 07    MOV   [__r1],A
    0E07: 3E 07    MVI   A,[__r1]
    0E09: 53 08    MOV   [__r0],A
    0E0B: 3E 07    MVI   A,[__r1]
    0E0D: 54 0C    MOV   [X+12],A
    0E0F: 51 08    MOV   A,[__r0]
    0E11: 54 0B    MOV   [X+11],A
    0E13: 52 FA    MOV   A,[X-6]
    0E15: 53 07    MOV   [__r1],A
    0E17: 52 F9    MOV   A,[X-7]
    0E19: 10       PUSH  X
    0E1A: 58 07    MOV   X,[__r1]
    0E1C: 28       ROMX  
    0E1D: 20       POP   X
    0E1E: 39 75    CMP   A,0x75
    0E20: B0 1A    JNZ   0x0E3B
    0E22: 50 00    MOV   A,0x0
    0E24: 08       PUSH  A
    0E25: 50 0A    MOV   A,0xA
    0E27: 08       PUSH  A
    0E28: 52 0B    MOV   A,[X+11]
    0E2A: 08       PUSH  A
    0E2B: 52 0C    MOV   A,[X+12]
    0E2D: 08       PUSH  A
    0E2E: 52 06    MOV   A,[X+6]
    0E30: 08       PUSH  A
    0E31: 52 07    MOV   A,[X+7]
    0E33: 08       PUSH  A
    0E34: 7C 0A C7 LCALL _utoa
    0E37: 38 FA    ADD   SP,0xFA
    0E39: 80 BE    JMP   0x0EF8
    0E3B: 52 FA    MOV   A,[X-6]
    0E3D: 53 07    MOV   [__r1],A
    0E3F: 52 F9    MOV   A,[X-7]
    0E41: 10       PUSH  X
    0E42: 58 07    MOV   X,[__r1]
    0E44: 28       ROMX  
    0E45: 20       POP   X
    0E46: 39 6F    CMP   A,0x6F
    0E48: B0 1A    JNZ   0x0E63
    0E4A: 50 00    MOV   A,0x0
    0E4C: 08       PUSH  A
    0E4D: 50 08    MOV   A,0x8
    0E4F: 08       PUSH  A
    0E50: 52 0B    MOV   A,[X+11]
    0E52: 08       PUSH  A
    0E53: 52 0C    MOV   A,[X+12]
    0E55: 08       PUSH  A
    0E56: 52 06    MOV   A,[X+6]
    0E58: 08       PUSH  A
    0E59: 52 07    MOV   A,[X+7]
    0E5B: 08       PUSH  A
    0E5C: 7C 0A C7 LCALL _utoa
    0E5F: 38 FA    ADD   SP,0xFA
    0E61: 80 96    JMP   0x0EF8
    0E63: 52 FA    MOV   A,[X-6]
    0E65: 53 07    MOV   [__r1],A
    0E67: 52 F9    MOV   A,[X-7]
    0E69: 10       PUSH  X
    0E6A: 58 07    MOV   X,[__r1]
    0E6C: 28       ROMX  
    0E6D: 20       POP   X
    0E6E: 39 70    CMP   A,0x70
    0E70: B0 31    JNZ   0x0EA2
    0E72: 52 07    MOV   A,[X+7]
    0E74: 53 07    MOV   [__r1],A
    0E76: 52 06    MOV   A,[X+6]
    0E78: 53 08    MOV   [__r0],A
    0E7A: 51 07    MOV   A,[__r1]
    0E7C: 01 01    ADD   A,0x1
    0E7E: 54 07    MOV   [X+7],A
    0E80: 51 08    MOV   A,[__r0]
    0E82: 09 00    ADC   A,0x0
    0E84: 54 06    MOV   [X+6],A
    0E86: 50 30    MOV   A,0x30
    0E88: 3F 07    MVI   [__r1],A
    0E8A: 52 07    MOV   A,[X+7]
    0E8C: 53 07    MOV   [__r1],A
    0E8E: 52 06    MOV   A,[X+6]
    0E90: 53 08    MOV   [__r0],A
    0E92: 51 07    MOV   A,[__r1]
    0E94: 01 01    ADD   A,0x1
    0E96: 54 07    MOV   [X+7],A
    0E98: 51 08    MOV   A,[__r0]
    0E9A: 09 00    ADC   A,0x0
    0E9C: 54 06    MOV   [X+6],A
    0E9E: 50 78    MOV   A,0x78
    0EA0: 3F 07    MVI   [__r1],A
    0EA2: 50 00    MOV   A,0x0
    0EA4: 08       PUSH  A
    0EA5: 50 10    MOV   A,0x10
    0EA7: 08       PUSH  A
    0EA8: 52 0B    MOV   A,[X+11]
    0EAA: 08       PUSH  A
    0EAB: 52 0C    MOV   A,[X+12]
    0EAD: 08       PUSH  A
    0EAE: 52 06    MOV   A,[X+6]
    0EB0: 08       PUSH  A
    0EB1: 52 07    MOV   A,[X+7]
    0EB3: 08       PUSH  A
    0EB4: 7C 0A C7 LCALL _utoa
    0EB7: 38 FA    ADD   SP,0xFA
    0EB9: 52 FA    MOV   A,[X-6]
    0EBB: 53 07    MOV   [__r1],A
    0EBD: 52 F9    MOV   A,[X-7]
    0EBF: 10       PUSH  X
    0EC0: 58 07    MOV   X,[__r1]
    0EC2: 28       ROMX  
    0EC3: 20       POP   X
    0EC4: 39 58    CMP   A,0x58
    0EC6: B0 31    JNZ   0x0EF8
    0EC8: 56 01 18 MOV   [X+1],0x18
    0ECB: 56 00 00 MOV   [X+0],0x0
    0ECE: 80 21    JMP   0x0EF0
    0ED0: 52 01    MOV   A,[X+1]
    0ED2: 53 07    MOV   [__r1],A
    0ED4: 3E 07    MVI   A,[__r1]
    0ED6: 53 07    MOV   [__r1],A
    0ED8: 50 00    MOV   A,0x0
    0EDA: 08       PUSH  A
    0EDB: 51 07    MOV   A,[__r1]
    0EDD: 08       PUSH  A
    0EDE: 7C 0C 1F LCALL _toupper
    0EE1: 38 FE    ADD   SP,0xFE
    0EE3: 52 01    MOV   A,[X+1]
    0EE5: 53 05    MOV   [__r3],A
    0EE7: 51 07    MOV   A,[__r1]
    0EE9: 3F 05    MVI   [__r3],A
    0EEB: 77 01    INC   [X+1]
    0EED: 0F 00 00 ADC   [X+0],0x0
    0EF0: 52 01    MOV   A,[X+1]
    0EF2: 53 07    MOV   [__r1],A
    0EF4: 3E 07    MVI   A,[__r1]
    0EF6: BF D9    JNZ   0x0ED0
    0EF8: 56 01 18 MOV   [X+1],0x18
    0EFB: 56 00 00 MOV   [X+0],0x0
    0EFE: 80 AE    JMP   0x0FAD
    0F00: 52 F8    MOV   A,[X-8]
    0F02: 01 FE    ADD   A,0xFE
    0F04: 54 F8    MOV   [X-8],A
    0F06: 52 F8    MOV   A,[X-8]
    0F08: 53 07    MOV   [__r1],A
    0F0A: 3E 07    MVI   A,[__r1]
    0F0C: 3E 07    MVI   A,[__r1]
    0F0E: 54 0D    MOV   [X+13],A
    0F10: 10       PUSH  X
    0F11: 52 0D    MOV   A,[X+13]
    0F13: 08       PUSH  A
    0F14: 52 FC    MOV   A,[X-4]
    0F16: 53 07    MOV   [__r1],A
    0F18: 52 FB    MOV   A,[X-5]
    0F1A: 58 07    MOV   X,[__r1]
    0F1C: 7C 09 3E LCALL __plcall
    0F1F: 38 FF    ADD   SP,0xFF
    0F21: 20       POP   X
    0F22: 77 05    INC   [X+5]
    0F24: 0F 04 00 ADC   [X+4],0x0
    0F27: 80 D5    JMP   0x0FFD
    0F29: 52 F8    MOV   A,[X-8]
    0F2B: 01 FE    ADD   A,0xFE
    0F2D: 54 F8    MOV   [X-8],A
    0F2F: 52 F8    MOV   A,[X-8]
    0F31: 53 07    MOV   [__r1],A
    0F33: 3E 07    MVI   A,[__r1]
    0F35: 54 02    MOV   [X+2],A
    0F37: 3E 07    MVI   A,[__r1]
    0F39: 54 03    MOV   [X+3],A
    0F3B: 3D 08 2D CMP   [X+8],0x2D
    0F3E: B0 3F    JNZ   0x0F7E
    0F40: 10       PUSH  X
    0F41: 50 2D    MOV   A,0x2D
    0F43: 08       PUSH  A
    0F44: 52 FC    MOV   A,[X-4]
    0F46: 53 07    MOV   [__r1],A
    0F48: 52 FB    MOV   A,[X-5]
    0F4A: 58 07    MOV   X,[__r1]
    0F4C: 7C 09 3E LCALL __plcall
    0F4F: 38 FF    ADD   SP,0xFF
    0F51: 20       POP   X
    0F52: 77 05    INC   [X+5]
    0F54: 0F 04 00 ADC   [X+4],0x0
    0F57: 80 26    JMP   0x0F7E
    0F59: 52 03    MOV   A,[X+3]
    0F5B: 53 07    MOV   [__r1],A
    0F5D: 52 02    MOV   A,[X+2]
    0F5F: 10       PUSH  X
    0F60: 58 07    MOV   X,[__r1]
    0F62: 28       ROMX  
    0F63: 20       POP   X
    0F64: 10       PUSH  X
    0F65: 08       PUSH  A
    0F66: 52 FC    MOV   A,[X-4]
    0F68: 53 07    MOV   [__r1],A
    0F6A: 52 FB    MOV   A,[X-5]
    0F6C: 58 07    MOV   X,[__r1]
    0F6E: 7C 09 3E LCALL __plcall
    0F71: 38 FF    ADD   SP,0xFF
    0F73: 20       POP   X
    0F74: 77 05    INC   [X+5]
    0F76: 0F 04 00 ADC   [X+4],0x0
    0F79: 77 03    INC   [X+3]
    0F7B: 0F 02 00 ADC   [X+2],0x0
    0F7E: 52 03    MOV   A,[X+3]
    0F80: 53 07    MOV   [__r1],A
    0F82: 52 02    MOV   A,[X+2]
    0F84: 10       PUSH  X
    0F85: 58 07    MOV   X,[__r1]
    0F87: 28       ROMX  
    0F88: 20       POP   X
    0F89: 39 00    CMP   A,0x0
    0F8B: BF CD    JNZ   0x0F59
    0F8D: 80 6F    JMP   0x0FFD
    0F8F: 52 F8    MOV   A,[X-8]
    0F91: 01 FE    ADD   A,0xFE
    0F93: 54 F8    MOV   [X-8],A
    0F95: 52 F8    MOV   A,[X-8]
    0F97: 53 07    MOV   [__r1],A
    0F99: 3E 07    MVI   A,[__r1]
    0F9B: 54 00    MOV   [X+0],A
    0F9D: 3E 07    MVI   A,[__r1]
    0F9F: 54 01    MOV   [X+1],A
    0FA1: 52 01    MOV   A,[X+1]
    0FA3: B0 09    JNZ   0x0FAD
    0FA5: 56 03 13 MOV   [X+3],0x13
    0FA8: 56 02 03 MOV   [X+2],0x3
    0FAB: 8F 8F    JMP   0x0F3B
    0FAD: 3D 08 2D CMP   [X+8],0x2D
    0FB0: B0 3A    JNZ   0x0FEB
    0FB2: 10       PUSH  X
    0FB3: 50 2D    MOV   A,0x2D
    0FB5: 08       PUSH  A
    0FB6: 52 FC    MOV   A,[X-4]
    0FB8: 53 07    MOV   [__r1],A
    0FBA: 52 FB    MOV   A,[X-5]
    0FBC: 58 07    MOV   X,[__r1]
    0FBE: 7C 09 3E LCALL __plcall
    0FC1: 38 FF    ADD   SP,0xFF
    0FC3: 20       POP   X
    0FC4: 77 05    INC   [X+5]
    0FC6: 0F 04 00 ADC   [X+4],0x0
    0FC9: 80 21    JMP   0x0FEB
    0FCB: 52 01    MOV   A,[X+1]
    0FCD: 53 07    MOV   [__r1],A
    0FCF: 3E 07    MVI   A,[__r1]
    0FD1: 10       PUSH  X
    0FD2: 08       PUSH  A
    0FD3: 52 FC    MOV   A,[X-4]
    0FD5: 53 07    MOV   [__r1],A
    0FD7: 52 FB    MOV   A,[X-5]
    0FD9: 58 07    MOV   X,[__r1]
    0FDB: 7C 09 3E LCALL __plcall
    0FDE: 38 FF    ADD   SP,0xFF
    0FE0: 20       POP   X
    0FE1: 77 05    INC   [X+5]
    0FE3: 0F 04 00 ADC   [X+4],0x0
    0FE6: 77 01    INC   [X+1]
    0FE8: 0F 00 00 ADC   [X+0],0x0
    0FEB: 52 01    MOV   A,[X+1]
    0FED: 53 07    MOV   [__r1],A
    0FEF: 3E 07    MVI   A,[__r1]
    0FF1: BF D9    JNZ   0x0FCB
    0FF3: 80 09    JMP   0x0FFD
    0FF5: 56 03 25 MOV   [X+3],0x25
    0FF8: 56 02 03 MOV   [X+2],0x3
    0FFB: 8F 3F    JMP   0x0F3B
    0FFD: 77 FA    INC   [X-6]
    0FFF: 0F F9 00 ADC   [X-7],0x0
    1002: 52 FA    MOV   A,[X-6]
    1004: 53 07    MOV   [__r1],A
    1006: 52 F9    MOV   A,[X-7]
    1008: 10       PUSH  X
    1009: 58 07    MOV   X,[__r1]
    100B: 28       ROMX  
    100C: 20       POP   X
    100D: 39 00    CMP   A,0x0
    100F: BC A9    JNZ   0x0CB9
    1011: 52 05    MOV   A,[X+5]
    1013: 53 07    MOV   [__r1],A
    1015: 52 04    MOV   A,[X+4]
    1017: 53 08    MOV   [__r0],A
    1019: 38 EF    ADD   SP,0xEF
    101B: 20       POP   X
    101C: 7F       RET   
    101D: 10       PUSH  X
    101E: 4F       MOV   X,SP
    101F: 38 04    ADD   SP,0x4
    1021: 80 06    JMP   0x1028
    1023: 77 FC    INC   [X-4]
    1025: 0F FB 00 ADC   [X-5],0x0
    1028: 52 FC    MOV   A,[X-4]
    102A: 53 07    MOV   [__r1],A
    102C: 52 FB    MOV   A,[X-5]
    102E: 10       PUSH  X
    102F: 58 07    MOV   X,[__r1]
    1031: 28       ROMX  
    1032: 20       POP   X
    1033: 53 07    MOV   [__r1],A
    1035: 50 00    MOV   A,0x0
    1037: 08       PUSH  A
    1038: 51 07    MOV   A,[__r1]
    103A: 08       PUSH  A
    103B: 7C 0C 01 LCALL _isspace
    103E: 38 FE    ADD   SP,0xFE
    1040: 3C 08 00 CMP   [__r0],0x0
    1043: BF DF    JNZ   0x1023
    1045: 3C 07 00 CMP   [__r1],0x0
    1048: BF DA    JNZ   0x1023
    104A: 56 03 00 MOV   [X+3],0x0
    104D: 56 02 00 MOV   [X+2],0x0
    1050: 52 FC    MOV   A,[X-4]
    1052: 53 07    MOV   [__r1],A
    1054: 52 FB    MOV   A,[X-5]
    1056: 10       PUSH  X
    1057: 58 07    MOV   X,[__r1]
    1059: 28       ROMX  
    105A: 20       POP   X
    105B: 39 2D    CMP   A,0x2D
    105D: B0 0E    JNZ   0x106C
    105F: 56 03 01 MOV   [X+3],0x1
    1062: 56 02 00 MOV   [X+2],0x0
    1065: 77 FC    INC   [X-4]
    1067: 0F FB 00 ADC   [X-5],0x0
    106A: 80 15    JMP   0x1080
    106C: 52 FC    MOV   A,[X-4]
    106E: 53 07    MOV   [__r1],A
    1070: 52 FB    MOV   A,[X-5]
    1072: 10       PUSH  X
    1073: 58 07    MOV   X,[__r1]
    1075: 28       ROMX  
    1076: 20       POP   X
    1077: 39 2B    CMP   A,0x2B
    1079: B0 06    JNZ   0x1080
    107B: 77 FC    INC   [X-4]
    107D: 0F FB 00 ADC   [X-5],0x0
    1080: 56 01 00 MOV   [X+1],0x0
    1083: 56 00 00 MOV   [X+0],0x0
    1086: 80 73    JMP   0x10FA
    1088: 52 FC    MOV   A,[X-4]
    108A: 53 07    MOV   [__r1],A
    108C: 52 FB    MOV   A,[X-5]
    108E: 53 08    MOV   [__r0],A
    1090: 51 07    MOV   A,[__r1]
    1092: 01 01    ADD   A,0x1
    1094: 54 FC    MOV   [X-4],A
    1096: 51 08    MOV   A,[__r0]
    1098: 09 00    ADC   A,0x0
    109A: 54 FB    MOV   [X-5],A
    109C: 52 01    MOV   A,[X+1]
    109E: 53 05    MOV   [__r3],A
    10A0: 52 00    MOV   A,[X+0]
    10A2: 53 06    MOV   [__r2],A
    10A4: 55 03 0A MOV   [__r5],0xA
    10A7: 55 04 00 MOV   [__r4],0x0
    10AA: 55 02 00 MOV   [__rX],0x0
    10AD: 55 01 00 MOV   [__rY],0x0
    10B0: 3C 04 00 CMP   [__r4],0x0
    10B3: B0 06    JNZ   0x10BA
    10B5: 3C 03 00 CMP   [__r5],0x0
    10B8: A0 17    JZ    0x10D0
    10BA: 70 FB    AND   F,0xFB
    10BC: 6E 04    RRC   [__r4]
    10BE: 6E 03    RRC   [__r5]
    10C0: D0 09    JNC   0x10CA
    10C2: 51 05    MOV   A,[__r3]
    10C4: 04 02    ADD   [__rX],A
    10C6: 51 06    MOV   A,[__r2]
    10C8: 0C 01    ADC   [__rY],A
    10CA: 65 05    ASL   [__r3]
    10CC: 6B 06    RLC   [__r2]
    10CE: 8F E1    JMP   0x10B0
    10D0: 5F 05 02 MOV   [__r3],[__rX]
    10D3: 5F 06 01 MOV   [__r2],[__rY]
    10D6: 51 08    MOV   A,[__r0]
    10D8: 10       PUSH  X
    10D9: 58 07    MOV   X,[__r1]
    10DB: 28       ROMX  
    10DC: 20       POP   X
    10DD: 53 07    MOV   [__r1],A
    10DF: 55 08 00 MOV   [__r0],0x0
    10E2: 51 05    MOV   A,[__r3]
    10E4: 02 07    ADD   A,[__r1]
    10E6: 53 07    MOV   [__r1],A
    10E8: 51 06    MOV   A,[__r2]
    10EA: 0A 08    ADC   A,[__r0]
    10EC: 53 08    MOV   [__r0],A
    10EE: 51 07    MOV   A,[__r1]
    10F0: 11 30    SUB   A,0x30
    10F2: 54 01    MOV   [X+1],A
    10F4: 51 08    MOV   A,[__r0]
    10F6: 19 00    SBB   A,0x0
    10F8: 54 00    MOV   [X+0],A
    10FA: 52 FC    MOV   A,[X-4]
    10FC: 53 07    MOV   [__r1],A
    10FE: 52 FB    MOV   A,[X-5]
    1100: 10       PUSH  X
    1101: 58 07    MOV   X,[__r1]
    1103: 28       ROMX  
    1104: 20       POP   X
    1105: 53 07    MOV   [__r1],A
    1107: 50 00    MOV   A,0x0
    1109: 08       PUSH  A
    110A: 51 07    MOV   A,[__r1]
    110C: 08       PUSH  A
    110D: 7C 0B C5 LCALL _isdigit
    1110: 38 FE    ADD   SP,0xFE
    1112: 3C 08 00 CMP   [__r0],0x0
    1115: BF 72    JNZ   0x1088
    1117: 3C 07 00 CMP   [__r1],0x0
    111A: BF 6D    JNZ   0x1088
    111C: 3D 02 00 CMP   [X+2],0x0
    111F: B0 06    JNZ   0x1126
    1121: 3D 03 00 CMP   [X+3],0x0
    1124: A0 11    JZ    0x1136
    1126: 52 01    MOV   A,[X+1]
    1128: 73       CPL   A
    1129: 11 FF    SUB   A,0xFF
    112B: 53 07    MOV   [__r1],A
    112D: 52 00    MOV   A,[X+0]
    112F: 73       CPL   A
    1130: 19 FF    SBB   A,0xFF
    1132: 53 08    MOV   [__r0],A
    1134: 80 09    JMP   0x113E
    1136: 52 01    MOV   A,[X+1]
    1138: 53 07    MOV   [__r1],A
    113A: 52 00    MOV   A,[X+0]
    113C: 53 08    MOV   [__r0],A
    113E: 38 FC    ADD   SP,0xFC
    1140: 20       POP   X
    1141: 7F       RET   
