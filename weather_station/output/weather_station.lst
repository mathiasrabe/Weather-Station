FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 05 80 LJMP  _SleepTimer_ISR    (0185)     ljmp	_SleepTimer_ISR
0067: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 35    MOV   A,0x35             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [0xF8],0x0         (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [0xF9],0x0         (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 05 10 LCALL 0x0510             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 08 16 MOV   [__r0],0x16        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 08 31 CMP   [__r0],0x31        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 08    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 04    MOV   A,0x4              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 49    MOV   X,0x49             (0368)     mov  X,<__idata_start
00AC: 55 08 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 08 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 08    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 0F 7C LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2551
044B: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_weather_station_Bank1
                                        (0006) export LoadConfigTBL_weather_station_Bank0
                                        (0007) export LoadConfigTBL_weather_station_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_weather_station_Bank0:
                                        (0010) ;  Instance name I2Cm, User Module I2Cm
                                        (0011) ;  Instance name LCD, User Module LCD
                                        (0012) ;  Instance name PGA_sun, User Module PGA
                                        (0013) ;       Instance name PGA_sun, Block Name GAIN(ACB01)
                                        (0014) 	db		75h, 0eh		;PGA_sun_GAIN_CR0(ACB01CR0)
                                        (0015) 	db		76h, 21h		;PGA_sun_GAIN_CR1(ACB01CR1)
                                        (0016) 	db		77h, 20h		;PGA_sun_GAIN_CR2(ACB01CR2)
                                        (0017) 	db		74h, 00h		;PGA_sun_GAIN_CR3(ACB01CR3)
                                        (0018) ;  Instance name PGA_wind, User Module PGA
                                        (0019) ;       Instance name PGA_wind, Block Name GAIN(ACB00)
                                        (0020) 	db		71h, 0eh		;PGA_wind_GAIN_CR0(ACB00CR0)
                                        (0021) 	db		72h, 21h		;PGA_wind_GAIN_CR1(ACB00CR1)
                                        (0022) 	db		73h, 20h		;PGA_wind_GAIN_CR2(ACB00CR2)
                                        (0023) 	db		70h, 00h		;PGA_wind_GAIN_CR3(ACB00CR3)
                                        (0024) ;  Instance name SAR6_sun, User Module SAR6
                                        (0025) ;       Instance name SAR6_sun, Block Name SA(ASD11)
                                        (0026) 	db		84h, 00h		;SAR6_sun_CR0(ASD11CR0)
                                        (0027) 	db		85h, 9fh		;SAR6_sun_CR1(ASD11CR1)
                                        (0028) 	db		86h, 60h		;SAR6_sun_CR2(ASD11CR2)
                                        (0029) 	db		87h, 0ch		;SAR6_sun_CR3(ASD11CR3)
                                        (0030) ;  Instance name SAR6_wind, User Module SAR6
                                        (0031) ;       Instance name SAR6_wind, Block Name SA(ASC10)
                                        (0032) 	db		80h, 00h		;SAR6_wind_CR0(ASC10CR0)
                                        (0033) 	db		81h, 5fh		;SAR6_wind_CR1(ASC10CR1)
                                        (0034) 	db		82h, 60h		;SAR6_wind_CR2(ASC10CR2)
                                        (0035) 	db		83h, 00h		;SAR6_wind_CR3(ASC10CR3)
                                        (0036) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0037) ;  Global Register values Bank 0
                                        (0038) 	db		60h, 29h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0039) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0040) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0041) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0042) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0043) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0044) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0045) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0046) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0047) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0048) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0049) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0050) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0051) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0052) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0053) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0054) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0055) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0056) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0057) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0058) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0059) 	db		ffh
                                        (0060) LoadConfigTBL_weather_station_Bank1:
                                        (0061) ;  Instance name I2Cm, User Module I2Cm
                                        (0062) ;  Instance name LCD, User Module LCD
                                        (0063) ;  Instance name PGA_sun, User Module PGA
                                        (0064) ;       Instance name PGA_sun, Block Name GAIN(ACB01)
                                        (0065) ;  Instance name PGA_wind, User Module PGA
                                        (0066) ;       Instance name PGA_wind, Block Name GAIN(ACB00)
                                        (0067) ;  Instance name SAR6_sun, User Module SAR6
                                        (0068) ;       Instance name SAR6_sun, Block Name SA(ASD11)
                                        (0069) ;  Instance name SAR6_wind, User Module SAR6
                                        (0070) ;       Instance name SAR6_wind, Block Name SA(ASC10)
                                        (0071) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0072) ;  Global Register values Bank 1
                                        (0073) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0074) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0075) 	db		60h, 15h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0076) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0077) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0078) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0079) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0080) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0081) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0082) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0083) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0084) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0085) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0086) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0087) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0088) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0089) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0090) 	db		ffh
                                        (0091) AREA psoc_config(rom, rel)
                                        (0092) LoadConfigTBL_weather_station_Ordered:
                                        (0093) ;  Ordered Global Register values
                                        (0094) 	M8C_SetBank0
044D: 62 00 00 MOV   REG[0x0],0x0       (0095) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0450: 71 10    OR    F,0x10             
                                        (0096) 	M8C_SetBank1
0452: 62 00 03 MOV   REG[0x0],0x3       (0097) 	mov	reg[00h], 03h		; Port_0_DriveMode_0 register (PRT0DM0)
0455: 62 01 F8 MOV   REG[0x1],0xF8      (0098) 	mov	reg[01h], f8h		; Port_0_DriveMode_1 register (PRT0DM1)
0458: 70 EF    AND   F,0xEF             
                                        (0099) 	M8C_SetBank0
045A: 62 03 18 MOV   REG[0x3],0x18      (0100) 	mov	reg[03h], 18h		; Port_0_DriveMode_2 register (PRT0DM2)
045D: 62 02 00 MOV   REG[0x2],0x0       (0101) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0460: 71 10    OR    F,0x10             
                                        (0102) 	M8C_SetBank1
0462: 62 02 00 MOV   REG[0x2],0x0       (0103) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0465: 62 03 00 MOV   REG[0x3],0x0       (0104) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0468: 70 EF    AND   F,0xEF             
                                        (0105) 	M8C_SetBank0
046A: 62 01 00 MOV   REG[0x1],0x0       (0106) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
046D: 62 04 00 MOV   REG[0x4],0x0       (0107) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0470: 71 10    OR    F,0x10             
                                        (0108) 	M8C_SetBank1
0472: 62 04 00 MOV   REG[0x4],0x0       (0109) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0475: 62 05 FF MOV   REG[0x5],0xFF      (0110) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0478: 70 EF    AND   F,0xEF             
                                        (0111) 	M8C_SetBank0
047A: 62 07 F8 MOV   REG[0x7],0xF8      (0112) 	mov	reg[07h], f8h		; Port_1_DriveMode_2 register (PRT1DM2)
047D: 62 06 00 MOV   REG[0x6],0x0       (0113) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0480: 71 10    OR    F,0x10             
                                        (0114) 	M8C_SetBank1
0482: 62 06 00 MOV   REG[0x6],0x0       (0115) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0485: 62 07 00 MOV   REG[0x7],0x0       (0116) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0488: 70 EF    AND   F,0xEF             
                                        (0117) 	M8C_SetBank0
048A: 62 05 00 MOV   REG[0x5],0x0       (0118) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
048D: 62 08 00 MOV   REG[0x8],0x0       (0119) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0490: 71 10    OR    F,0x10             
                                        (0120) 	M8C_SetBank1
0492: 62 08 7F MOV   REG[0x8],0x7F      (0121) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0495: 62 09 80 MOV   REG[0x9],0x80      (0122) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0498: 70 EF    AND   F,0xEF             
                                        (0123) 	M8C_SetBank0
049A: 62 0B 80 MOV   REG[0xB],0x80      (0124) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
049D: 62 0A 00 MOV   REG[0xA],0x0       (0125) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
04A0: 71 10    OR    F,0x10             
                                        (0126) 	M8C_SetBank1
04A2: 62 0A 00 MOV   REG[0xA],0x0       (0127) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
04A5: 62 0B 00 MOV   REG[0xB],0x0       (0128) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
04A8: 70 EF    AND   F,0xEF             
                                        (0129) 	M8C_SetBank0
04AA: 62 09 00 MOV   REG[0x9],0x0       (0130) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
04AD: 62 0C 00 MOV   REG[0xC],0x0       (0131) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
04B0: 71 10    OR    F,0x10             
                                        (0132) 	M8C_SetBank1
04B2: 62 0C 00 MOV   REG[0xC],0x0       (0133) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
04B5: 62 0D 00 MOV   REG[0xD],0x0       (0134) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
04B8: 70 EF    AND   F,0xEF             
                                        (0135) 	M8C_SetBank0
04BA: 62 0F 00 MOV   REG[0xF],0x0       (0136) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
04BD: 62 0E 00 MOV   REG[0xE],0x0       (0137) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
04C0: 71 10    OR    F,0x10             
                                        (0138) 	M8C_SetBank1
04C2: 62 0E 00 MOV   REG[0xE],0x0       (0139) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
04C5: 62 0F 00 MOV   REG[0xF],0x0       (0140) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
04C8: 70 EF    AND   F,0xEF             
                                        (0141) 	M8C_SetBank0
04CA: 62 0D 00 MOV   REG[0xD],0x0       (0142) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
04CD: 62 10 00 MOV   REG[0x10],0x0      (0143) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
04D0: 71 10    OR    F,0x10             
                                        (0144) 	M8C_SetBank1
04D2: 62 10 00 MOV   REG[0x10],0x0      (0145) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
04D5: 62 11 00 MOV   REG[0x11],0x0      (0146) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
04D8: 70 EF    AND   F,0xEF             
                                        (0147) 	M8C_SetBank0
04DA: 62 13 00 MOV   REG[0x13],0x0      (0148) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
04DD: 62 12 00 MOV   REG[0x12],0x0      (0149) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
04E0: 71 10    OR    F,0x10             
                                        (0150) 	M8C_SetBank1
04E2: 62 12 00 MOV   REG[0x12],0x0      (0151) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
04E5: 62 13 00 MOV   REG[0x13],0x0      (0152) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
04E8: 70 EF    AND   F,0xEF             
                                        (0153) 	M8C_SetBank0
04EA: 62 11 00 MOV   REG[0x11],0x0      (0154) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
04ED: 62 14 00 MOV   REG[0x14],0x0      (0155) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
04F0: 71 10    OR    F,0x10             
                                        (0156) 	M8C_SetBank1
04F2: 62 14 00 MOV   REG[0x14],0x0      (0157) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
04F5: 62 15 00 MOV   REG[0x15],0x0      (0158) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
04F8: 70 EF    AND   F,0xEF             
                                        (0159) 	M8C_SetBank0
04FA: 62 17 00 MOV   REG[0x17],0x0      (0160) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
04FD: 62 16 00 MOV   REG[0x16],0x0      (0161) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0500: 71 10    OR    F,0x10             
                                        (0162) 	M8C_SetBank1
0502: 62 16 00 MOV   REG[0x16],0x0      (0163) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0505: 62 17 00 MOV   REG[0x17],0x0      (0164) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0508: 70 EF    AND   F,0xEF             
                                        (0165) 	M8C_SetBank0
050A: 62 15 00 MOV   REG[0x15],0x0      (0166) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
050D: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
050F: 7F       RET                      (0168) 	ret
                                        (0169) 
                                        (0170) 
                                        (0171) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_weather_station
                                        (0026) export _LoadConfig_weather_station
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) export Port_2_Data_SHADE
                                        (0034) export _Port_2_Data_SHADE
                                        (0035) export Port_2_DriveMode_0_SHADE
                                        (0036) export _Port_2_DriveMode_0_SHADE
                                        (0037) export Port_2_DriveMode_1_SHADE
                                        (0038) export _Port_2_DriveMode_1_SHADE
                                        (0039) 
                                        (0040) 
                                        (0041) export NO_SHADOW
                                        (0042) export _NO_SHADOW
                                        (0043) 
                                        (0044) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0045) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0046) 
                                        (0047) AREA psoc_config(rom, rel)
                                        (0048) 
                                        (0049) ;---------------------------------------------------------------------------
                                        (0050) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0051) ;                  parameters handled by boot code, like CPU speed). This
                                        (0052) ;                  function can be called from user code, but typically it
                                        (0053) ;                  is only called from boot.
                                        (0054) ;
                                        (0055) ;       INPUTS: None.
                                        (0056) ;      RETURNS: Nothing.
                                        (0057) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0058) ;               In the large memory model currently only the page
                                        (0059) ;               pointer registers listed below are modified.  This does
                                        (0060) ;               not guarantee that in future implementations of this
                                        (0061) ;               function other page pointer registers will not be
                                        (0062) ;               modified.
                                        (0063) ;          
                                        (0064) ;               Page Pointer Registers Modified: 
                                        (0065) ;               CUR_PP
                                        (0066) ;
                                        (0067) _LoadConfigInit:
                                        (0068)  LoadConfigInit:
                                        (0069)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0070)     
0510: 55 10 00 MOV   [0x10],0x0         (0071) 	mov		[Port_0_Data_SHADE], 0h
0513: 55 12 03 MOV   [0x12],0x3         (0072) 	mov		[Port_0_DriveMode_0_SHADE], 3h
0516: 55 13 F8 MOV   [0x13],0xF8        (0073) 	mov		[Port_0_DriveMode_1_SHADE], f8h
0519: 55 11 00 MOV   [0x11],0x0         (0074) 	mov		[Port_2_Data_SHADE], 0h
051C: 55 14 7F MOV   [0x14],0x7F        (0075) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
051F: 55 15 80 MOV   [0x15],0x80        (0076) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0077) 
0522: 7C 05 29 LCALL 0x0529             (0078) 	lcall	LoadConfig_weather_station
0525: 7C 04 4B LCALL 0x044B             (0079) 	lcall	LoadConfigTBL_weather_station_Ordered
                                        (0080) 
                                        (0081) 
                                        (0082)     RAM_EPILOGUE RAM_USE_CLASS_4
0528: 7F       RET                      (0083)     ret
                                        (0084) 
                                        (0085) ;---------------------------------------------------------------------------
                                        (0086) ; Load Configuration weather_station
                                        (0087) ;
                                        (0088) ;    Load configuration registers for weather_station.
                                        (0089) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0090) ;
                                        (0091) ;       INPUTS: None.
                                        (0092) ;      RETURNS: Nothing.
                                        (0093) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0094) ;               modified as may the Page Pointer registers!
                                        (0095) ;               In the large memory model currently only the page
                                        (0096) ;               pointer registers listed below are modified.  This does
                                        (0097) ;               not guarantee that in future implementations of this
                                        (0098) ;               function other page pointer registers will not be
                                        (0099) ;               modified.
                                        (0100) ;          
                                        (0101) ;               Page Pointer Registers Modified: 
                                        (0102) ;               CUR_PP
                                        (0103) ;
                                        (0104) _LoadConfig_weather_station:
                                        (0105)  LoadConfig_weather_station:
                                        (0106)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0107) 
0529: 10       PUSH  X                  (0108) 	push	x
052A: 70 EF    AND   F,0xEF             
                                        (0109)     M8C_SetBank0                    ; Force bank 0
052C: 50 00    MOV   A,0x0              (0110)     mov     a, 0                    ; Specify bank 0
052E: 67       ASR   A                  (0111)     asr     a                       ; Store in carry flag
                                        (0112)                                     ; Load bank 0 table:
052F: 50 02    MOV   A,0x2              (0113)     mov     A, >LoadConfigTBL_weather_station_Bank0
0531: 57 66    MOV   X,0x66             (0114)     mov     X, <LoadConfigTBL_weather_station_Bank0
0533: 7C 05 44 LCALL 0x0544             (0115)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0116) 
0536: 50 01    MOV   A,0x1              (0117)     mov     a, 1                    ; Specify bank 1
0538: 67       ASR   A                  (0118)     asr     a                       ; Store in carry flag
                                        (0119)                                     ; Load bank 1 table:
0539: 50 02    MOV   A,0x2              (0120)     mov     A, >LoadConfigTBL_weather_station_Bank1
053B: 57 B1    MOV   X,0xB1             (0121)     mov     X, <LoadConfigTBL_weather_station_Bank1
053D: 7C 05 44 LCALL 0x0544             (0122)     lcall   LoadConfig              ; Load the bank 1 values
0540: 70 EF    AND   F,0xEF             
                                        (0123) 
                                        (0124)     M8C_SetBank0                    ; Force return to bank 0
0542: 20       POP   X                  (0125) 	pop		x
                                        (0126) 
                                        (0127)     RAM_EPILOGUE RAM_USE_CLASS_4
0543: 7F       RET                      (0128)     ret
                                        (0129) 
                                        (0130) 
                                        (0131) 
                                        (0132) 
                                        (0133) ;---------------------------------------------------------------------------
                                        (0134) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0135) ;              pairs. Terminate on address=0xFF.
                                        (0136) ;
                                        (0137) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0138) ;           Flag Register Carry bit encodes the Register Bank
                                        (0139) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0140) ;
                                        (0141) ;  RETURNS: nothing.
                                        (0142) ;
                                        (0143) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0144) ;                X-3 Temporary store for register address
                                        (0145) ;                X-2 LSB of config table address
                                        (0146) ;                X-1 MSB of config table address
                                        (0147) ;
                                        (0148) LoadConfig:
                                        (0149)     RAM_PROLOGUE RAM_USE_CLASS_2
0544: 38 02    ADD   SP,0x2             (0150)     add     SP, 2                   ; Set up local vars
0546: 10       PUSH  X                  (0151)     push    X                       ; Save config table address on stack
0547: 08       PUSH  A                  (0152)     push    A
0548: 4F       MOV   X,SP               (0153)     mov     X, SP
0549: 56 FC 00 MOV   [X-4],0x0          (0154)     mov     [X-4], 0                ; Set default Destination to Bank 0
054C: D0 04    JNC   0x0551             (0155)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
054E: 56 FC 01 MOV   [X-4],0x1          (0156)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0157) .BankSelectSaved:
0551: 18       POP   A                  (0158)     pop     A
0552: 20       POP   X                  (0159)     pop     X
0553: 70 EF    AND   F,0xEF             
0555: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0160) 
                                        (0161) LoadConfigLp:
                                        (0162)     M8C_SetBank0                    ; Switch to bank 0
                                        (0163)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0558: 10       PUSH  X                  (0164)     push    X                       ; Preserve the config table address
0559: 08       PUSH  A                  (0165)     push    A
055A: 28       ROMX                     (0166)     romx                            ; Load register address from table
055B: 39 FF    CMP   A,0xFF             (0167)     cmp     A, END_CONFIG_TABLE     ; End of table?
055D: A0 1F    JZ    0x057D             (0168)     jz      EndLoadConfig           ;   Yes, go wrap it up
055F: 4F       MOV   X,SP               (0169)     mov     X, SP                   ;
0560: 48 FC 01 TST   [X-4],0x1          (0170)     tst     [X-4], 1                ; Loading IO Bank 1?
0563: A0 03    JZ    0x0567             (0171)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0565: 71 10    OR    F,0x10             
                                        (0172)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0173) .IOBankNowSet:
0567: 54 FD    MOV   [X-3],A            (0174)     mov     [X-3], A                ; Stash the register address
0569: 18       POP   A                  (0175)     pop     A                       ; Retrieve the table address
056A: 20       POP   X                  (0176)     pop     X
056B: 75       INC   X                  (0177)     inc     X                       ; Advance to the data byte
056C: 09 00    ADC   A,0x0              (0178)     adc     A, 0
056E: 10       PUSH  X                  (0179)     push    X                       ; Save the config table address again
056F: 08       PUSH  A                  (0180)     push    A
0570: 28       ROMX                     (0181)     romx                            ; load config data from the table
0571: 4F       MOV   X,SP               (0182)     mov     X, SP                   ; retrieve the register address
0572: 59 FD    MOV   X,[X-3]            (0183)     mov     X, [X-3]
0574: 61 00    MOV   REG[X+0x0],A       (0184)     mov     reg[X], A               ; Configure the register
0576: 18       POP   A                  (0185)     pop     A                       ; retrieve the table address
0577: 20       POP   X                  (0186)     pop     X
0578: 75       INC   X                  (0187)     inc     X                       ; advance to next table entry
0579: 09 00    ADC   A,0x0              (0188)     adc     A, 0
057B: 8F D7    JMP   0x0553             (0189)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0190) EndLoadConfig:
057D: 38 FC    ADD   SP,0xFC            (0191)     add     SP, -4
                                        (0192)     RAM_EPILOGUE RAM_USE_CLASS_2
057F: 7F       RET                      (0193)     ret
                                        (0194) 
                                        (0195) AREA InterruptRAM(ram, rel)
                                        (0196) 
                                        (0197) NO_SHADOW:
                                        (0198) _NO_SHADOW:
                                        (0199) ; write only register shadows
                                        (0200) _Port_0_Data_SHADE:
                                        (0201) Port_0_Data_SHADE:	BLK	1
                                        (0202) _Port_2_Data_SHADE:
                                        (0203) Port_2_Data_SHADE:	BLK	1
                                        (0204) _Port_0_DriveMode_0_SHADE:
                                        (0205) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0206) _Port_0_DriveMode_1_SHADE:
                                        (0207) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0208) _Port_2_DriveMode_0_SHADE:
                                        (0209) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0210) _Port_2_DriveMode_1_SHADE:
                                        (0211) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0212) 
FILE: lib\sleeptimerint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimerINT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2012/3/2 at 9:15:13
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_fTick
                                        (0024) export _SleepTimer_fTick
                                        (0025) export  SleepTimer_bTimerValue
                                        (0026) export _SleepTimer_bTimerValue
                                        (0027) export  SleepTimer_bCountDown
                                        (0028) export _SleepTimer_bCountDown
                                        (0029) export  SleepTimer_TickCount
                                        (0030) export _SleepTimer_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_fTick:
                                        (0038) _SleepTimer_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_bTimerValue:
                                        (0041) _SleepTimer_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_bCountDown:
                                        (0044) _SleepTimer_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_TickCount:
                                        (0047) _SleepTimer_TickCount:    BLK  SleepTimer_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_ISR:
                                        (0090) 
0580: 2E 09 01 OR    [0x9],0x1          (0091)    or   [SleepTimer_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
0583: 47 0B FF TST   [0xB],0xFF         (0094)    tst  [SleepTimer_bCountDown],0xFF
0586: A0 03    JZ    0x058A             (0095)    jz   .DoTimer
0588: 7A 0B    DEC   [0xB]              (0096)    dec  [SleepTimer_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
058A: 47 0A FF TST   [0xA],0xFF         (0099)    tst  [SleepTimer_bTimerValue],0xFF
058D: A0 03    JZ    0x0591             (0100)    jz   .IncBigCounter
058F: 7A 0A    DEC   [0xA]              (0101)    dec  [SleepTimer_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_TICK_CNTR_SIZE & 0x04)
0591: 76 0F    INC   [0xF]              (0105)    inc  [SleepTimer_TickCount+3]
0593: D0 0B    JNC   0x059F             (0106)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0107) 
0595: 76 0E    INC   [0xE]              (0108)    inc  [SleepTimer_TickCount+2]
0597: D0 07    JNC   0x059F             (0109)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_TICK_CNTR_SIZE & (0x04|0x02))
0599: 76 0D    INC   [0xD]              (0113)    inc  [SleepTimer_TickCount+1]
059B: D0 03    JNC   0x059F             (0114)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
059D: 76 0C    INC   [0xC]              (0117)    inc  [SleepTimer_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
                                        (0138)    ;lcall _My_C_Function
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
059F: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimerINT.asm
                                        (0150) 
FILE: lib\sleeptimer.asm                (0001) ;;*****************************************************************************
05A0: 43 E0 40 OR    REG[0xE0],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   SleepTimer.asm
                                        (0004) ;;  Version: 1.0, Updated on 2012/3/2 at 9:15:13
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer User Module software implementation file for the
                                        (0008) ;;                22/24/27/29xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "SleepTimer.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name reference for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  SleepTimer_EnableInt
                                        (0041) export _SleepTimer_EnableInt
                                        (0042) export  SleepTimer_DisableInt
                                        (0043) export _SleepTimer_DisableInt
                                        (0044) 
                                        (0045) export  SleepTimer_Start
                                        (0046) export _SleepTimer_Start
                                        (0047) export  SleepTimer_Stop
                                        (0048) export _SleepTimer_Stop
                                        (0049) 
                                        (0050) export  SleepTimer_TickWait
                                        (0051) export _SleepTimer_TickWait
                                        (0052) 
                                        (0053) export  SleepTimer_SyncWait
                                        (0054) export _SleepTimer_SyncWait
                                        (0055) 
                                        (0056) export  SleepTimer_SetInterval
                                        (0057) export _SleepTimer_SetInterval
                                        (0058) 	
                                        (0059) export  SleepTimer_bGetTickCntr
                                        (0060) export _SleepTimer_bGetTickCntr
                                        (0061) 
                                        (0062) export  SleepTimer_SetTimer
                                        (0063) export _SleepTimer_SetTimer
                                        (0064) 
                                        (0065) export  SleepTimer_bGetTimer
                                        (0066) export _SleepTimer_bGetTimer
                                        (0067) 
                                        (0068) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0069) export  SleepTimer_iGetTickCntr
                                        (0070) export _SleepTimer_iGetTickCntr
                                        (0071) ENDIF
                                        (0072) 
                                        (0073) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0074) export  SleepTimer_lGetTickCntr
                                        (0075) export _SleepTimer_lGetTickCntr
                                        (0076) ENDIF
                                        (0077) 
                                        (0078) 
                                        (0079) area text (ROM,REL)
                                        (0080) 
                                        (0081) ;-----------------------------------------------
                                        (0082) ;  EQUATES
                                        (0083) ;-----------------------------------------------
                                        (0084) 
                                        (0085) ; Counter LSB Offset if 4 byte tick counter
                                        (0086) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0087) ST_LSB_OFFSET:   equ  3
                                        (0088) ENDIF
                                        (0089) 
                                        (0090) ; Counter LSB Offset if 2 byte tick counter
                                        (0091) IF(SleepTimer_TICK_CNTR_SIZE & 2)
                                        (0092) ST_LSB_OFFSET:   equ  1
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ; Counter LSB Offset if 1 byte tick counter
                                        (0096) IF(SleepTimer_TICK_CNTR_SIZE & 1)
                                        (0097) ST_LSB_OFFSET:   equ  0
                                        (0098) ENDIF
                                        (0099) 
                                        (0100) 
                                        (0101) area UserModules (ROM, REL, CON)
                                        (0102) 
                                        (0103) ;=============================================================================
                                        (0104) ;=============================================================================
                                        (0105) ;
                                        (0106) ;     Low-Level Commands
                                        (0107) ;
                                        (0108) ;=============================================================================
                                        (0109) ;=============================================================================
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: SleepTimer_EnableInt
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Enables SleepTimer interrupts.
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;
                                        (0119) ;  ARGUMENTS:
                                        (0120) ;     none.
                                        (0121) ;
                                        (0122) ;  RETURNS:
                                        (0123) ;     none.
                                        (0124) ;
                                        (0125) ;  SIDE EFFECTS:
                                        (0126) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0127) ;
                                        (0128) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0129) ;
                                        (0130)  SleepTimer_EnableInt:
                                        (0131) _SleepTimer_EnableInt:
                                        (0132)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0133)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0134)    RAM_EPILOGUE RAM_USE_CLASS_1
05A3: 7F       RET                      (0135)    ret
05A4: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0136) .ENDSECTION
                                        (0137) 
                                        (0138)     
                                        (0139) .SECTION
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;  FUNCTION NAME: SleepTimer_DisableInt
                                        (0142) ;
                                        (0143) ;  DESCRIPTION:
                                        (0144) ;     Disables the sleep timer. 
                                        (0145) ;
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     none.
                                        (0150) ;
                                        (0151) ;  RETURNS:
                                        (0152) ;     none.
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0156) ;
                                        (0157) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0158) ;
                                        (0159)  SleepTimer_DisableInt:
                                        (0160) _SleepTimer_DisableInt:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
05A7: 7F       RET                      (0164)    ret
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) 
                                        (0168) .SECTION
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;  FUNCTION NAME: SleepTimer_Start()
                                        (0171) ;
                                        (0172) ;  DESCRIPTION:
                                        (0173) ;     Clears all the variables.  
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:
                                        (0177) ;      none
                                        (0178) ;
                                        (0179) ;  RETURNS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  SIDE EFFECTS;    
                                        (0183) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0184) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0185) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0186) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0187) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0188) ;          
                                        (0189) ;    Page Pointer Registers Modified: 
                                        (0190) ;          CUR_PP
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0193) ;
                                        (0194)  SleepTimer_Start:
                                        (0195) _SleepTimer_Start:
                                        (0196)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0197)    RAM_SETPAGE_CUR >SleepTimer_fTick      
05A8: 50 00    MOV   A,0x0              (0198)    mov  A,0
05AA: 53 09    MOV   [0x9],A            (0199)    mov  [SleepTimer_fTick],A
05AC: 53 0A    MOV   [0xA],A            (0200)    mov  [SleepTimer_bTimerValue],A
05AE: 53 0B    MOV   [0xB],A            (0201)    mov  [SleepTimer_bCountDown],A
05B0: 53 0F    MOV   [0xF],A            (0202)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET],A        ; Clear TickCount[0:7]
                                        (0203) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
05B2: 53 0E    MOV   [0xE],A            (0204)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET - 1],A    ; Clear TickCount[8:15]
                                        (0205) ENDIF
                                        (0206) 
                                        (0207) 
                                        (0208) IF(SleepTimer_TICK_CNTR_SIZE & 4)
05B4: 53 0D    MOV   [0xD],A            (0209)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 2],A    ; Clear TickCount[16:31]
05B6: 53 0C    MOV   [0xC],A            (0210)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 3],A    
                                        (0211) ENDIF
                                        (0212) 
                                        (0213) 
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_4
05B8: 7F       RET                      (0215)    ret
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: SleepTimer_Stop
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;   This function does nothing at this time.  It is only here as a place 
                                        (0225) ;   holder.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;     none.
                                        (0230) ;
                                        (0231) ;  RETURNS:
                                        (0232) ;     none.
                                        (0233) ;
                                        (0234) ;  SIDE EFFECTS:
                                        (0235) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0236) ;
                                        (0237) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0238) ;
                                        (0239)  SleepTimer_Stop:
                                        (0240) _SleepTimer_Stop:
                                        (0241)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_1
05B9: 7F       RET                      (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: SleepTimer_SetInterval
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Sets sleep timer interval
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;     A <= Timer setting
                                        (0257) ;
                                        (0258) ;  RETURNS:
                                        (0259) ;     none.
                                        (0260) ;
                                        (0261) ;  SIDE EFFECTS:
                                        (0262) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0263) ;
                                        (0264) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0265) ;
                                        (0266)  SleepTimer_SetInterval:
                                        (0267) _SleepTimer_SetInterval:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
05BA: 21 18    AND   A,0x18             (0269)    and  A,SleepTimer_CLOCK_MASK               ; Mask off invalid data
05BC: 4F       MOV   X,SP               (0270)    mov  X, SP
05BD: 08       PUSH  A                  (0271)    push A
05BE: 71 10    OR    F,0x10             
                                        (0272)    M8C_SetBank1
05C0: 5D E0    MOV   A,REG[0xE0]        (0273)    mov  A, reg[OSC_CR0]                  ; Get current timer value
05C2: 21 E7    AND   A,0xE7             (0274)    and  A,~SleepTimer_CLOCK_MASK   ; Zero out old timer value
05C4: 2B 00    OR    A,[X+0]            (0275)    or   A, [X]                           ; Set new timer values
05C6: 60 E0    MOV   REG[0xE0],A        (0276)    mov  reg[OSC_CR0],A                   ; Write it
05C8: 70 EF    AND   F,0xEF             
                                        (0277)    M8C_SetBank0
05CA: 18       POP   A                  (0278)    pop  A
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_2
05CB: 7F       RET                      (0280)    ret
                                        (0281) .ENDSECTION
                                        (0282) 
                                        (0283) 
                                        (0284) .SECTION
                                        (0285) ;-----------------------------------------------------------------------------
                                        (0286) ;  FUNCTION NAME: SleepTimer_TickWait(BYTE bTicks)
                                        (0287) ;
                                        (0288) ;  DESCRIPTION:
                                        (0289) ;     Wait X Ticks and return
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292) ;
                                        (0293) ;  ARGUMENTS:
                                        (0294) ;     A <= Count down time
                                        (0295) ;
                                        (0296) ;  RETURNS:
                                        (0297) ;     none.
                                        (0298) ;
                                        (0299) ;  SIDE EFFECTS;    
                                        (0300) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0301) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0302) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0303) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0304) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0305) ;          
                                        (0306) ;    Page Pointer Registers Modified: 
                                        (0307) ;          CUR_PP
                                        (0308) ;
                                        (0309) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0310) ;
                                        (0311)  SleepTimer_TickWait:
                                        (0312) _SleepTimer_TickWait:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >SleepTimer_fTick      
05CC: 55 09 00 MOV   [0x9],0x0          (0315)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
                                        (0316) 
                                        (0317) .WaitTick:
05CF: 47 09 FF TST   [0x9],0xFF         (0318)    tst   [SleepTimer_fTick],0xFF          ; Check for tick 
05D2: AF FC    JZ    0x05CF             (0319)    jz    .WaitTick
05D4: 55 09 00 MOV   [0x9],0x0          (0320)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
05D7: 78       DEC   A                  (0321)    dec   A                                      ; Dec the timer variable
05D8: BF F6    JNZ   0x05CF             (0322)    jnz   .WaitTick                              ; Loop until we count down to zero
                                        (0323) 
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
05DA: 7F       RET                      (0325)    ret
                                        (0326) .ENDSECTION
                                        (0327) 
                                        (0328) 
                                        (0329) .SECTION
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  FUNCTION NAME: SleepTimer_SyncWait(BYTE bCounts, BYTE fMode)
                                        (0332) ;
                                        (0333) ;  DESCRIPTION:
                                        (0334) ;     This function resets the SyncWait timer.  If fMode = 0, the timer
                                        (0335) ;     is set to the new value then exits the function immediatly.  If fMode
                                        (0336) ;     is set to 1, the firmware waits for the timer to expire before the
                                        (0337) ;     timer is reset and and exits.
                                        (0338) ;
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;
                                        (0341) ;  ARGUMENTS:
                                        (0342) ;     A <= tCounts to wait
                                        (0343) ;     X <= fMode    fMode = 0  Just reload the value, do not wait
                                        (0344) ;                   fMode = 1  Wait for last value to count down to zero
                                        (0345) ;                              then reload.
                                        (0346) ;
                                        (0347) ;  RETURNS:
                                        (0348) ;     none.
                                        (0349) ;
                                        (0350) ;  SIDE EFFECTS;    
                                        (0351) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0353) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0354) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0355) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0356) ;          
                                        (0357) ;    Page Pointer Registers Modified: 
                                        (0358) ;          CUR_PP
                                        (0359) ;
                                        (0360) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0361) ;
                                        (0362)  SleepTimer_SyncWait:
                                        (0363) _SleepTimer_SyncWait:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >SleepTimer_bCountDown
05DB: 4B       SWAP  A,X                (0366)    swap  A,X
05DC: 21 01    AND   A,0x1              (0367)    AND   A,SleepTimer_FORCE_RELOAD
05DE: B0 06    JNZ   0x05E5             (0368)    jnz   .ReloadIt
                                        (0369) 
                                        (0370) .WaitLoop:
05E0: 47 0B FF TST   [0xB],0xFF         (0371)    tst   [SleepTimer_bCountDown],0xFF
05E3: BF FC    JNZ   0x05E0             (0372)    jnz   .WaitLoop
                                        (0373) 
                                        (0374) 
                                        (0375) .ReloadIt:
05E5: 4B       SWAP  A,X                (0376)    swap  A,X
05E6: 53 0B    MOV   [0xB],A            (0377)    mov   [SleepTimer_bCountDown],A 
                                        (0378) 
                                        (0379)    RAM_EPILOGUE RAM_USE_CLASS_4
05E8: 7F       RET                      (0380)    ret
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) 
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: SleepTimer_bGetTickCntr
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:
                                        (0390) ;     Returns the LSB of the tick Counter
                                        (0391) ;
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     LSB of lTickCount
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS;    
                                        (0401) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0402) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0403) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0404) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0405) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0406) ;          
                                        (0407) ;    Page Pointer Registers Modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0411) ;
                                        (0412)  SleepTimer_bGetTickCntr:
                                        (0413) _SleepTimer_bGetTickCntr:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0415)    RAM_SETPAGE_CUR >SleepTimer_TickCount
05E9: 51 0F    MOV   A,[0xF]            (0416)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
05EB: 7F       RET                      (0418)    ret
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: SleepTimer_SetTimer
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;     Set timer with parameter in A
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     A => Value used to set Timer value
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;     None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS;    
                                        (0437) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0438) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0439) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0440) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0441) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0442) ;          
                                        (0443) ;    Page Pointer Registers Modified: 
                                        (0444) ;          CUR_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0447) ;
                                        (0448)  SleepTimer_SetTimer:
                                        (0449) _SleepTimer_SetTimer:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0451)    RAM_SETPAGE_CUR >SleepTimer_TickCount
05EC: 53 0A    MOV   [0xA],A            (0452)    mov   [SleepTimer_bTimerValue],A
                                        (0453)    RAM_EPILOGUE RAM_USE_CLASS_4
05EE: 7F       RET                      (0454)    ret
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: SleepTimer_bGetTimer
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Returns timer value in A
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS:
                                        (0467) ;     None
                                        (0468) ;
                                        (0469) ;  RETURNS:
                                        (0470) ;     Return timer value in A
                                        (0471) ;
                                        (0472) ;  SIDE EFFECTS;    
                                        (0473) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0474) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0475) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0476) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0477) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0478) ;          
                                        (0479) ;    Page Pointer Registers Modified: 
                                        (0480) ;          CUR_PP
                                        (0481) ;
                                        (0482) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0483) ;
                                        (0484)  SleepTimer_bGetTimer:
                                        (0485) _SleepTimer_bGetTimer:
                                        (0486)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0487)    RAM_SETPAGE_CUR >SleepTimer_TickCount
05EF: 51 0A    MOV   A,[0xA]            (0488)    mov   A,[SleepTimer_bTimerValue]
                                        (0489)    RAM_EPILOGUE RAM_USE_CLASS_4
05F1: 7F       RET                      (0490)    ret
05F2: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0491) .ENDSECTION
                                        (0492) 
                                        (0493) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: SleepTimer_iGetTickCntr
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Returns the least significant 16 bits.
                                        (0500) ;
                                        (0501) ;-----------------------------------------------------------------------------
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     none
                                        (0505) ;
                                        (0506) ;  RETURNS:
                                        (0507) ;     (int)TickCount in A and X  
                                        (0508) ;     X  <= MSB
                                        (0509) ;     A  <= LSB
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS;    
                                        (0512) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0513) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0514) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0515) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0516) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0517) ;          
                                        (0518) ;    Page Pointer Registers Modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0522) ;
                                        (0523)  SleepTimer_iGetTickCntr:
                                        (0524) _SleepTimer_iGetTickCntr:
                                        (0525)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0526)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0527)    ; Disable interrupt here
                                        (0528)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
05F5: 51 0F    MOV   A,[0xF]            (0529)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]    ; Place LSB in A
05F7: 58 0E    MOV   X,[0xE]            (0530)    mov   X,[SleepTimer_TickCount + ST_LSB_OFFSET - 1]    ; Place MSB in X
05F9: 43 E0 40 OR    REG[0xE0],0x40     
                                        (0531)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0532)    RAM_EPILOGUE RAM_USE_CLASS_4
05FC: 7F       RET                      (0533)    ret
05FD: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0534) .ENDSECTION
                                        (0535) ENDIF
                                        (0536) 
                                        (0537) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0538) .SECTION
                                        (0539) ;-----------------------------------------------------------------------------
                                        (0540) ;  FUNCTION NAME: SleepTimer_lGetTickCntr
                                        (0541) ;
                                        (0542) ;  DESCRIPTION:
                                        (0543) ;     Returns a pointer to TickCount
                                        (0544) ;
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     [A:X] => Pointer to 32 bit tick counter (X=LSB, A=MSB)
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     Pointer to lTickCount
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS;    
                                        (0554) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0555) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0556) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0557) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0558) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0559) ;          
                                        (0560) ;    Page Pointer Registers Modified: 
                                        (0561) ;          CUR_PP
                                        (0562) ;
                                        (0563) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0564) ;
                                        (0565)  SleepTimer_lGetTickCntr:
                                        (0566) _SleepTimer_lGetTickCntr:
                                        (0567)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0568)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0569)    ; Disable interrupt here
                                        (0570)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0571)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0572)    RAM_SETPAGE_IDX A
0600: 08       PUSH  A                  (0573)    push  A
0601: 51 0C    MOV   A,[0xC]            (0574)    mov   A,[SleepTimer_TickCount + 0]
0603: 54 00    MOV   [X+0],A            (0575)    mov   [X + 0],A
0605: 51 0D    MOV   A,[0xD]            (0576)    mov   A,[SleepTimer_TickCount + 1]
0607: 54 01    MOV   [X+1],A            (0577)    mov   [X + 1],A
0609: 51 0E    MOV   A,[0xE]            (0578)    mov   A,[SleepTimer_TickCount + 2]
060B: 54 02    MOV   [X+2],A            (0579)    mov   [X + 2],A
060D: 51 0F    MOV   A,[0xF]            (0580)    mov   A,[SleepTimer_TickCount + 3]
060F: 54 03    MOV   [X+3],A            (0581)    mov   [X + 3],A
0611: 18       POP   A                  (0582)    pop   A
0612: 43 E0 40 OR    REG[0xE0],0x40     
                                        (0583)    
                                        (0584)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0585)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_EPILOGUE RAM_USE_CLASS_3
0615: 7F       RET                      (0587)    ret
                                        (0588) .ENDSECTION
                                        (0589) ENDIF
                                        (0590) 
                                        (0591) 
                                        (0592) 
                                        (0593) 
                                        (0594) ; End of File SleepTimer.asm
FILE: lib\sar6_wind.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SAR6_wind.asm
                                        (0004) ;;  Version: 1.5, Updated on 2012/3/2 at 9:15:12
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SAR6 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "SAR6_wind.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  SAR6_wind_Start
                                        (0021) export _SAR6_wind_Start
                                        (0022) export  SAR6_wind_SetPower
                                        (0023) export _SAR6_wind_SetPower
                                        (0024) export  SAR6_wind_cGetSample
                                        (0025) export _SAR6_wind_cGetSample
                                        (0026) export  SAR6_wind_Stop
                                        (0027) export _SAR6_wind_Stop
                                        (0028) 
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ; WARNING! These exports will be removed in
                                        (0032) ; a future release.
                                        (0033) ;-----------------------------------------------
                                        (0034) export  SAR6_wind_GetSample
                                        (0035) export _SAR6_wind_GetSample
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;-----------------------------------------------
                                        (0040) bPWRMASK:  equ 03h              ; Power bitfield in Switched Cap CR3 reg
                                        (0041) 
                                        (0042) AREA UserModules (ROM, REL)
                                        (0043) 
                                        (0044) .SECTION
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: SAR6_wind_Start
                                        (0047) ;  FUNCTION NAME: SAR6_wind_SetPower
                                        (0048) ;
                                        (0049) ;  DESCRIPTION:
                                        (0050) ;     Applies power setting to the module's SoCblocs
                                        (0051) ;
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;
                                        (0054) ;  ARGUMENTS:
                                        (0055) ;    A   contains the power setting 0=Off, 1=Low, 2=Med, 3=High
                                        (0056) ;
                                        (0057) ;  RETURNS:  NA
                                        (0058) ;
                                        (0059) ;  SIDE EFFECTS:
                                        (0060) ;    The A and X registers may be modified by this or future implementations
                                        (0061) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0062) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0063) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0064) ;    functions.
                                        (0065) ;
                                        (0066)  SAR6_wind_Start:
                                        (0067) _SAR6_wind_Start:
                                        (0068)     ;; Initialization-time only code goes here.
                                        (0069) 
                                        (0070)  SAR6_wind_SetPower:
                                        (0071) _SAR6_wind_SetPower:
                                        (0072)     RAM_PROLOGUE RAM_USE_CLASS_2
0616: 21 03    AND   A,0x3              (0073)     and   A, bPWRMASK       ; trim to bits of interest
0618: 4F       MOV   X,SP               (0074)     mov   X, SP             ; Set stack frame pointer
0619: 08       PUSH  A                  (0075)     push  A
                                        (0076) 
                                        (0077)     ;; read CR3 register, modify power bits & write back
061A: 5D 83    MOV   A,REG[0x83]        (0078)     mov   A, reg[SAR6_wind_CR3]
061C: 21 FC    AND   A,0xFC             (0079)     and   A, ~bPWRMASK      ; clear old setting
061E: 2B 00    OR    A,[X+0]            (0080)     or    A, [X]            ; set power in register image
0620: 60 83    MOV   REG[0x83],A        (0081)     mov   reg[SAR6_wind_CR3], A
0622: 18       POP   A                  (0082)     pop   A
                                        (0083)     RAM_EPILOGUE RAM_USE_CLASS_2
0623: 7F       RET                      (0084)     ret
                                        (0085) .ENDSECTION
                                        (0086) 
                                        (0087) .SECTION
                                        (0088) ;-----------------------------------------------------------------------------
                                        (0089) ;  FUNCTION NAME: SAR6_wind_cGetSample
                                        (0090) ;
                                        (0091) ;  DESCRIPTION:
                                        (0092) ;    Utilize SAR acceleration hardware to guide a binary search
                                        (0093) ;    until the output of the 6-bit DAC output is within 1 bit of the
                                        (0094) ;    input voltage.
                                        (0095) ;
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;
                                        (0100) ;  RETURNS:
                                        (0101) ;    A   2's Complement Value in [-32..+31]
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110) PSOC_ANALOG_COL_MASK:  equ 0Ch ; mask for column bits in analog reg address
                                        (0111) PSOC_SAR_CTRL:         equ 68h ;
                                        (0112) PSOC_SAR_MAGNITUDE:    equ 1Fh ;
                                        (0113) PSOC_SAR_SIGN:         equ 20h ;
                                        (0114) 
                                        (0115)  SAR6_wind_cGetSample:
                                        (0116) _SAR6_wind_cGetSample:
                                        (0117)  SAR6_wind_GetSample:  ; WARNING, this label will be removed in a future release.
                                        (0118) _SAR6_wind_GetSample:  ; WARNING, this label will be removed in a future release.
                                        (0119)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0120) 
                                        (0121)     ; These three lines of code are VERY important to ensure proper SAR6 operation.
                                        (0122)     ; 1) The first line will make sure the CPU is stalled when a value is written
                                        (0123)     ;    to the analog switch cap register.
                                        (0124)     ; 2) Write the inital value to CR0
                                        (0125)     ; 3) Setup the Analog Synchronization Control Register so that the next
                                        (0126)     ;    six "or" commands work with the SAR hardware to perform a conversion.
                                        (0127) 
0624: 62 65 01 MOV   REG[0x65],0x1      (0128)     mov  reg[ASY_CR],ASY_CR_SYNCEN
0627: 62 80 A0 MOV   REG[0x80],0xA0     (0129)     mov  reg[SAR6_wind_CR0], SAR6_wind_CR0_INIT
062A: 62 65 68 MOV   REG[0x65],0x68     (0130)     mov  reg[ASY_CR], PSOC_SAR_CTRL | SAR6_wind_SCCOL_MASK
                                        (0131) 
                                        (0132) 
                                        (0133)     ;; Drive the binary search engine with read/modify/write instructions.
                                        (0134)     ;; NOTE: each of the next 6 instructions stalls the CPU consuming one
                                        (0135)     ;; complete analog column clock cycle (input clock divided by 4).
062D: 43 80 00 OR    REG[0x80],0x0      (0136)     or   reg[SAR6_wind_CR0], 0   ; set sign & try MSB of magnitude
0630: 43 80 00 OR    REG[0x80],0x0      (0137)     or   reg[SAR6_wind_CR0], 0   ; set MSB of magnitude and try next lower
0633: 43 80 00 OR    REG[0x80],0x0      (0138)     or   reg[SAR6_wind_CR0], 0   ;                      ... and next ...
0636: 43 80 00 OR    REG[0x80],0x0      (0139)     or   reg[SAR6_wind_CR0], 0   ;                      ... and next ...
0639: 43 80 00 OR    REG[0x80],0x0      (0140)     or   reg[SAR6_wind_CR0], 0   ;                      ... and try LSB
063C: 43 80 00 OR    REG[0x80],0x0      (0141)     or   reg[SAR6_wind_CR0], 0   ; and, finally, set LSB of magnitude.
                                        (0142) 
                                        (0143)     ;; Conversion is done, translate the result to 1-byte 2's complement form.
                                        (0144)     ;; Negative and positive values are handled differently. To minimize
                                        (0145)     ;; aperature jitter, the execution cycles consumed in each case have been
                                        (0146)     ;; equalized. The cost of this is 13 cycles for positive values; 5 cycles
                                        (0147)     ;; for negative values.
063F: 5D 80    MOV   A,REG[0x80]        (0148)     mov  A, reg[SAR6_wind_CR0]
0641: 21 1F    AND   A,0x1F             (0149)     and  A, PSOC_SAR_MAGNITUDE
0643: 49 80 20 TST   REG[0x80],0x20     (0150)     tst  reg[SAR6_wind_CR0], PSOC_SAR_SIGN
0646: B0 03    JNZ   0x064A             (0151)     jnz  GSNegative  ; Result is zero => sign was 1 (negative).
0648: 40       NOP                      (0152)     nop              ; Delay to equalize number of required cycles.
                                        (0153)     RAM_EPILOGUE RAM_USE_CLASS_1
0649: 7F       RET                      (0154)     ret
                                        (0155) GSNegative:
064A: 73       CPL   A                  (0156)     cpl  A           ; Take 1's complement of the magnitude
                                        (0157)     RAM_EPILOGUE RAM_USE_CLASS_1
064B: 7F       RET                      (0158)     ret
                                        (0159) .ENDSECTION
                                        (0160) 
                                        (0161) .SECTION
                                        (0162) ;-----------------------------------------------------------------------------
                                        (0163) ;  FUNCTION NAME: SAR6_wind_Stop
                                        (0164) ;
                                        (0165) ;  DESCRIPTION:
                                        (0166) ;    Removes power from the switch cap block
                                        (0167) ;
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) ;  ARGUMENTS:  None
                                        (0171) ;
                                        (0172) ;  RETURNS: NA
                                        (0173) ;
                                        (0174) ;  SIDE EFFECTS:
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  SAR6_wind_Stop:
                                        (0182) _SAR6_wind_Stop:
                                        (0183)     RAM_PROLOGUE RAM_USE_CLASS_1
064C: 41 83 FC AND   REG[0x83],0xFC     (0184)     and reg[SAR6_wind_CR3], ~bPWRMASK
                                        (0185)     RAM_EPILOGUE RAM_USE_CLASS_1
064F: 7F       RET                      (0186)     ret
                                        (0187) .ENDSECTION
                                        (0188) 
                                        (0189) ; End of File SAR6_wind.asm
FILE: lib\sar6_sun.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SAR6_sun.asm
                                        (0004) ;;  Version: 1.5, Updated on 2012/3/2 at 9:15:12
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SAR6 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "SAR6_sun.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  SAR6_sun_Start
                                        (0021) export _SAR6_sun_Start
                                        (0022) export  SAR6_sun_SetPower
                                        (0023) export _SAR6_sun_SetPower
                                        (0024) export  SAR6_sun_cGetSample
                                        (0025) export _SAR6_sun_cGetSample
                                        (0026) export  SAR6_sun_Stop
                                        (0027) export _SAR6_sun_Stop
                                        (0028) 
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ; WARNING! These exports will be removed in
                                        (0032) ; a future release.
                                        (0033) ;-----------------------------------------------
                                        (0034) export  SAR6_sun_GetSample
                                        (0035) export _SAR6_sun_GetSample
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;-----------------------------------------------
                                        (0040) bPWRMASK:  equ 03h              ; Power bitfield in Switched Cap CR3 reg
                                        (0041) 
                                        (0042) AREA UserModules (ROM, REL)
                                        (0043) 
                                        (0044) .SECTION
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: SAR6_sun_Start
                                        (0047) ;  FUNCTION NAME: SAR6_sun_SetPower
                                        (0048) ;
                                        (0049) ;  DESCRIPTION:
                                        (0050) ;     Applies power setting to the module's SoCblocs
                                        (0051) ;
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;
                                        (0054) ;  ARGUMENTS:
                                        (0055) ;    A   contains the power setting 0=Off, 1=Low, 2=Med, 3=High
                                        (0056) ;
                                        (0057) ;  RETURNS:  NA
                                        (0058) ;
                                        (0059) ;  SIDE EFFECTS:
                                        (0060) ;    The A and X registers may be modified by this or future implementations
                                        (0061) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0062) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0063) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0064) ;    functions.
                                        (0065) ;
                                        (0066)  SAR6_sun_Start:
                                        (0067) _SAR6_sun_Start:
                                        (0068)     ;; Initialization-time only code goes here.
                                        (0069) 
                                        (0070)  SAR6_sun_SetPower:
                                        (0071) _SAR6_sun_SetPower:
                                        (0072)     RAM_PROLOGUE RAM_USE_CLASS_2
0650: 21 03    AND   A,0x3              (0073)     and   A, bPWRMASK       ; trim to bits of interest
0652: 4F       MOV   X,SP               (0074)     mov   X, SP             ; Set stack frame pointer
0653: 08       PUSH  A                  (0075)     push  A
                                        (0076) 
                                        (0077)     ;; read CR3 register, modify power bits & write back
0654: 5D 87    MOV   A,REG[0x87]        (0078)     mov   A, reg[SAR6_sun_CR3]
0656: 21 FC    AND   A,0xFC             (0079)     and   A, ~bPWRMASK      ; clear old setting
0658: 2B 00    OR    A,[X+0]            (0080)     or    A, [X]            ; set power in register image
065A: 60 87    MOV   REG[0x87],A        (0081)     mov   reg[SAR6_sun_CR3], A
065C: 18       POP   A                  (0082)     pop   A
                                        (0083)     RAM_EPILOGUE RAM_USE_CLASS_2
065D: 7F       RET                      (0084)     ret
                                        (0085) .ENDSECTION
                                        (0086) 
                                        (0087) .SECTION
                                        (0088) ;-----------------------------------------------------------------------------
                                        (0089) ;  FUNCTION NAME: SAR6_sun_cGetSample
                                        (0090) ;
                                        (0091) ;  DESCRIPTION:
                                        (0092) ;    Utilize SAR acceleration hardware to guide a binary search
                                        (0093) ;    until the output of the 6-bit DAC output is within 1 bit of the
                                        (0094) ;    input voltage.
                                        (0095) ;
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;
                                        (0100) ;  RETURNS:
                                        (0101) ;    A   2's Complement Value in [-32..+31]
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110) PSOC_ANALOG_COL_MASK:  equ 0Ch ; mask for column bits in analog reg address
                                        (0111) PSOC_SAR_CTRL:         equ 68h ;
                                        (0112) PSOC_SAR_MAGNITUDE:    equ 1Fh ;
                                        (0113) PSOC_SAR_SIGN:         equ 20h ;
                                        (0114) 
                                        (0115)  SAR6_sun_cGetSample:
                                        (0116) _SAR6_sun_cGetSample:
                                        (0117)  SAR6_sun_GetSample:  ; WARNING, this label will be removed in a future release.
                                        (0118) _SAR6_sun_GetSample:  ; WARNING, this label will be removed in a future release.
                                        (0119)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0120) 
                                        (0121)     ; These three lines of code are VERY important to ensure proper SAR6 operation.
                                        (0122)     ; 1) The first line will make sure the CPU is stalled when a value is written
                                        (0123)     ;    to the analog switch cap register.
                                        (0124)     ; 2) Write the inital value to CR0
                                        (0125)     ; 3) Setup the Analog Synchronization Control Register so that the next
                                        (0126)     ;    six "or" commands work with the SAR hardware to perform a conversion.
                                        (0127) 
065E: 62 65 01 MOV   REG[0x65],0x1      (0128)     mov  reg[ASY_CR],ASY_CR_SYNCEN
0661: 62 84 A0 MOV   REG[0x84],0xA0     (0129)     mov  reg[SAR6_sun_CR0], SAR6_sun_CR0_INIT
0664: 62 65 6A MOV   REG[0x65],0x6A     (0130)     mov  reg[ASY_CR], PSOC_SAR_CTRL | SAR6_sun_SCCOL_MASK
                                        (0131) 
                                        (0132) 
                                        (0133)     ;; Drive the binary search engine with read/modify/write instructions.
                                        (0134)     ;; NOTE: each of the next 6 instructions stalls the CPU consuming one
                                        (0135)     ;; complete analog column clock cycle (input clock divided by 4).
0667: 43 84 00 OR    REG[0x84],0x0      (0136)     or   reg[SAR6_sun_CR0], 0   ; set sign & try MSB of magnitude
066A: 43 84 00 OR    REG[0x84],0x0      (0137)     or   reg[SAR6_sun_CR0], 0   ; set MSB of magnitude and try next lower
066D: 43 84 00 OR    REG[0x84],0x0      (0138)     or   reg[SAR6_sun_CR0], 0   ;                      ... and next ...
0670: 43 84 00 OR    REG[0x84],0x0      (0139)     or   reg[SAR6_sun_CR0], 0   ;                      ... and next ...
0673: 43 84 00 OR    REG[0x84],0x0      (0140)     or   reg[SAR6_sun_CR0], 0   ;                      ... and try LSB
0676: 43 84 00 OR    REG[0x84],0x0      (0141)     or   reg[SAR6_sun_CR0], 0   ; and, finally, set LSB of magnitude.
                                        (0142) 
                                        (0143)     ;; Conversion is done, translate the result to 1-byte 2's complement form.
                                        (0144)     ;; Negative and positive values are handled differently. To minimize
                                        (0145)     ;; aperature jitter, the execution cycles consumed in each case have been
                                        (0146)     ;; equalized. The cost of this is 13 cycles for positive values; 5 cycles
                                        (0147)     ;; for negative values.
0679: 5D 84    MOV   A,REG[0x84]        (0148)     mov  A, reg[SAR6_sun_CR0]
067B: 21 1F    AND   A,0x1F             (0149)     and  A, PSOC_SAR_MAGNITUDE
067D: 49 84 20 TST   REG[0x84],0x20     (0150)     tst  reg[SAR6_sun_CR0], PSOC_SAR_SIGN
0680: B0 03    JNZ   0x0684             (0151)     jnz  GSNegative  ; Result is zero => sign was 1 (negative).
0682: 40       NOP                      (0152)     nop              ; Delay to equalize number of required cycles.
                                        (0153)     RAM_EPILOGUE RAM_USE_CLASS_1
0683: 7F       RET                      (0154)     ret
                                        (0155) GSNegative:
0684: 73       CPL   A                  (0156)     cpl  A           ; Take 1's complement of the magnitude
                                        (0157)     RAM_EPILOGUE RAM_USE_CLASS_1
0685: 7F       RET                      (0158)     ret
                                        (0159) .ENDSECTION
                                        (0160) 
                                        (0161) .SECTION
                                        (0162) ;-----------------------------------------------------------------------------
                                        (0163) ;  FUNCTION NAME: SAR6_sun_Stop
                                        (0164) ;
                                        (0165) ;  DESCRIPTION:
                                        (0166) ;    Removes power from the switch cap block
                                        (0167) ;
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) ;  ARGUMENTS:  None
                                        (0171) ;
                                        (0172) ;  RETURNS: NA
                                        (0173) ;
                                        (0174) ;  SIDE EFFECTS:
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  SAR6_sun_Stop:
                                        (0182) _SAR6_sun_Stop:
                                        (0183)     RAM_PROLOGUE RAM_USE_CLASS_1
0686: 41 87 FC AND   REG[0x87],0xFC     (0184)     and reg[SAR6_sun_CR3], ~bPWRMASK
                                        (0185)     RAM_EPILOGUE RAM_USE_CLASS_1
0689: 7F       RET                      (0186)     ret
                                        (0187) .ENDSECTION
                                        (0188) 
                                        (0189) ; End of File SAR6_sun.asm
FILE: lib\pga_wind.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_wind.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2012/3/2 at 9:15:6
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_wind.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_wind_Start
                                        (0060) export _PGA_wind_Start
                                        (0061) export  PGA_wind_SetPower
                                        (0062) export _PGA_wind_SetPower
                                        (0063) 
                                        (0064) export  PGA_wind_SetGain
                                        (0065) export _PGA_wind_SetGain
                                        (0066) 
                                        (0067) export  PGA_wind_Stop
                                        (0068) export _PGA_wind_Stop
                                        (0069) 
                                        (0070) IF (PGA_wind_AGNDBUFAPI)
                                        (0071) export  PGA_wind_EnableAGNDBuffer
                                        (0072) export _PGA_wind_EnableAGNDBuffer
                                        (0073) export  PGA_wind_DisableAGNDBuffer
                                        (0074) export _PGA_wind_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_wind_Start
                                        (0092) ;  FUNCTION NAME: PGA_wind_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_wind_Start:
                                        (0111) _PGA_wind_Start:
                                        (0112)  PGA_wind_SetPower:
                                        (0113) _PGA_wind_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
068A: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
068C: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
068D: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
068E: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_wind_GAIN_CR2]                          ; read power value
0690: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0692: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0694: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_wind_GAIN_CR2], A                     ; move complete value back to register
0696: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0697: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_wind_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_wind_SetGain:
                                        (0154) _PGA_wind_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0698: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
069A: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
069B: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
069C: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_wind_GAIN_CR0]                          ; read mux settings
069E: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
06A0: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
06A3: B0 0A    JNZ   0x06AE             (0164)    jnz  .SETHIGHGAIN
06A5: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_wind_GAIN_CR3],~EXGAIN                     ; Clear High Gain bit.
06A8: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
06AA: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_wind_GAIN_CR0], A                          ; move complete value back to register
06AC: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
06AD: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
06AE: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
06B1: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
06B3: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_wind_GAIN_CR0], A                          ; move complete value back to register
06B5: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_wind_GAIN_CR3], EXGAIN                     ; Set High Gain bit.
06B8: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
06B9: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_wind_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_wind_Stop:
                                        (0203) _PGA_wind_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
06BA: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_wind_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
06BD: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_wind_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_wind_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_wind_EnableAGNDBuffer:
                                        (0233) _PGA_wind_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_wind_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_wind_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_wind_DisableAGNDBuffer:
                                        (0261) _PGA_wind_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_wind_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_wind.asm
FILE: lib\pga_sun.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_sun.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2012/3/2 at 9:15:6
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_sun.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_sun_Start
                                        (0060) export _PGA_sun_Start
                                        (0061) export  PGA_sun_SetPower
                                        (0062) export _PGA_sun_SetPower
                                        (0063) 
                                        (0064) export  PGA_sun_SetGain
                                        (0065) export _PGA_sun_SetGain
                                        (0066) 
                                        (0067) export  PGA_sun_Stop
                                        (0068) export _PGA_sun_Stop
                                        (0069) 
                                        (0070) IF (PGA_sun_AGNDBUFAPI)
                                        (0071) export  PGA_sun_EnableAGNDBuffer
                                        (0072) export _PGA_sun_EnableAGNDBuffer
                                        (0073) export  PGA_sun_DisableAGNDBuffer
                                        (0074) export _PGA_sun_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_sun_Start
                                        (0092) ;  FUNCTION NAME: PGA_sun_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_sun_Start:
                                        (0111) _PGA_sun_Start:
                                        (0112)  PGA_sun_SetPower:
                                        (0113) _PGA_sun_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
06BE: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
06C0: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
06C1: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
06C2: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[PGA_sun_GAIN_CR2]                           ; read power value
06C4: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
06C6: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
06C8: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[PGA_sun_GAIN_CR2], A                      ; move complete value back to register
06CA: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
06CB: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_sun_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_sun_SetGain:
                                        (0154) _PGA_sun_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
06CC: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
06CE: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
06CF: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
06D0: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[PGA_sun_GAIN_CR0]                           ; read mux settings
06D2: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
06D4: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
06D7: B0 0A    JNZ   0x06E2             (0164)    jnz  .SETHIGHGAIN
06D9: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[PGA_sun_GAIN_CR3],~EXGAIN                      ; Clear High Gain bit.
06DC: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
06DE: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[PGA_sun_GAIN_CR0], A                           ; move complete value back to register
06E0: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
06E1: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
06E2: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
06E5: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
06E7: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[PGA_sun_GAIN_CR0], A                           ; move complete value back to register
06E9: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[PGA_sun_GAIN_CR3], EXGAIN                      ; Set High Gain bit.
06EC: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
06ED: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_sun_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_sun_Stop:
                                        (0203) _PGA_sun_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
06EE: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[PGA_sun_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
06F1: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_sun_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_sun_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_sun_EnableAGNDBuffer:
                                        (0233) _PGA_sun_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_sun_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_sun_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_sun_DisableAGNDBuffer:
                                        (0261) _PGA_sun_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_sun_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_sun.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2012/3/2 at 9:14:48
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
06F2: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
06F3: 10       PUSH  X                  (0209)     push  X
06F4: 28       ROMX                     (0210)     romx                               ; Get character from ROM
06F5: B0 04    JNZ   0x06FA             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
06F7: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
06F8: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
06F9: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
06FA: 90 3C    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
06FC: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
06FD: 18       POP   A                  (0220)     pop   A
06FE: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
06FF: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0701: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0702: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0714: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0715: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0716: 67       ASR   A                  (0262)     asr   A
0717: 67       ASR   A                  (0263)     asr   A
0718: 67       ASR   A                  (0264)     asr   A
0719: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
071B: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
071D: 90 19    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
071F: 18       POP   A                  (0268)     pop   A                            ; Restore value
0720: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0722: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0724: 90 12    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0726: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0727: 4B       SWAP  A,X                (0305)     swap  A,X
0728: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
072A: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
072B: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
072D: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
072E: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0730: A0 06    JZ    0x0737             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0732: 90 04    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
0734: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0735: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0737: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0738: 90 5F    CALL  0x0799             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
073A: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
073B: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
073C: 67       ASR   A                  (0390)     asr   A
073D: 67       ASR   A                  (0391)     asr   A
073E: 67       ASR   A                  (0392)     asr   A
073F: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0741: 90 38    CALL  0x077B             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0743: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0744: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0746: 40       NOP                      (0397)     nop
0747: 40       NOP                      (0398)     nop
0748: 40       NOP                      (0399)     nop
0749: 90 30    CALL  0x077B             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
074B: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
074C: 90 4B    CALL  0x0799             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
074E: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
074F: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0750: 67       ASR   A                  (0436)     asr   A
0751: 67       ASR   A                  (0437)     asr   A
0752: 67       ASR   A                  (0438)     asr   A
0753: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0755: 90 09    CALL  0x0760             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0757: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0758: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
075A: 40       NOP                      (0443)     nop
075B: 40       NOP                      (0444)     nop
075C: 40       NOP                      (0445)     nop
075D: 90 01    CALL  0x0760             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
075F: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0760: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0761: 26 11 80 AND   [0x11],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0764: 51 11    MOV   A,[0x11]           (0480)     mov   A,[Port_2_Data_SHADE]
0766: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0768: 18       POP   A                  (0483)     pop   A
0769: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
076B: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
076D: 2A 11    OR    A,[0x11]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
076F: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0771: 53 11    MOV   [0x11],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0773: 40       NOP                      (0489)     nop
0774: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0776: 53 11    MOV   [0x11],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0778: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
077A: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
077B: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
077C: 26 11 80 AND   [0x11],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
077F: 2E 11 20 OR    [0x11],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0782: 51 11    MOV   A,[0x11]           (0527)     mov   A,[Port_2_Data_SHADE]
0784: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0786: 18       POP   A                  (0530)     pop   A
0787: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0789: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
078B: 2A 11    OR    A,[0x11]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
078D: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
078F: 53 11    MOV   [0x11],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0791: 40       NOP                      (0536)     NOP
0792: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0794: 53 11    MOV   [0x11],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0796: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0798: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0799: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
079A: 26 11 80 AND   [0x11],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
079D: 51 11    MOV   A,[0x11]           (0574)     mov   A,[Port_2_Data_SHADE]
079F: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
07A1: 26 14 F0 AND   [0x14],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
07A4: 51 14    MOV   A,[0x14]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
07A6: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
07A8: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
07AA: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
07AC: 2E 11 40 OR    [0x11],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
07AF: 51 11    MOV   A,[0x11]           (0584)     mov   A,[Port_2_Data_SHADE]
07B1: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
07B3: 40       NOP                      (0586)     NOP
                                        (0587) 
07B4: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
07B5: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
07B7: 2E 11 50 OR    [0x11],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
07BA: 51 11    MOV   A,[0x11]           (0593)     mov   A,[Port_2_Data_SHADE]
07BC: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
07BE: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
07BF: 40       NOP                      (0597)     nop
07C0: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
07C2: 08       PUSH  A                  (0610)     push  A
07C3: 26 11 C0 AND   [0x11],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
07C6: 51 11    MOV   A,[0x11]           (0612)     mov   A,[Port_2_Data_SHADE]
07C8: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
07CA: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
07CB: 40       NOP                      (0616)     nop                                    ; fastest PSoC
07CC: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
07CD: 2E 11 50 OR    [0x11],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
07D0: 51 11    MOV   A,[0x11]           (0620)     mov   A,[Port_2_Data_SHADE]
07D2: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
07D4: 40       NOP                      (0623)     nop
07D5: 40       NOP                      (0624)     nop
                                        (0625) 
07D6: 26 11 C0 AND   [0x11],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
07D9: 51 11    MOV   A,[0x11]           (0627)     mov   A,[Port_2_Data_SHADE]
07DB: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
07DD: 18       POP   A                  (0630)     pop   A
07DE: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
07E0: A0 04    JZ    0x07E5             (0633)     jz    .UNLOCK
07E2: 79       DEC   X                  (0634)     dec   X
07E3: BF D3    JNZ   0x07B7             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
07E5: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
07E6: 2E 14 7F OR    [0x14],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
07E9: 51 14    MOV   A,[0x14]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
07EB: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
07ED: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
07EF: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
07F1: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
07F2: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
07F3: 26 14 80 AND   [0x14],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
07F6: 2E 14 7F OR    [0x14],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
07F9: 26 15 80 AND   [0x15],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
07FC: 51 14    MOV   A,[0x14]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
07FE: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0800: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0802: 51 15    MOV   A,[0x15]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0804: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0806: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0808: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
080A: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
080C: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
080E: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0810: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0812: 9F 4C    CALL  0x0760             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0814: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0816: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0818: 50 03    MOV   A,0x3              (0707)     mov   A,03h
081A: 9F 44    CALL  0x0760             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
081C: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
081E: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0820: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0822: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0824: 9F 3A    CALL  0x0760             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0826: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0828: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
082A: 50 02    MOV   A,0x2              (0720)     mov   A,02h
082C: 9F 32    CALL  0x0760             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
082E: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0830: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0832: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0834: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
0836: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0838: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
083A: 50 01    MOV   A,0x1              (0731)     mov   A,01h
083C: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
083E: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0840: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0842: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0844: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0846: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0848: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
084A: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
084C: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
084E: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0850: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0852: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0854: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0856: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0858: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
085A: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
085C: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
085E: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0863: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0865: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0866: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0868: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0869: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
086B: 20       POP   X                  (0795)     pop   X
                                        (0796) 
086C: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
086E: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
086F: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0871: 78       DEC   A                  (0828)     dec   A
0872: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0874: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
087D: 08       PUSH  A                  (0871)     push  A
087E: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0880: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0882: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0884: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0886: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0888: D0 06    JNC   0x088F             (0877)     jnc   .Delay50u_End
088A: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
088C: 78       DEC   A                  (0880)     dec   A                              ; [4]
088D: BF FE    JNZ   0x088C             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
088F: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0890: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
0891: 10       PUSH  X                  (0943)     push  X
0892: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
0894: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
0896: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
0897: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
089A: B0 05    JNZ   0x08A0             (0950)     jnz   .LCD_CHECK1X
089C: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
089E: 80 11    JMP   0x08B0             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
08A0: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
08A3: D0 07    JNC   0x08AB             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
08A5: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
08A7: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
08A9: 80 06    JMP   0x08B0             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
08AB: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
08AD: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
08B0: 9E 86    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
08B2: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
08B4: BF E2    JNZ   0x0897             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
08B6: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
08B7: 4F       MOV   X,SP               (1015)     mov   X, SP
08B8: 10       PUSH  X                  (1016)     push  X
08B9: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
08BB: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
08BD: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
08BF: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
08C0: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
08C3: B0 05    JNZ   0x08C9             (1026)     jnz   .LCD_CHECK1
08C5: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
08C7: 80 11    JMP   0x08D9             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
08C9: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
08CC: D0 07    JNC   0x08D4             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
08CE: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
08D0: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
08D2: 80 06    JMP   0x08D9             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
08D4: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
08D6: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
08D9: 9E 5D    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
08DB: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
08DD: BF E2    JNZ   0x08C0             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
08DF: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
08E0: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
08E2: 08       PUSH  A                  (1098)     push  A
08E3: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
08E5: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
08E7: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
08E9: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
08EC: B0 05    JNZ   0x08F2             (1103)     jnz   .VBG_NZ_SEGX
08EE: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
08F0: 80 13    JMP   0x0904             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
08F2: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
08F5: D0 09    JNC   0x08FF             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
08F7: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
08F9: 78       DEC   A                  (1111)     dec   A
08FA: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
08FD: 80 06    JMP   0x0904             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
08FF: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
0902: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
0904: 9E 32    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(1120)     call  LCD_WriteData                ; Write value
0906: 18       POP   A                  (1121)     pop   A
0907: 78       DEC   A                  (1122)     dec   A
0908: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
090A: BF D7    JNZ   0x08E2             (1124)     jnz   .VBG_LOOPX
090C: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
090D: 4F       MOV   X,SP               (1168)     mov   X, SP
090E: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
0910: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
0912: 08       PUSH  A                  (1172)     push  A
0913: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
0915: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0917: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
0919: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
091C: B0 05    JNZ   0x0922             (1177)     jnz   .VBG_NZ_SEG
091E: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
0920: 80 13    JMP   0x0934             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
0922: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0925: D0 09    JNC   0x092F             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0927: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0929: 78       DEC   A                  (1185)     dec   A
092A: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
092D: 80 06    JMP   0x0934             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
092F: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0932: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0934: 9E 02    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
0936: 18       POP   A                  (1195)     pop   A
0937: 78       DEC   A                  (1196)     dec   A
0938: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
093A: BF D7    JNZ   0x0912             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
093C: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
093D: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
093E: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
093F: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
0940: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0942: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
0944: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0947: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
094A: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
094C: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
094E: D0 05    JNC   0x0954             (1251)     jnc   .VBG_SOLID
0950: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0952: 80 03    JMP   0x0956             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0954: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0956: 9D E0    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(1257)     call  LCD_WriteData                ; character data
0958: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
095A: BF EF    JNZ   0x094A             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
095C: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
095E: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0961: BF E5    JNZ   0x0947             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0963: 18       POP   A                  (1264)     pop  A
0964: 18       POP   A                  (1265)     pop  A
0965: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0967: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
0969: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0978: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0979: 38 03    ADD   SP,0x3             (1320)     add   SP,3
097B: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
097D: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
097F: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0981: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0984: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0987: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0989: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
098C: B0 05    JNZ   0x0992             (1332)     jnz   .BG_OTHER
098E: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0990: 80 03    JMP   0x0994             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0992: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0994: 9D A2    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(1338)     call  LCD_WriteData
0996: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0998: BF EE    JNZ   0x0987             (1340)     jnz   .BG_Loop2
099A: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
099C: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
099F: BF E4    JNZ   0x0984             (1343)     jnz   .BG_Loop1
                                        (1344) 
09A1: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
09A3: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
09A5: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
09A7: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\i2cm.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2Cm.asm
                                        (0004) ;;   Version: 1.4, Updated on 2012/3/2 at 9:14:44
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cm User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2Cm.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) export   I2Cm_Start
                                        (0031) export  _I2Cm_Start
                                        (0032) export   I2Cm_Stop
                                        (0033) export  _I2Cm_Stop
                                        (0034) export   I2Cm_fSendRepeatStart
                                        (0035) export  _I2Cm_fSendRepeatStart
                                        (0036) export   I2Cm_fSendStart
                                        (0037) export  _I2Cm_fSendStart
                                        (0038) export   I2Cm_SendStop
                                        (0039) export  _I2Cm_SendStop
                                        (0040) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0041) export  _I2Cm_fReadBytes
                                        (0042) export  _I2Cm_bWriteBytes
                                        (0043) export  _I2Cm_bWriteCBytes
                                        (0044) 
                                        (0045) export   I2Cm_fWrite
                                        (0046) export  _I2Cm_fWrite
                                        (0047) 
                                        (0048) export   I2Cm_bRead
                                        (0049) export  _I2Cm_bRead
                                        (0050) 
                                        (0051) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0052) 
                                        (0053) export   I2Cm_fReadBytes
                                        (0054) export   I2Cm_bWriteBytes
                                        (0055) export   I2Cm_bWriteCBytes
                                        (0056) 
                                        (0057) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0058) 
                                        (0059) ;-------------------------------------------------------------------
                                        (0060) ;  Declare the varables for both the assembler and C compiler.
                                        (0061) ;
                                        (0062) ;-------------------------------------------------------------------
                                        (0063) export  I2Cm_bStatus
                                        (0064) export _I2Cm_bStatus
                                        (0065) export  I2Cm_bData
                                        (0066) export _I2Cm_bData
                                        (0067) export  I2Cm_bAddr
                                        (0068) export _I2Cm_bAddr
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) area weather_station_RAM(RAM, REL, CON)
                                        (0074) 
                                        (0075) _I2Cm_bStatus:
                                        (0076)  I2Cm_bStatus:                         blk   1  ; Status during transfers
                                        (0077) _I2Cm_bData:
                                        (0078)  I2Cm_bData:                           blk   1  ; Data transfered
                                        (0079) _I2Cm_bXferCnt:
                                        (0080)  I2Cm_bXferCnt:                                  ; Reused variable for counting transfered
                                        (0081) _I2Cm_bAddr:                                     ; Bytes
                                        (0082)  I2Cm_bAddr:                           blk   1  ; Slave Address
                                        (0083) _I2Cm_bit_count:
                                        (0084)  I2Cm_bit_count:                       blk   1  ; Bit counter
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) ;-----------------------------------------------
                                        (0088) ;  EQUATES
                                        (0089) ;-----------------------------------------------
                                        (0090) I2Cm_SLAVE_ACKed:                      equ 0x01 ; This bit set if Slave ACKed Master
                                        (0091) I2Cm_SEND_ACK:                         equ 0x10 ; If this flag set, Master should send ACK
                                        (0092) 
                                        (0093) .SECTION
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ;  FUNCTION NAME: I2Cm_Start
                                        (0096) ;
                                        (0097) ;  DESCRIPTION:
                                        (0098) ;
                                        (0099) ;-----------------------------------------------------------------------------
                                        (0100) ;
                                        (0101) ;  ARGUMENTS: none
                                        (0102) ;
                                        (0103) ;  RETURNS: none
                                        (0104) ;
                                        (0105) ;  SIDE EFFECTS:
                                        (0106) ;    The A and X registers may be modified by this or future implementations
                                        (0107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0110) ;    functions.
                                        (0111) ;          
                                        (0112) ;    Currently only the page pointer registers listed below are modified: 
                                        (0113) ;          CUR_PP
                                        (0114) ;
                                        (0115) ;    Resets all pins on the I2C master port to the pulldown drive
                                        (0116) ;
                                        (0117) ;  THEORY of OPERATION or PROCEDURE:
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120)  I2Cm_Start:
                                        (0121) _I2Cm_Start:
                                        (0122)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0123)     RAM_SETPAGE_CUR >Port_0_DriveMode_1_SHADE
                                        (0124)     ; Set pins to drive mode high Z
09A8: 2E 13 C0 OR    [0x13],0xC0        (0125)     or   [Port_0_DriveMode_1_SHADE],I2Cm_SDA_pin|I2Cm_SCL_pin
09AB: 26 12 3F AND   [0x12],0x3F        (0126)     and  [Port_0_DriveMode_0_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
09AE: 71 10    OR    F,0x10             
                                        (0127) 
                                        (0128)     M8C_SetBank1                                     ; Setup port for normal operation
09B0: 51 13    MOV   A,[0x13]           (0129)     mov  A,[Port_0_DriveMode_1_SHADE]
09B2: 60 01    MOV   REG[0x1],A         (0130)     mov  reg[I2Cm_I2CPRTDM1],A
09B4: 51 12    MOV   A,[0x12]           (0131)     mov  A,[Port_0_DriveMode_0_SHADE]
09B6: 60 00    MOV   REG[0x0],A         (0132)     mov  reg[I2Cm_I2CPRTDM0],A
09B8: 70 EF    AND   F,0xEF             
                                        (0133)     M8C_SetBank0
                                        (0134)                                                      ; Set both pins, low so that only the port
                                        (0135)                                                      ; mode has to be changed from a 0 to a 1
09BA: 26 10 3F AND   [0x10],0x3F        (0136)     and  [Port_0_Data_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
09BD: 51 10    MOV   A,[0x10]           (0137)     mov  A,[Port_0_Data_SHADE]
09BF: 60 00    MOV   REG[0x0],A         (0138)     mov  reg[I2Cm_I2CPRTDR],A
                                        (0139)     RAM_EPILOGUE RAM_USE_CLASS_4
09C1: 7F       RET                      (0140)     ret
                                        (0141) .ENDSECTION
                                        (0142) 
                                        (0143) .SECTION
                                        (0144) ;-----------------------------------------------------------------------------
                                        (0145) ;  FUNCTION NAME: I2Cm_Stop
                                        (0146) ;
                                        (0147) ;  DESCRIPTION:
                                        (0148) ;    This function performs no operation and is used for future
                                        (0149) ;    module compatibility.
                                        (0150) ;
                                        (0151) ;-----------------------------------------------------------------------------
                                        (0152) ;
                                        (0153) ;  ARGUMENTS: none
                                        (0154) ;
                                        (0155) ;  RETURNS: none
                                        (0156) ;
                                        (0157) ;  SIDE EFFECTS:
                                        (0158) ;    The A and X registers may be modified by this or future implementations
                                        (0159) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0160) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0161) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0162) ;    functions.
                                        (0163) ;          
                                        (0164)  I2Cm_Stop:
                                        (0165) _I2Cm_Stop:
                                        (0166)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0167)     RAM_EPILOGUE RAM_USE_CLASS_1
09C2: 7F       RET                      (0168)     ret
                                        (0169) .ENDSECTION
                                        (0170) 
                                        (0171) .SECTION
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0174) ;
                                        (0175) ;  DESCRIPTION:
                                        (0176) ;
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:
                                        (0180) ;  [SP-3]=> Address of slave
                                        (0181) ;  [SP-4]=> LSB of Array address to put data in.
                                        (0182) ;  [SP-5]=> MSB of Array address to put data in.
                                        (0183) ;  [SP-6]=> Count of bytes to read.
                                        (0184) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0185) ;           to determine if:
                                        (0186) ;             0x01 => Use RepeatStart instead of Start
                                        (0187) ;             0x02 => Don't send Stop
                                        (0188) ;
                                        (0189) ;  RETURNS:
                                        (0190) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0191) ;
                                        (0192) ;  SIDE EFFECTS:
                                        (0193) ;    The A and X registers may be modified by this or future implementations
                                        (0194) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0195) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0196) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0197) ;    functions.
                                        (0198) ;          
                                        (0199) ;    Currently only the page pointer registers listed below are modified: 
                                        (0200) ;          CUR_PP
                                        (0201) ;		   IDX_PP
                                        (0202) ;
                                        (0203) SlaveAdr:     equ  -3
                                        (0204) RxArrayLSB:   equ  -4
                                        (0205) RxArrayMSB:   equ  -5
                                        (0206) RxByteCount:  equ  -6
                                        (0207) RxMode:       equ  -7
                                        (0208) 
                                        (0209) _I2Cm_fReadBytes:
                                        (0210)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0211)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0212)     RAM_SETPAGE_IDX2STK
                                        (0213)     RAM_SETPAGE_CUR >I2Cm_bStatus
09C3: 4F       MOV   X,SP               (0214)     mov   X, SP
                                        (0215)     
09C4: 52 FD    MOV   A,[X-3]            (0216)     mov   A, [X+SlaveAdr]
09C6: 64       ASL   A                  (0217)     asl   A                                                ; Shift address to the left to make
                                        (0218)                                                            ; a complete byte with the R/W bit.
09C7: 29 01    OR    A,0x1              (0219)     or    A,0x01                                           ; OR the address with the Read bit.
09C9: 55 31 00 MOV   [0x31],0x0         (0220)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
09CC: 48 F9 01 TST   [X-7],0x1          (0221)     tst   [x+RxMode],I2Cm_RepStart
09CF: B0 05    JNZ   0x09D5             (0222)     jnz   DoRestartRx
09D1: 91 AE    CALL  0x0B81             (0223)     call  I2C_DoStart                                      ; Send a start and address.
09D3: 80 03    JMP   0x09D7             (0224)     jmp   CheckRxAck
                                        (0225) DoRestartRx:
09D5: 91 77    CALL  0x0B4E             (0226)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0227) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0228)     RAM_SETPAGE_CUR >I2Cm_bStatus
09D7: 47 31 01 TST   [0x31],0x1         (0229)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
09DA: A0 20    JZ    0x09FB             (0230)     jz    End_RD_Loop
                                        (0231)                                                            ; Send ACK until last byte
09DC: 2E 31 10 OR    [0x31],0x10        (0232)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0233) RD_Loop:                                                   ; Loop through bytes
09DF: 10       PUSH  X                  (0234)     push  x                                                ; Save X for later
09E0: 7B FA    DEC   [X-6]              (0235)     dec   [x+RxByteCount]                                  ; Decrement data counter
09E2: B0 04    JNZ   0x09E7             (0236)     jnz   I2C_READ
09E4: 26 31 EF AND   [0x31],0xEF        (0237)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0238) I2C_READ:
09E7: 92 49    CALL  0x0C32             (0239)     call  I2Cm_read                                        ; Read a byte
                                        (0240)     RAM_SETPAGE_CUR >I2Cm_bStatus
09E9: 20       POP   X                  (0241)     pop   x                                                ; Restore x
09EA: 10       PUSH  X                  (0242)     push  x
09EB: 52 FC    MOV   A,[X-4]            (0243)     mov   a,[x+RxArrayLSB]                                 ; Get pointer to data and put it in X
09ED: 08       PUSH  A                  (0244)     push  a                                                ; push the index pointer onto the stack (will be popped to x) 
                                        (0245) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0246)     mov   A,[x+RxArrayMSB]
                                        (0247)     RAM_SETPAGE_IDX A
                                        (0248) ENDIF
09EE: 20       POP   X                  (0249)     pop   x                                                ; restores the index pointer pushed a few lines above
09EF: 51 32    MOV   A,[0x32]           (0250)     mov   a,[I2Cm_bData]                                   ; Save data in data array
09F1: 54 00    MOV   [X+0],A            (0251)     mov   [x],a                                            ; Put read data in array
09F3: 20       POP   X                  (0252)     pop   x                                                ; Restore the original pointer (for the subrtn params)
                                        (0253)     RAM_SETPAGE_IDX2STK					   ; Set Index Page to Stack Page
09F4: 77 FC    INC   [X-4]              (0254)     inc   [x+RxArrayLSB]                                   ; Advance data pointer
09F6: 48 FA FF TST   [X-6],0xFF         (0255)     tst   [x+RxByteCount],FFh                              ; Decrement data counter
09F9: BF E5    JNZ   0x09DF             (0256)     jnz   RD_Loop                                          ; Not finished, do another byte.
                                        (0257) End_RD_Loop:                                               ; Endloop
09FB: 48 F9 02 TST   [X-7],0x2          (0258)     tst   [x+RxMode],I2Cm_NoStop
09FE: B0 03    JNZ   0x0A02             (0259)     jnz   SkipRxStop
0A00: 92 B6    CALL  _I2Cm_SendStop     (0260)     call  I2Cm_SendStop
                                        (0261) SkipRxStop:
                                        (0262)     RAM_SETPAGE_CUR >I2Cm_bStatus
0A02: 50 00    MOV   A,0x0              (0263)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
0A04: 47 31 01 TST   [0x31],0x1         (0264)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
0A07: A0 03    JZ    0x0A0B             (0265)     jz    End_ReadBytes
0A09: 50 01    MOV   A,0x1              (0266)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
                                        (0267) End_ReadBytes:
                                        (0268)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0269)     RAM_EPILOGUE RAM_USE_CLASS_4
0A0B: 7F       RET                      (0270)     ret
                                        (0271) .ENDSECTION
                                        (0272) 
                                        (0273) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS:
                                        (0283) ;      A => Address of slave
                                        (0284) ;      X => Pointer to other arguments.
                                        (0285) ;    [x] => LSB of Array address to put data in.
                                        (0286) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (0287) ;  [X-2] => Count of bytes to read.
                                        (0288) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (0289) ;           to determine if:
                                        (0290) ;             0x01 => Use RepeatStart instead of Start
                                        (0291) ;             0x02 => Don't send Stop
                                        (0292) ;
                                        (0293) ;  RETURNS:
                                        (0294) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0295) ;
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;    The A and X registers may be modified by this or future implementations
                                        (0298) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0299) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0300) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0301) ;    functions.
                                        (0302) ;          
                                        (0303) RxArray_X:      equ   0
                                        (0304) RxByteCount_X:  equ  -2
                                        (0305) RxMode_X:       equ  -3
                                        (0306) 
                                        (0307)  I2Cm_fReadBytes:		                 
0A0C: 64       ASL   A                  (0308)     asl   A                                            ; Shift address to the left to make
                                        (0309)                                                        ; a complete byte with the R/W bit.
0A0D: 29 01    OR    A,0x1              (0310)     or    A,0x01                                       ; OR the address with the Read bit.
0A0F: 55 31 00 MOV   [0x31],0x0         (0311)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
0A12: 48 FD 01 TST   [X-3],0x1          (0312)     tst   [x+RxMode_X],I2Cm_RepStart
0A15: B0 05    JNZ   0x0A1B             (0313)     jnz   DoRestartRxSmm
0A17: 91 68    CALL  0x0B81             (0314)     call  I2C_DoStart                                      ; Send a start and address.
0A19: 80 03    JMP   0x0A1D             (0315)     jmp   CheckRxAckSmm
                                        (0316) DoRestartRxSmm:
0A1B: 91 31    CALL  0x0B4E             (0317)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0318) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
0A1D: 47 31 01 TST   [0x31],0x1         (0319)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0A20: A0 1E    JZ    0x0A3F             (0320)     jz    End_RD_LoopSmm
                                        (0321)                                                            ; Send ACK until last byte
0A22: 2E 31 10 OR    [0x31],0x10        (0322)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0323) RD_LoopSmm:                                                   ; Loop through bytes
0A25: 10       PUSH  X                  (0324)     push  x                                                ; Save X for later
0A26: 7B FE    DEC   [X-2]              (0325)     dec   [x+RxByteCount_X]                                ; Decrement data counter
0A28: B0 04    JNZ   0x0A2D             (0326)     jnz   I2C_READSmm
0A2A: 26 31 EF AND   [0x31],0xEF        (0327)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0328) I2C_READSmm:
0A2D: 92 03    CALL  0x0C32             (0329)     call  I2Cm_read                                        ; Read a byte
0A2F: 20       POP   X                  (0330)     pop   x                                                ; Restore x
0A30: 10       PUSH  X                  (0331)     push  x                                                ; Store x
0A31: 59 00    MOV   X,[X+0]            (0332)     mov   x,[x+RxArray_X]                                  ; Get pointer to data and put it in X
0A33: 51 32    MOV   A,[0x32]           (0333)     mov   a,[I2Cm_bData]                                   ; Save data in data array
0A35: 54 00    MOV   [X+0],A            (0334)     mov   [x+RxArray_X],a                                  ; Put read data in array
0A37: 20       POP   X                  (0335)     pop   x                                                ; Restore the original pointer
0A38: 77 00    INC   [X+0]              (0336)     inc   [x+RxArray_X]                                    ; Advance data pointer
0A3A: 48 FE FF TST   [X-2],0xFF         (0337)     tst   [x+RxByteCount_X],FFh                            ; Decrement data counter
0A3D: BF E7    JNZ   0x0A25             (0338)     jnz   RD_LoopSmm                                       ; Not finished, do another byte.
                                        (0339) End_RD_LoopSmm:                                            ; Endloop
0A3F: 48 FD 02 TST   [X-3],0x2          (0340)     tst   [x+RxMode_X],I2Cm_NoStop
0A42: B0 03    JNZ   0x0A46             (0341)     jnz   SkipRxStopSmm
0A44: 92 72    CALL  _I2Cm_SendStop     (0342)     call  I2Cm_SendStop
                                        (0343) SkipRxStopSmm:
0A46: 50 00    MOV   A,0x0              (0344)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
0A48: 47 31 01 TST   [0x31],0x1         (0345)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
0A4B: A0 03    JZ    0x0A4F             (0346)     jz    End_ReadBytesSmm
0A4D: 50 01    MOV   A,0x1              (0347)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
                                        (0348) End_ReadBytesSmm:
0A4F: 7F       RET                      (0349)     ret
                                        (0350) .ENDSECTION
                                        (0351) ENDIF
                                        (0352) 
                                        (0353) .SECTION
                                        (0354) ;-----------------------------------------------------------------------------
                                        (0355) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0356) ;
                                        (0357) ;  DESCRIPTION:
                                        (0358) ;    Write multiple data bits to slave device.
                                        (0359) ;
                                        (0360) ;-----------------------------------------------------------------------------
                                        (0361) ;
                                        (0362) ;  ARGUMENTS:
                                        (0363) ; [SP-3] => Address of slave
                                        (0364) ; [SP-4] => LSB of Array address to put data in.
                                        (0365) ; [SP-5] => MSB of Array address to put data in.
                                        (0366) ; [SP-6] => Count of bytes to write.
                                        (0367) ; [SP-7] => Mode flags that allow the programmer to set flags
                                        (0368) ;           to determine if:
                                        (0369) ;              0x01 => Use RePeatStart instead of Start
                                        (0370) ;              0x02 => Don't send Stop
                                        (0371) ;
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0375) ;
                                        (0376) ;  SIDE EFFECTS:
                                        (0377) ;    The A and X registers may be modified by this or future implementations
                                        (0378) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0379) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0380) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0381) ;    functions.
                                        (0382) ;          
                                        (0383) ;    Currently only the page pointer registers listed below are modified: 
                                        (0384) ;          CUR_PP
                                        (0385) ;		   IDX_PP
                                        (0386) ;
                                        (0387) TxSlaveAdr:   equ  -3
                                        (0388) TxArrayLSB:   equ  -4
                                        (0389) TxArrayMSB:   equ  -5
                                        (0390) TxByteCount:  equ  -6
                                        (0391) TxMode:       equ  -7
                                        (0392) 
                                        (0393) _I2Cm_bWriteBytes:
                                        (0394)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0395)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0396)     RAM_SETPAGE_IDX2STK
                                        (0397)     RAM_SETPAGE_CUR >I2Cm_bStatus
0A50: 4F       MOV   X,SP               (0398)     mov   X, SP
                                        (0399)     
0A51: 52 FD    MOV   A,[X-3]            (0400)     mov   A,[x+TxSlaveAdr]
0A53: 64       ASL   A                  (0401)     asl   A                                           ; Shift address to the left to make
                                        (0402)                                                       ; a complete byte with the R/W bit.
                                        (0403)                                                       ; The ASL takes care of clearing bit 0.
0A54: 55 31 00 MOV   [0x31],0x0         (0404)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0405) 
                                        (0406) 
0A57: 48 F9 01 TST   [X-7],0x1          (0407)     tst   [x+TxMode],I2Cm_RepStart
0A5A: B0 05    JNZ   0x0A60             (0408)     jnz   DoRestartTx
0A5C: 91 23    CALL  0x0B81             (0409)     call  I2C_DoStart                                 ; Send a start and address.
0A5E: 80 03    JMP   0x0A62             (0410)     jmp   DoTxAck
                                        (0411) DoRestartTx:
0A60: 90 EC    CALL  0x0B4E             (0412)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0413) DoTxAck:
                                        (0414)     RAM_SETPAGE_CUR >I2Cm_bStatus
0A62: 55 33 00 MOV   [0x33],0x0         (0415)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
0A65: 47 31 01 TST   [0x31],0x1         (0416)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
0A68: A0 1A    JZ    0x0A83             (0417)     jz    End_WR_Loop
                                        (0418) WR_Loop:                                              ; Loop through bytes
                                        (0419)     RAM_SETPAGE_IDX2STK
0A6A: 10       PUSH  X                  (0420)     push  x                                           ; Save X for later
0A6B: 52 FC    MOV   A,[X-4]            (0421)     mov   a,[x+TxArrayLSB]                            ; Get pointer to data and put it in X
0A6D: 08       PUSH  A                  (0422) 	push  a                                           ; save the address on the stack (will pop it back into X)
                                        (0423) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0424)     mov   a,[x+TxArrayMSB]
                                        (0425)     RAM_SETPAGE_IDX a                                 ; Set Index Page to pointer MSB
                                        (0426) ENDIF
0A6E: 20       POP   X                  (0427)     pop   x                                           ; this recovers the address previously stoed on teh stack
0A6F: 52 00    MOV   A,[X+0]            (0428)     mov   a,[x]                                       ; Get data pointer to by X
0A71: 53 32    MOV   [0x32],A           (0429)     mov   [I2Cm_bData],a                              ; Save data in temp location
0A73: 91 36    CALL  0x0BAB             (0430)     call  I2Cm_write                                  ; Write the data
                                        (0431) 	RAM_SETPAGE_CUR >I2Cm_bStatus
                                        (0432)     RAM_SETPAGE_IDX2STK                               ; Set Index Page back to Stack Page   
0A75: 20       POP   X                  (0433)     pop   x
0A76: 47 31 01 TST   [0x31],0x1         (0434)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0A79: A0 0E    JZ    0x0A88             (0435)     jz    DoWBstop                                    ; Stop transfer if NAKed
0A7B: 76 33    INC   [0x33]             (0436)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0A7D: 77 FC    INC   [X-4]              (0437)     inc   [x+TxArrayLSB]                              ; Advance pointer
0A7F: 7B FA    DEC   [X-6]              (0438)     dec   [x+TxByteCount]                             ; Decrement byte counter
0A81: BF E8    JNZ   0x0A6A             (0439)     jnz   WR_Loop                                     ; Not finished, do another byte.
                                        (0440) End_WR_Loop:                                          ; Endloop
0A83: 48 F9 02 TST   [X-7],0x2          (0441)     tst   [x+TxMode],I2Cm_NoStop
0A86: B0 03    JNZ   0x0A8A             (0442)     jnz   SkipTxStop
                                        (0443) DoWBstop:
0A88: 92 2E    CALL  _I2Cm_SendStop     (0444)     call  I2Cm_SendStop
                                        (0445) SkipTxStop:
                                        (0446) 	RAM_SETPAGE_CUR >I2Cm_bStatus
0A8A: 51 33    MOV   A,[0x33]           (0447)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0448) End_WriteBytes:
                                        (0449)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0450)     RAM_EPILOGUE RAM_USE_CLASS_4
0A8C: 7F       RET                      (0451)     ret
                                        (0452) .ENDSECTION
                                        (0453) 
                                        (0454) 
                                        (0455) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0456) .SECTION
                                        (0457) ;-----------------------------------------------------------------------------
                                        (0458) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0459) ;
                                        (0460) ;  DESCRIPTION:
                                        (0461) ;    Write multiple data bits to slave device.
                                        (0462) ;
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;
                                        (0465) ;  ARGUMENTS:
                                        (0466) ;     A => Address of slave
                                        (0467) ;     X => Pointer to other arguments.
                                        (0468) ;   [x] => LSB of Array address to put data in.
                                        (0469) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (0470) ; [X-2] => Count of bytes to write.
                                        (0471) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (0472) ;          to determine if:
                                        (0473) ;              0x01 => Use RePeatStart instead of Start
                                        (0474) ;              0x02 => Don't send Stop
                                        (0475) ;
                                        (0476) ;
                                        (0477) ;  RETURNS:
                                        (0478) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0479) ;
                                        (0480) ;  SIDE EFFECTS:
                                        (0481) ;    The A and X registers may be modified by this or future implementations
                                        (0482) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0483) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0484) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0485) ;    functions.
                                        (0486) ;          
                                        (0487) TxArray_X:      equ   0
                                        (0488) TxByteCount_X:  equ  -2
                                        (0489) TxMode_X:       equ  -3
                                        (0490) 
                                        (0491)  I2Cm_bWriteBytes:						       
0A8D: 64       ASL   A                  (0492)     asl   A                                           ; Shift address to the left to make
                                        (0493)                                                       ; a complete byte with the R/W bit.
                                        (0494)                                                       ; The ASL takes care of clearing bit 0.
0A8E: 55 31 00 MOV   [0x31],0x0         (0495)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0496) 
                                        (0497) 
0A91: 48 FD 01 TST   [X-3],0x1          (0498)     tst   [x+TxMode_X],I2Cm_RepStart
0A94: B0 05    JNZ   0x0A9A             (0499)     jnz   DoRestartTxSmm
0A96: 90 E9    CALL  0x0B81             (0500)     call  I2C_DoStart                                 ; Send a start and address.
0A98: 80 03    JMP   0x0A9C             (0501)     jmp   DoTxAckSmm
                                        (0502) DoRestartTxSmm:
0A9A: 90 B2    CALL  0x0B4E             (0503)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0504) DoTxAckSmm:
0A9C: 55 33 00 MOV   [0x33],0x0         (0505)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
0A9F: 47 31 01 TST   [0x31],0x1         (0506)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
0AA2: A0 18    JZ    0x0ABB             (0507)     jz    End_WR_LoopSmm
                                        (0508) WR_LoopSmm:                                              ; Loop through bytes
0AA4: 10       PUSH  X                  (0509)     push  x                                           ; Save X for later
0AA5: 59 00    MOV   X,[X+0]            (0510)     mov   x,[x+TxArray_X]                               ; Get pointer to data and put it in X
0AA7: 52 00    MOV   A,[X+0]            (0511)     mov   a,[x]                                       ; Get data pointer to by X
0AA9: 53 32    MOV   [0x32],A           (0512)     mov   [I2Cm_bData],a                              ; Save data in temp location
0AAB: 90 FE    CALL  0x0BAB             (0513)     call  I2Cm_write                                  ; Write the data
0AAD: 20       POP   X                  (0514)     pop   x
0AAE: 47 31 01 TST   [0x31],0x1         (0515)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0AB1: A0 0E    JZ    0x0AC0             (0516)     jz    DoWBstopSmm                                    ; Stop transfer if NAKed
0AB3: 76 33    INC   [0x33]             (0517)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0AB5: 77 00    INC   [X+0]              (0518)     inc   [x+TxArray_X]                                 ; Advance pointer
0AB7: 7B FE    DEC   [X-2]              (0519)     dec   [x+TxByteCount_X]                             ; Decrement byte counter
0AB9: BF EA    JNZ   0x0AA4             (0520)     jnz   WR_LoopSmm                                     ; Not finished, do another byte.
                                        (0521) End_WR_LoopSmm:                                          ; Endloop
0ABB: 48 FD 02 TST   [X-3],0x2          (0522)     tst   [x+TxMode_X],I2Cm_NoStop
0ABE: B0 03    JNZ   0x0AC2             (0523)     jnz   SkipTxStopSmm
                                        (0524) DoWBstopSmm:
0AC0: 91 F6    CALL  _I2Cm_SendStop     (0525)     call  I2Cm_SendStop
                                        (0526) SkipTxStopSmm:
0AC2: 51 33    MOV   A,[0x33]           (0527)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0528) End_WriteBytesSmm:
0AC4: 7F       RET                      (0529)     ret
                                        (0530) .ENDSECTION
                                        (0531) ENDIF
                                        (0532) 
                                        (0533) .SECTION
                                        (0534) ;-----------------------------------------------------------------------------
                                        (0535) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0536) ;
                                        (0537) ;  DESCRIPTION:
                                        (0538) ;    Write multiple data bits to slave device from ROM
                                        (0539) ;
                                        (0540) ;-----------------------------------------------------------------------------
                                        (0541) ;
                                        (0542) ;  ARGUMENTS:
                                        (0543) ;   [SP-3] => Address of slave
                                        (0544) ;   [SP-4] => LSB of ROM Array address to put data in.
                                        (0545) ;   [SP-5] => MSB of ROM Array address to put data in (ignorned)
                                        (0546) ;   [SP-6] => Count of bytes to write.
                                        (0547) ;   [SP-7] => Mode flags that allow the programmer to set flags
                                        (0548) ;            to determine if:
                                        (0549) ;               0x01 => Use RepeatStart instead of Start
                                        (0550) ;               0x02 => Don't send Stop
                                        (0551) ;
                                        (0552) ;  RETURNS:
                                        (0553) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0554) ;
                                        (0555) ;  SIDE EFFECTS:
                                        (0556) ;    The A and X registers may be modified by this or future implementations
                                        (0557) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0558) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0559) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0560) ;    functions.
                                        (0561) ;          
                                        (0562) ;    Currently only the page pointer registers listed below are modified: 
                                        (0563) ;          CUR_PP
                                        (0564) ;
                                        (0565) TxCSlaveAdr:   equ  -3
                                        (0566) TxCArrayLSB:   equ  -4
                                        (0567) TxCArrayMSB:   equ  -5
                                        (0568) TxCByteCount:  equ  -6
                                        (0569) TxCMode:       equ  -7
                                        (0570) 
                                        (0571) _I2Cm_bWriteCBytes:
                                        (0572)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0573)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0574)     RAM_SETPAGE_CUR >I2Cm_bStatus
0AC5: 4F       MOV   X,SP               (0575)     mov   X, SP
                                        (0576) 
0AC6: 52 FD    MOV   A,[X-3]            (0577)     mov   A,[x+TxCSlaveAdr]
0AC8: 64       ASL   A                  (0578)     asl   A                                           ; Shift address to the left to make
                                        (0579)                                                       ; a complete byte with the R/W bit.
                                        (0580)                                                       ; The ASL takes care of clearing bit 0.
0AC9: 55 31 00 MOV   [0x31],0x0         (0581)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0582) 
                                        (0583) 
0ACC: 48 F9 01 TST   [X-7],0x1          (0584)     tst   [x+TxCMode],I2Cm_RepStart                   ; Check if a Start or RepeatStart
0ACF: B0 05    JNZ   0x0AD5             (0585)     jnz   DoCRestartTx                                ; should executed.
0AD1: 90 AE    CALL  0x0B81             (0586)     call  I2C_DoStart                                 ; Send a start and address.
0AD3: 80 03    JMP   0x0AD7             (0587)     jmp   DoCTxAck
                                        (0588) DoCRestartTx:
0AD5: 90 77    CALL  0x0B4E             (0589)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0590) 
                                        (0591) DoCTxAck:                                             ; Test to see if Slave is ACKed
                                        (0592) 	RAM_SETPAGE_CUR >I2Cm_bStatus
0AD7: 55 33 00 MOV   [0x33],0x0         (0593)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
0ADA: 47 31 01 TST   [0x31],0x1         (0594)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0ADD: A0 1D    JZ    0x0AFB             (0595)     jz    End_WRC_Loop
                                        (0596) WRC_Loop:                                             ; Loop through bytes
0ADF: 10       PUSH  X                  (0597)     push  x                                           ; Save X for later
                                        (0598) 
0AE0: 52 FB    MOV   A,[X-5]            (0599)     mov   a,[x+TxCArrayMSB]                           ; Get data pointer to by X
0AE2: 59 FC    MOV   X,[X-4]            (0600)     mov   x,[x+TxCArrayLSB]                           ; Get pointer to data and put it in X
0AE4: 28       ROMX                     (0601)     romx                                              ; Put ROM Data in a
0AE5: 53 32    MOV   [0x32],A           (0602)     mov   [I2Cm_bData],a                              ; Save data in temp location
0AE7: 90 C2    CALL  0x0BAB             (0603)     call  I2Cm_write                                  ; Write the data
                                        (0604)     RAM_SETPAGE_CUR >I2Cm_bStatus
0AE9: 20       POP   X                  (0605)     pop   x
0AEA: 47 31 01 TST   [0x31],0x1         (0606)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0AED: A0 12    JZ    0x0B00             (0607)     jz    DoWCBstop                                    ; Stop transfer if NAKed
0AEF: 76 33    INC   [0x33]             (0608)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0AF1: 77 FC    INC   [X-4]              (0609)     inc   [x+TxCArrayLSB]                             ; Advance LSB of pointer
0AF3: D0 03    JNC   0x0AF7             (0610)     jnc   DecBCnt
0AF5: 77 FB    INC   [X-5]              (0611)     inc   [x+TxCArrayMSB]                             ; Advance MSB of pointer
                                        (0612) 
                                        (0613) DecBCnt:
0AF7: 7B FA    DEC   [X-6]              (0614)     dec   [x+TxCByteCount]                            ; Decrement byte counter
0AF9: BF E5    JNZ   0x0ADF             (0615)     jnz   WRC_Loop                                    ; Not finished, do another byte.
                                        (0616) End_WRC_Loop:                                         ; Endloop
0AFB: 48 F9 02 TST   [X-7],0x2          (0617)     tst   [x+TxCMode],I2Cm_NoStop
0AFE: B0 03    JNZ   0x0B02             (0618)     jnz   SkipTxCStop
                                        (0619) DoWCBstop:
0B00: 91 B6    CALL  _I2Cm_SendStop     (0620)     call  I2Cm_SendStop
                                        (0621) SkipTxCStop:
                                        (0622)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B02: 51 33    MOV   A,[0x33]           (0623)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0624) End_WriteCBytes:
                                        (0625)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0626)     RAM_EPILOGUE RAM_USE_CLASS_4
0B04: 7F       RET                      (0627)     ret
                                        (0628) .ENDSECTION
                                        (0629) 
                                        (0630) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0631) .SECTION
                                        (0632) ;-----------------------------------------------------------------------------
                                        (0633) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0634) ;
                                        (0635) ;  DESCRIPTION:
                                        (0636) ;    Write multiple data bits to slave device from ROM
                                        (0637) ;
                                        (0638) ;-----------------------------------------------------------------------------
                                        (0639) ;
                                        (0640) ;  ARGUMENTS:
                                        (0641) ;      A => Address of slave
                                        (0642) ;      X => Pointer to other arguments.
                                        (0643) ;     [x] => LSB of ROM Array address to put data in.
                                        (0644) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (0645) ;   [X-2] => Count of bytes to write.
                                        (0646) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (0647) ;            to determine if:
                                        (0648) ;               0x01 => Use RepeatStart instead of Start
                                        (0649) ;               0x02 => Don't send Stop
                                        (0650) ;
                                        (0651) ;  RETURNS:
                                        (0652) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0653) ;
                                        (0654) ;  SIDE EFFECTS:
                                        (0655) ;    The A and X registers may be modified by this or future implementations
                                        (0656) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0657) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0658) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0659) ;    functions.
                                        (0660) ;          
                                        (0661) TxCArrayLSB_x:   equ   0
                                        (0662) TxCArrayMSB_x:   equ  -1
                                        (0663) TxCByteCount_x:  equ  -2
                                        (0664) TxCMode_x:       equ  -3
                                        (0665) 
                                        (0666)  I2Cm_bWriteCBytes:					        
0B05: 64       ASL   A                  (0667)     asl   A                                           ; Shift address to the left to make
                                        (0668)                                                       ; a complete byte with the R/W bit.
                                        (0669)                                                       ; The ASL takes care of clearing bit 0.
0B06: 55 31 00 MOV   [0x31],0x0         (0670)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0671) 
                                        (0672) 
0B09: 48 FD 01 TST   [X-3],0x1          (0673)     tst   [x+TxCMode_x],I2Cm_RepStart                 ; Check if a Start or RepeatStart
0B0C: B0 05    JNZ   0x0B12             (0674)     jnz   DoCRestartTxSmm                                ; should executed.
0B0E: 90 71    CALL  0x0B81             (0675)     call  I2C_DoStart                                 ; Send a start and address.
0B10: 80 03    JMP   0x0B14             (0676)     jmp   DoCTxAckSmm
                                        (0677) DoCRestartTxSmm:
0B12: 90 3A    CALL  0x0B4E             (0678)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0679) 
                                        (0680) DoCTxAckSmm:                                             ; Test to see if Slave is ACKed
0B14: 55 33 00 MOV   [0x33],0x0         (0681)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
0B17: 47 31 01 TST   [0x31],0x1         (0682)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0B1A: A0 1D    JZ    0x0B38             (0683)     jz    End_WRC_LoopSmm
                                        (0684) WRC_LoopSmm:                                             ; Loop through bytes
0B1C: 10       PUSH  X                  (0685)     push  x                                           ; Save X for later
                                        (0686) 
0B1D: 52 FF    MOV   A,[X-1]            (0687)     mov   a,[x+TxCArrayMSB_x]                           ; Get data pointer to by X
0B1F: 59 00    MOV   X,[X+0]            (0688)     mov   x,[x+TxCArrayLSB_x]                           ; Get pointer to data and put it in X
0B21: 28       ROMX                     (0689)     romx                                              ; Put ROM Data in a
0B22: 53 32    MOV   [0x32],A           (0690)     mov   [I2Cm_bData],a                              ; Save data in temp location
0B24: 90 85    CALL  0x0BAB             (0691)     call  I2Cm_write                                  ; Write the data
0B26: 20       POP   X                  (0692)     pop   x
0B27: 47 31 01 TST   [0x31],0x1         (0693)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0B2A: A0 12    JZ    0x0B3D             (0694)     jz    DoWCBstopSmm                                ; Stop transfer if NAKed
0B2C: 76 33    INC   [0x33]             (0695)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0B2E: 77 00    INC   [X+0]              (0696)     inc   [x+TxCArrayLSB_x]                             ; Advance LSB of pointer
0B30: D0 03    JNC   0x0B34             (0697)     jnc   DecBCntSmm
0B32: 77 FF    INC   [X-1]              (0698)     inc   [x+TxCArrayMSB_x]                             ; Advance MSB of pointer
                                        (0699) 
                                        (0700) DecBCntSmm:
0B34: 7B FE    DEC   [X-2]              (0701)     dec   [x+TxCByteCount_x]                            ; Decrement byte counter
0B36: BF E5    JNZ   0x0B1C             (0702)     jnz   WRC_LoopSmm                                    ; Not finished, do another byte.
                                        (0703) End_WRC_LoopSmm:                                         ; Endloop
0B38: 48 FD 02 TST   [X-3],0x2          (0704)     tst   [x+TxCMode_x],I2Cm_NoStop
0B3B: B0 03    JNZ   0x0B3F             (0705)     jnz   SkipTxCStopSmm
                                        (0706) DoWCBstopSmm:
0B3D: 91 79    CALL  _I2Cm_SendStop     (0707)     call  I2Cm_SendStop
                                        (0708) SkipTxCStopSmm:
0B3F: 51 33    MOV   A,[0x33]           (0709)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0710) End_WriteCBytesSmm:
0B41: 7F       RET                      (0711)     ret
                                        (0712) .ENDSECTION
                                        (0713) ENDIF
                                        (0714) 
                                        (0715) .SECTION
                                        (0716) ;-----------------------------------------------------------------------------
                                        (0717) ;  FUNCTION NAME: I2Cm_fSendRepeatStart
                                        (0718) ;
                                        (0719) ;  DESCRIPTION:
                                        (0720) ;    Send repeated start condition and send slave address.
                                        (0721) ;
                                        (0722) ;-----------------------------------------------------------------------------
                                        (0723) ;
                                        (0724) ;  ARGUMENTS:
                                        (0725) ;    I2Cm_bAddr - Contains the slave address and transfer direction.
                                        (0726) ;
                                        (0727) ;  RETURNS:
                                        (0728) ;    I2Cm_bSTatus - Cleared if a slave responds to a request. Set otherwise
                                        (0729) ;
                                        (0730) ;  SIDE EFFECTS:
                                        (0731) ;    The A and X registers may be modified by this or future implementations
                                        (0732) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0733) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0734) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0735) ;    functions.
                                        (0736) ;          
                                        (0737) ;    Currently only the page pointer registers listed below are modified: 
                                        (0738) ;          CUR_PP
                                        (0739) ;
                                        (0740) ;  THEORY of OPERATION or PROCEDURE:
                                        (0741) ;    Prepare to send start by setting SCl and SDA high.
                                        (0742) ;    must be followed directly by I2Cm_start.
                                        (0743) ;
                                        (0744)  I2Cm_fSendRepeatStart:
                                        (0745) _I2Cm_fSendRepeatStart:
                                        (0746)     RAM_PROLOGUE RAM_USE_CLASS_4
0B42: 64       ASL   A                  (0747)     asl   a                                                ; Shift address to the left
0B43: 79       DEC   X                  (0748)     dec   x                                                ; If zero, C flag will be set
0B44: D0 04    JNC   0x0B49             (0749)     jnc   .setRead                                ; Do a write if zero
0B46: 90 06    CALL  0x0B4E             (0750)     call  I2C_DoRepeatStart
                                        (0751)     RAM_EPILOGUE RAM_USE_CLASS_4
0B48: 7F       RET                      (0752)     ret
                                        (0753) .setRead:
0B49: 29 01    OR    A,0x1              (0754)     or    a,0x01                                           ; Set Read flag
0B4B: 90 01    CALL  0x0B4E             (0755)     call  I2C_DoRepeatStart
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0B4D: 7F       RET                      (0757)     ret  
                                        (0758) 
                                        (0759) I2C_DoRepeatStart:
                                        (0760)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0761)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
0B4E: 08       PUSH  A                  (0762)     push  a
0B4F: 71 10    OR    F,0x10             
                                        (0763)     M8C_SetBank1
0B51: 2E 12 80 OR    [0x12],0x80        (0764)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin          ; Assert SCL low
0B54: 26 12 BF AND   [0x12],0xBF        (0765)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
0B57: 51 12    MOV   A,[0x12]           (0766)     mov   A,[Port_0_DriveMode_0_SHADE]
0B59: 60 00    MOV   REG[0x0],A         (0767)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0768) 
                                        (0769)                                                            ; Delay 3/4 period
0B5B: 50 0C    MOV   A,0xC              (0770)     mov   A,I2Cm_delay3qtr
0B5D: 91 88    CALL  0x0CE7             (0771)     call  I2Cm_delay
                                        (0772)                                                            ; Release SCL high
0B5F: 26 12 7F AND   [0x12],0x7F        (0773)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0B62: 51 12    MOV   A,[0x12]           (0774)     mov   A,[Port_0_DriveMode_0_SHADE]
0B64: 60 00    MOV   REG[0x0],A         (0775)     mov   reg[I2Cm_I2CPRTDM0],A
0B66: 70 EF    AND   F,0xEF             
                                        (0776) 
                                        (0777)     M8C_SetBank0
                                        (0778) clockstretch1:                                             ; Wait for SCL high in case of wait
                                        (0779)                                                            ; states adde by slave
0B68: 49 00 80 TST   REG[0x0],0x80      (0780)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0B6B: AF FC    JZ    0x0B68             (0781)     jz    clockstretch1
                                        (0782) 
0B6D: 50 0C    MOV   A,0xC              (0783)     mov   A,I2Cm_delay3qtr                                 ; Delay 1/2 period
0B6F: 91 76    CALL  0x0CE7             (0784)     call  I2Cm_delay
0B71: 18       POP   A                  (0785)     pop   a
0B72: 90 0D    CALL  0x0B81             (0786)     call  I2C_DoStart                                      ; Jump through to I2C_DoStart
                                        (0787)     RAM_EPILOGUE RAM_USE_CLASS_4
0B74: 7F       RET                      (0788)     ret
                                        (0789) .ENDSECTION
                                        (0790) 
                                        (0791) .SECTION
                                        (0792) ;-----------------------------------------------------------------------------
                                        (0793) ;  FUNCTION NAME: I2Cm_fSendStart
                                        (0794) ;
                                        (0795) ;  DESCRIPTION:
                                        (0796) ;    Generates start condition and sends slave address.
                                        (0797) ;
                                        (0798) ;-----------------------------------------------------------------------------
                                        (0799) ;
                                        (0800) ;  ARGUMENTS:
                                        (0801) ;    A => Contains the slave address.
                                        (0802) ;
                                        (0803) ;  RETURNS:
                                        (0804) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;          
                                        (0813) ;    Currently only the page pointer registers listed below are modified: 
                                        (0814) ;          CUR_PP
                                        (0815) ;
                                        (0816) ;  THEORY of OPERATION or PROCEDURE:
                                        (0817) ;   Send start by setting SDA low while SCL is high. Set
                                        (0818) ;   SCL low in preparation to send address. Must be followed
                                        (0819) ;   by I2Cm_write.
                                        (0820) ;
                                        (0821)  I2Cm_fSendStart:
                                        (0822) _I2Cm_fSendStart:
                                        (0823)     RAM_PROLOGUE RAM_USE_CLASS_4
0B75: 64       ASL   A                  (0824)     asl   a                                                     ; Shift address to the left
0B76: 79       DEC   X                  (0825)     dec   x                                                     ; If zero, C flag will be set
0B77: D0 04    JNC   0x0B7C             (0826)     jnc   .SetRead
0B79: 90 06    CALL  0x0B81             (0827)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0828)     RAM_EPILOGUE RAM_USE_CLASS_4
0B7B: 7F       RET                      (0829)     ret
                                        (0830) .SetRead:
0B7C: 29 01    OR    A,0x1              (0831)     or    a,0x01                                                ; Set Read flag
0B7E: 90 01    CALL  0x0B81             (0832)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0833)     RAM_EPILOGUE RAM_USE_CLASS_4
0B80: 7F       RET                      (0834)     ret
0B81: 71 10    OR    F,0x10             
                                        (0835) 
                                        (0836) I2C_DoStart:
                                        (0837)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0838)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0839)     M8C_SetBank1
0B83: 08       PUSH  A                  (0840)     push  A                                                     ; Save the slave address
0B84: 2E 12 40 OR    [0x12],0x40        (0841)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin               ; Assert SDA low
0B87: 51 12    MOV   A,[0x12]           (0842)     mov   A,[Port_0_DriveMode_0_SHADE]
0B89: 60 00    MOV   REG[0x0],A         (0843)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0844) 
0B8B: 50 05    MOV   A,0x5              (0845)     mov   A,I2Cm_delayhalf                                      ; Delay 1/2 period
0B8D: 91 58    CALL  0x0CE7             (0846)     call  I2Cm_delay
0B8F: 18       POP   A                  (0847)     pop   A                                                     ; Restore slave address to A
0B90: 70 EF    AND   F,0xEF             
                                        (0848)     M8C_SetBank0
                                        (0849)     RAM_SETPAGE_CUR >I2Cm_bData
0B92: 53 32    MOV   [0x32],A           (0850)     mov   [I2Cm_bData],A
0B94: 71 10    OR    F,0x10             
                                        (0851) 
                                        (0852)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0853)     M8C_SetBank1
0B96: 2E 12 80 OR    [0x12],0x80        (0854)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin               ; Set SCL low
0B99: 51 12    MOV   A,[0x12]           (0855)     mov   A,[Port_0_DriveMode_0_SHADE]
0B9B: 60 00    MOV   REG[0x0],A         (0856)     mov   reg[I2Cm_I2CPRTDM0],A
0B9D: 70 EF    AND   F,0xEF             
                                        (0857)     M8C_SetBank0
                                        (0858) 
0B9F: 50 02    MOV   A,0x2              (0859)     mov   A,I2Cm_delayqtr                                       ; Delay 1/4 period
0BA1: 91 44    CALL  0x0CE7             (0860)     call  I2Cm_delay
0BA3: 90 06    CALL  0x0BAB             (0861)     call   I2Cm_write                                           ; Write the byte.
                                        (0862)     RAM_EPILOGUE RAM_USE_CLASS_4
0BA5: 7F       RET                      (0863)     ret
                                        (0864) .ENDSECTION
                                        (0865) 
                                        (0866) .SECTION
                                        (0867) ;-----------------------------------------------------------------------------
                                        (0868) ;  FUNCTION NAME: I2Cm_fWrite
                                        (0869) ;
                                        (0870) ;  DESCRIPTION:
                                        (0871) ;    Writes a byte to the I2C master bus.
                                        (0872) ;
                                        (0873) ;-----------------------------------------------------------------------------
                                        (0874) ;
                                        (0875) ;  ARGUMENTS:
                                        (0876) ;    A contains Data to be written to I2C slave.
                                        (0877) ;
                                        (0878) ;  RETURNS:
                                        (0879) ;    1 If ACKed, else 0
                                        (0880) ;
                                        (0881) ;  SIDE EFFECTS:
                                        (0882) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0883) ;
                                        (0884) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0885) ;
                                        (0886) ;  FUNCTION NAME: I2Cm_write
                                        (0887) ;
                                        (0888) ;  DESCRIPTION:
                                        (0889) ;    Writes a byte to the I2C master bus. Also used for sending the address.
                                        (0890) ;
                                        (0891) ;  ARGUMENTS:
                                        (0892) ;    Reg A contains slave address.
                                        (0893) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0894) ;
                                        (0895) ;  RETURNS:
                                        (0896) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0897) ;
                                        (0898) ;  SIDE EFFECTS:
                                        (0899) ;    The A and X registers may be modified by this or future implementations
                                        (0900) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0901) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0902) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0903) ;    functions.
                                        (0904) ;          
                                        (0905) ;    Currently only the page pointer registers listed below are modified: 
                                        (0906) ;          CUR_PP
                                        (0907) ;
                                        (0908) ;    Send data byte to slave. Must be followed by I2Cm_get_ack.
                                        (0909) ;
                                        (0910) I2Cm_fWrite:
                                        (0911) _I2Cm_fWrite:
                                        (0912)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0913)     RAM_SETPAGE_CUR >I2Cm_bData
0BA6: 53 32    MOV   [0x32],A           (0914)     mov   [I2Cm_bData],A                                   ; Put data in bData
0BA8: 90 01    CALL  0x0BAB             (0915)     call  I2Cm_write
                                        (0916)     RAM_EPILOGUE RAM_USE_CLASS_4
0BAA: 7F       RET                      (0917)     ret
                                        (0918) 
                                        (0919) I2Cm_write:
                                        (0920) _I2Cm_write:
                                        (0921)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0922)     RAM_SETPAGE_CUR >I2Cm_bit_count
                                        (0923)     
0BAB: 55 34 08 MOV   [0x34],0x8         (0924)     mov   [I2Cm_bit_count],8                                ; Set up count to xmit 8 bits
                                        (0925) writenextbit:
0BAE: 7A 34    DEC   [0x34]             (0926)     dec   [I2Cm_bit_count]
0BB0: 71 10    OR    F,0x10             
                                        (0927) 
                                        (0928)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0929)                                                            ; Assert SCL low
                                        (0930)     M8C_SetBank1
0BB2: 2E 12 80 OR    [0x12],0x80        (0931)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0BB5: 51 12    MOV   A,[0x12]           (0932)     mov   A,[Port_0_DriveMode_0_SHADE]
0BB7: 60 00    MOV   REG[0x0],A         (0933)     mov   reg[I2Cm_I2CPRTDM0],A
0BB9: 70 EF    AND   F,0xEF             
                                        (0934)     M8C_SetBank0
                                        (0935) 
                                        (0936)     RAM_SETPAGE_CUR >I2Cm_bit_count
0BBB: 6B 32    RLC   [0x32]             (0937)     rlc   [I2Cm_bData]
0BBD: 71 10    OR    F,0x10             
                                        (0938)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0939)     M8C_SetBank1
0BBF: C0 0A    JC    0x0BCA             (0940)     jc    write_bit                                        ; Assert SDA low for data 0    
0BC1: 2E 12 40 OR    [0x12],0x40        (0941)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin
0BC4: 51 12    MOV   A,[0x12]           (0942)     mov   A,[Port_0_DriveMode_0_SHADE]
0BC6: 60 00    MOV   REG[0x0],A         (0943)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0944) 
0BC8: 80 08    JMP   0x0BD1             (0945)     jmp   writestartclock
                                        (0946) write_bit:                                                 ; Release SDA high for data 1
0BCA: 26 12 BF AND   [0x12],0xBF        (0947)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin      
0BCD: 51 12    MOV   A,[0x12]           (0948)     mov   A,[Port_0_DriveMode_0_SHADE]
0BCF: 60 00    MOV   REG[0x0],A         (0949)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0950) 
                                        (0951) writestartclock:
0BD1: 50 05    MOV   A,0x5              (0952)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0BD3: 91 12    CALL  0x0CE7             (0953)     call  I2Cm_delay
                                        (0954)                                                            ; Release SCL High
0BD5: 26 12 7F AND   [0x12],0x7F        (0955)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0BD8: 51 12    MOV   A,[0x12]           (0956)     mov   A,[Port_0_DriveMode_0_SHADE]
0BDA: 60 00    MOV   REG[0x0],A         (0957)     mov   reg[I2Cm_I2CPRTDM0],A
0BDC: 70 EF    AND   F,0xEF             
                                        (0958) 
                                        (0959)     M8C_SetBank0
                                        (0960) clockstretch2:                                             ; Wait for SCL high in case of wait states
                                        (0961)                                                            ; are added by slave.
0BDE: 49 00 80 TST   REG[0x0],0x80      (0962)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0BE1: AF FC    JZ    0x0BDE             (0963)     jz    clockstretch2
                                        (0964)                                                            ; Delay for 1/2 period
0BE3: 50 05    MOV   A,0x5              (0965)     mov   A,I2Cm_delayhalf
0BE5: 91 00    CALL  0x0CE7             (0966)     call  I2Cm_delay
                                        (0967) 
                                        (0968)     RAM_SETPAGE_CUR >I2Cm_bit_count
0BE7: 3C 34 00 CMP   [0x34],0x0         (0969)     cmp   [I2Cm_bit_count],0
0BEA: BF C3    JNZ   0x0BAE             (0970)     jnz   writenextbit
0BEC: 90 01    CALL  0x0BEF             (0971)     call  I2Cm_get_ack                
                                        (0972) 
                                        (0973)     RAM_EPILOGUE RAM_USE_CLASS_4
0BEE: 7F       RET                      (0974)     ret
0BEF: 71 10    OR    F,0x10             
                                        (0975) .ENDSECTION
                                        (0976) 
                                        (0977) .SECTION
                                        (0978) ;-----------------------------------------------------------------------------
                                        (0979) ;  FUNCTION NAME: I2Cm_get_ack
                                        (0980) ;
                                        (0981) ;  DESCRIPTION:
                                        (0982) ;    Get slave acknowledge response. Used only by I2Cm_write.
                                        (0983) ;
                                        (0984) ;-----------------------------------------------------------------------------
                                        (0985) ;
                                        (0986) ;  ARGUMENTS:
                                        (0987) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0988) ;
                                        (0989) ;  RETURNS:
                                        (0990) ;    Sets flag in I2Cm_bStatus if ACKed by Slave.
                                        (0991) ;
                                        (0992) ;  SIDE EFFECTS:
                                        (0993) ;    The A and X registers may be modified by this or future implementations
                                        (0994) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0995) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0996) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0997) ;    functions.
                                        (0998) ;          
                                        (0999) ;    Currently only the page pointer registers listed below are modified: 
                                        (1000) ;          CUR_PP
                                        (1001) ;
                                        (1002) I2Cm_get_ack:
                                        (1003) _I2Cm_get_ack:
                                        (1004)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1005)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1006)     M8C_SetBank1
0BF1: 2E 12 80 OR    [0x12],0x80        (1007)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0BF4: 51 12    MOV   A,[0x12]           (1008)     mov   A,[Port_0_DriveMode_0_SHADE]
0BF6: 60 00    MOV   REG[0x0],A         (1009)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1010)                                                            ; Release SDA high so slave may ACK
0BF8: 26 12 BF AND   [0x12],0xBF        (1011)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0BFB: 51 12    MOV   A,[0x12]           (1012)     mov   A,[Port_0_DriveMode_0_SHADE]
0BFD: 60 00    MOV   REG[0x0],A         (1013)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1014)                                                            ; Delay 3/4 period
0BFF: 50 0C    MOV   A,0xC              (1015)     mov   A,I2Cm_delay3qtr
0C01: 90 E4    CALL  0x0CE7             (1016)     call  I2Cm_delay
                                        (1017)                                                            ; Release SCL high
0C03: 26 12 7F AND   [0x12],0x7F        (1018)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0C06: 51 12    MOV   A,[0x12]           (1019)     mov   A,[Port_0_DriveMode_0_SHADE]
0C08: 60 00    MOV   REG[0x0],A         (1020)     mov   reg[I2Cm_I2CPRTDM0],A
0C0A: 70 EF    AND   F,0xEF             
                                        (1021) 
                                        (1022)     M8C_SetBank0
                                        (1023) clockstretch3:                                             ; Wait for SCL to go high in case wait states
                                        (1024)                                                            ; are added my slave.
0C0C: 49 00 80 TST   REG[0x0],0x80      (1025)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0C0F: AF FC    JZ    0x0C0C             (1026)     jz    clockstretch3
                                        (1027)     
                                        (1028)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1029)                                                        ; Clear ACK bit
0C11: 26 31 FE AND   [0x31],0xFE        (1030)     and   [I2Cm_bStatus],~I2Cm_SLAVE_ACKed
0C14: 49 00 40 TST   REG[0x0],0x40      (1031)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
0C17: B0 04    JNZ   0x0C1C             (1032)     jnz    getack2                                         ; If ACKed, set flag
0C19: 2E 31 01 OR    [0x31],0x1         (1033)     or    [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (1034) 
                                        (1035) getack2:
0C1C: 50 05    MOV   A,0x5              (1036)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0C1E: 90 C7    CALL  0x0CE7             (1037)     call  I2Cm_delay
                                        (1038) 
0C20: 51 31    MOV   A,[0x31]           (1039)     mov   A,[I2Cm_bStatus]                                 ; Get result and put it in A
0C22: 21 01    AND   A,0x1              (1040)     and   A,I2Cm_SLAVE_ACKed                               ; Mask off just the ACK flag.
                                        (1041)     RAM_EPILOGUE RAM_USE_CLASS_4
0C24: 7F       RET                      (1042)     ret
                                        (1043) .ENDSECTION
                                        (1044) 
                                        (1045) .SECTION
                                        (1046) ;-----------------------------------------------------------------------------
                                        (1047) ;  FUNCTION NAME: I2Cm_bRead
                                        (1048) ;
                                        (1049) ;  DESCRIPTION:
                                        (1050) ;    Reads 1 data byte from the I2C master bus.
                                        (1051) ;
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;
                                        (1054) ;  ARGUMENTS:
                                        (1055) ;    Reg A Contains the Slave Address.
                                        (1056) ;    I2Cm_bStatus - Set for no ack to be followed by stop.
                                        (1057) ;    Clear for ack to indicate more data to follow.
                                        (1058) ;
                                        (1059) ;  RETURNS:
                                        (1060) ;    I2Cm_bData - Contains received data.
                                        (1061) ;
                                        (1062) ;  SIDE EFFECTS:
                                        (1063) ;    The A and X registers may be modified by this or future implementations
                                        (1064) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1065) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1066) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1067) ;    functions.
                                        (1068) ;          
                                        (1069) ;    Currently only the page pointer registers listed below are modified: 
                                        (1070) ;          CUR_PP
                                        (1071) ;
                                        (1072) ;    Must be followed by I2Cm_put_ack.
                                        (1073) ;
                                        (1074) I2Cm_bRead:
                                        (1075) _I2Cm_bRead:
                                        (1076)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1077)     RAM_SETPAGE_CUR >I2Cm_bStatus
0C25: 55 31 00 MOV   [0x31],0x0         (1078)     mov   [I2Cm_bStatus],0x00                              ; Clear ACK flag
0C28: 21 FF    AND   A,0xFF             (1079)     and   A,0xFF                                           ; Is Ack flag set"
0C2A: A0 07    JZ    0x0C32             (1080)     jz    I2Cm_read                                        ; Don't ACK
0C2C: 2E 31 10 OR    [0x31],0x10        (1081)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Set ACK flag
0C2F: 90 01    CALL  0x0C32             (1082)     call  I2Cm_read
                                        (1083)     RAM_EPILOGUE RAM_USE_CLASS_4
0C31: 7F       RET                      (1084)     ret
                                        (1085) 
                                        (1086) I2Cm_read:
                                        (1087) _I2Cm_read:
                                        (1088)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1089)     RAM_SETPAGE_CUR >I2Cm_bStatus    
0C32: 55 34 08 MOV   [0x34],0x8         (1090)     mov   [I2Cm_bit_count],8                               ; Count and prepare bits to read
                                        (1091) readnextbit:
0C35: 7A 34    DEC   [0x34]             (1092)     dec   [I2Cm_bit_count]
0C37: 6B 32    RLC   [0x32]             (1093)     rlc   [I2Cm_bData]
0C39: 71 10    OR    F,0x10             
                                        (1094)     
                                        (1095)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1096)     M8C_SetBank1                                           ; Asser SCL low
0C3B: 2E 12 80 OR    [0x12],0x80        (1097)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0C3E: 51 12    MOV   A,[0x12]           (1098)     mov   A,[Port_0_DriveMode_0_SHADE]
0C40: 60 00    MOV   REG[0x0],A         (1099)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1100)                                                            ; Delay 1/2 period
0C42: 50 05    MOV   A,0x5              (1101)     mov   A,I2Cm_delayhalf
0C44: 90 A1    CALL  0x0CE7             (1102)     call  I2Cm_delay
                                        (1103)                                                            ; Release SCL high
0C46: 26 12 7F AND   [0x12],0x7F        (1104)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0C49: 51 12    MOV   A,[0x12]           (1105)     mov   A,[Port_0_DriveMode_0_SHADE]
0C4B: 60 00    MOV   REG[0x0],A         (1106)     mov   reg[I2Cm_I2CPRTDM0],A
0C4D: 70 EF    AND   F,0xEF             
                                        (1107) 
                                        (1108)     M8C_SetBank0
                                        (1109)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1110) clockstretch4:                                             ; Wait for SCL to go high in case slave
                                        (1111)                                                            ; addes wait states.
                                        (1112) 
0C4F: 49 00 80 TST   REG[0x0],0x80      (1113)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0C52: AF FC    JZ    0x0C4F             (1114)     jz    clockstretch4
                                        (1115)                                                            ; Delay 1/4 period
0C54: 50 02    MOV   A,0x2              (1116)     mov   A,I2Cm_delayqtr
0C56: 90 8F    CALL  0x0CE7             (1117)     call  I2Cm_delay
                                        (1118) 
0C58: 26 32 FE AND   [0x32],0xFE        (1119)     and   [I2Cm_bData],~01h                                ; Record bit received
0C5B: 49 00 40 TST   REG[0x0],0x40      (1120)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
0C5E: A0 04    JZ    0x0C63             (1121)     jz    readnobit
0C60: 2E 32 01 OR    [0x32],0x1         (1122)     or    [I2Cm_bData],01h
                                        (1123) readnobit:
0C63: 3C 34 00 CMP   [0x34],0x0         (1124)     cmp   [I2Cm_bit_count],0
0C66: BF CE    JNZ   0x0C35             (1125)     jnz   readnextbit                                      ; Check for byte complete
                                        (1126) 
0C68: 90 01    CALL  0x0C6B             (1127)     call   I2Cm_put_ack                
                                        (1128)     RAM_EPILOGUE RAM_USE_CLASS_4
0C6A: 7F       RET                      (1129)     ret
0C6B: 71 10    OR    F,0x10             
                                        (1130) .ENDSECTION
                                        (1131)                                                          
                                        (1132) .SECTION
                                        (1133) ;-----------------------------------------------------------------------------
                                        (1134) ;  FUNCTION NAME: I2Cm_put_ack
                                        (1135) ;
                                        (1136) ;  DESCRIPTION:
                                        (1137) ;    Send acknowledge to slave. Used only by I2Cm_read
                                        (1138) ;
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;    I2Cm_bStatus - Set for no ack to be followed by stop. Clear for ack
                                        (1143) ;    to indicate more data to follow.
                                        (1144) ;
                                        (1145) ;  RETURNS:
                                        (1146) ;    I2Cm_bData - Contains received data.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;    Send ack if more data will follow.
                                        (1159) ;
                                        (1160) I2Cm_put_ack:
                                        (1161) _I2Cm_put_ack:
                                        (1162)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1163)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1164)     M8C_SetBank1                                           ; Assert SCL low
0C6D: 2E 12 80 OR    [0x12],0x80        (1165)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0C70: 51 12    MOV   A,[0x12]           (1166)     mov   A,[Port_0_DriveMode_0_SHADE]
0C72: 60 00    MOV   REG[0x0],A         (1167)     mov   reg[I2Cm_I2CPRTDM0],A
0C74: 70 EF    AND   F,0xEF             
                                        (1168)     M8C_SetBank0
                                        (1169) 
                                        (1170)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1171)                                                        ; Check if ack is to be transmitted
0C76: 47 31 10 TST   [0x31],0x10        (1172)     tst   [I2Cm_bStatus],I2Cm_SEND_ACK
0C79: 71 10    OR    F,0x10             
                                        (1173) 
                                        (1174)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1175)     M8C_SetBank1
                                        (1176) 
0C7B: A0 0A    JZ    0x0C86             (1177)     jz    noputack
                                        (1178)                                                            ; Assert SDA low
0C7D: 2E 12 40 OR    [0x12],0x40        (1179)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin
0C80: 51 12    MOV   A,[0x12]           (1180)     mov   A,[Port_0_DriveMode_0_SHADE]
0C82: 60 00    MOV   REG[0x0],A         (1181)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1182) 
0C84: 80 08    JMP   0x0C8D             (1183)     jmp   putack1
                                        (1184) noputack:                                                  ; Release SDA high
0C86: 26 12 BF AND   [0x12],0xBF        (1185)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0C89: 51 12    MOV   A,[0x12]           (1186)     mov   A,[Port_0_DriveMode_0_SHADE]
0C8B: 60 00    MOV   REG[0x0],A         (1187)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1188) 
                                        (1189) putack1:
0C8D: 50 02    MOV   A,0x2              (1190)     mov   A,I2Cm_delayqtr                                  ; Delay 1/4 period
0C8F: 90 56    CALL  0x0CE7             (1191)     call  I2Cm_delay
                                        (1192)                                                            ; Release SCL high
0C91: 26 12 7F AND   [0x12],0x7F        (1193)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0C94: 51 12    MOV   A,[0x12]           (1194)     mov   A,[Port_0_DriveMode_0_SHADE]
0C96: 60 00    MOV   REG[0x0],A         (1195)     mov   reg[I2Cm_I2CPRTDM0],A
0C98: 70 EF    AND   F,0xEF             
                                        (1196) 
                                        (1197)     M8C_SetBank0
                                        (1198) clockstretch5:                                             ; Wait for SCL high in case slave
                                        (1199)                                                            ; adds wait states.
0C9A: 49 00 80 TST   REG[0x0],0x80      (1200)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0C9D: AF FC    JZ    0x0C9A             (1201)     jz    clockstretch5
                                        (1202)                                                            ; delay for the high half of the clock.
0C9F: 50 05    MOV   A,0x5              (1203)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0CA1: 90 44    CALL  0x0CE7             (1204)     call  I2Cm_delay
0CA3: 71 10    OR    F,0x10             
                                        (1205) 
                                        (1206)     M8C_SetBank1                                           ; Assert SCL low
0CA5: 2E 12 80 OR    [0x12],0x80        (1207)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0CA8: 51 12    MOV   A,[0x12]           (1208)     mov   A,[Port_0_DriveMode_0_SHADE]
0CAA: 60 00    MOV   REG[0x0],A         (1209)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1210)                                                            ; If there is another read pending
                                        (1211)                                                            ; must release SDA for slave
0CAC: 26 12 BF AND   [0x12],0xBF        (1212)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
0CAF: 51 12    MOV   A,[0x12]           (1213)     mov   A,[Port_0_DriveMode_0_SHADE]
0CB1: 60 00    MOV   REG[0x0],A         (1214)     mov   reg[I2Cm_I2CPRTDM0],A
0CB3: 70 EF    AND   F,0xEF             
                                        (1215)     M8C_SetBank0
                                        (1216) 
                                        (1217)     RAM_SETPAGE_CUR >I2Cm_bStatus    
0CB5: 51 32    MOV   A,[0x32]           (1218)     mov   A, [I2Cm_bData]
                                        (1219)     RAM_EPILOGUE RAM_USE_CLASS_4
0CB7: 7F       RET                      (1220)     ret
0CB8: 71 10    OR    F,0x10             
                                        (1221) .ENDSECTION
                                        (1222) 
                                        (1223) .SECTION
                                        (1224) ;-----------------------------------------------------------------------------
                                        (1225) ;  FUNCTION NAME: I2Cm_SendStop
                                        (1226) ;
                                        (1227) ;  DESCRIPTION:
                                        (1228) ;    Assert stop condition.
                                        (1229) ;
                                        (1230) ;-----------------------------------------------------------------------------
                                        (1231) ;
                                        (1232) ;  ARGUMENTS: none
                                        (1233) ;
                                        (1234) ;  RETURNS: none
                                        (1235) ;
                                        (1236) ;  SIDE EFFECTS:
                                        (1237) ;    The A and X registers may be modified by this or future implementations
                                        (1238) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1239) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1240) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1241) ;    functions.
                                        (1242) ;          
                                        (1243) ;    Currently only the page pointer registers listed below are modified: 
                                        (1244) ;          CUR_PP
                                        (1245) ;
                                        (1246) ;  THEORY of OPERATION or PROCEDURE:
                                        (1247) ;     Send stop by releasing SDA high while SCL high.ASA21CR1
                                        (1248) ;
                                        (1249)  I2Cm_SendStop:
                                        (1250) _I2Cm_SendStop:
                                        (1251)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1252)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1253)     M8C_SetBank1                                           ; Assert ACK and SDA low
0CBA: 2E 12 C0 OR    [0x12],0xC0        (1254)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin|I2Cm_SDA_pin
0CBD: 51 12    MOV   A,[0x12]           (1255)     mov   A,[Port_0_DriveMode_0_SHADE]
0CBF: 60 00    MOV   REG[0x0],A         (1256)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1257) 
0CC1: 50 0C    MOV   A,0xC              (1258)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
0CC3: 90 22    CALL  0x0CE7             (1259)     call  I2Cm_delay
                                        (1260)                                                            ; Release SCL high
0CC5: 26 12 7F AND   [0x12],0x7F        (1261)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0CC8: 51 12    MOV   A,[0x12]           (1262)     mov   A,[Port_0_DriveMode_0_SHADE]
0CCA: 60 00    MOV   REG[0x0],A         (1263)     mov   reg[I2Cm_I2CPRTDM0],A
0CCC: 70 EF    AND   F,0xEF             
                                        (1264) 
                                        (1265)     M8C_SetBank0
                                        (1266) clockstretch6:                                             ; Wait for SCL to go high in case slave
                                        (1267)                                                            ; has added wait states.
0CCE: 49 00 80 TST   REG[0x0],0x80      (1268)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0CD1: AF FC    JZ    0x0CCE             (1269)     jz    clockstretch6
0CD3: 71 10    OR    F,0x10             
                                        (1270)     M8C_SetBank1
                                        (1271) 
0CD5: 50 0C    MOV   A,0xC              (1272)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
0CD7: 90 0E    CALL  0x0CE7             (1273)     call  I2Cm_delay
                                        (1274) 
                                        (1275)                                                            ; Release SDA high
0CD9: 26 12 BF AND   [0x12],0xBF        (1276)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0CDC: 51 12    MOV   A,[0x12]           (1277)     mov   A,[Port_0_DriveMode_0_SHADE]
0CDE: 60 00    MOV   REG[0x0],A         (1278)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1279) 
0CE0: 50 05    MOV   A,0x5              (1280)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0CE2: 90 03    CALL  0x0CE7             (1281)     call  I2Cm_delay
0CE4: 70 EF    AND   F,0xEF             
                                        (1282)     M8C_SetBank0
                                        (1283)     
                                        (1284)     RAM_EPILOGUE RAM_USE_CLASS_4
0CE6: 7F       RET                      (1285)     ret
                                        (1286) .ENDSECTION
                                        (1287) 
                                        (1288) .SECTION
                                        (1289) ;-----------------------------------------------------------------------------
                                        (1290) ;  FUNCTION NAME: I2Cm_delay
                                        (1291) ;
                                        (1292) ;  DESCRIPTION:
                                        (1293) ;    Create delays for I2Cm routines.
                                        (1294) ;
                                        (1295) ;-----------------------------------------------------------------------------
                                        (1296) ;
                                        (1297) ;  ARGUMENTS: none
                                        (1298) ;
                                        (1299) ;  RETURNS: none
                                        (1300) ;
                                        (1301) ;  SIDE EFFECTS:
                                        (1302) ;    The A and X registers may be modified by this or future implementations
                                        (1303) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1304) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1305) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1306) ;    functions.
                                        (1307) ;          
                                        (1308) I2Cm_delay:                                      ; 11 cycles for call. 32 total.
                                        (1309) I2Cmdelay1:                                      ; Delay 1/4 period at 100 kHz
0CE7: 78       DEC   A                  (1310)      dec  A                                      ; 4 cycles
0CE8: BF FE    JNZ   0x0CE7             (1311)      jnz  I2Cmdelay1                             ; 5 cycles for jump, 4 no jump.     
0CEA: 7F       RET                      (1312)      ret                                         ; 8 cycles
                                        (1313)   
                                        (1314) .ENDSECTION
                                        (1315) 
                                        (1316) 
                                        (1317) 
                                        (1318) ; End of File I2Cm.asm
                                        (1319) 
                                        (1320) 
FILE: C:\Users\MATHIA~1\DOCUME~1\PSOCDE~1.2PR\WEATHE~1\WEATHE~1\hyt271.c
(0001) #include <m8c.h>        		// part specific constants and macros
(0002) #include "PSoCAPI.h"    		// PSoC API definitions for all User Modules
(0003) 
(0004) #include <stdio.h>
(0005) #include <stdlib.h>
(0006) 
(0007) void measuring (int*temperature, int*humidity) {
__UserModules_end|__text_start|_measuring|_measuring:
  capdata07            --> X+8
  tempdata             --> X+6
  capdata813           --> X+4
  humdata              --> X+2
  i                    --> X+0
  humidity             --> X-7
  temperature          --> X-5
    0CEB: 10       PUSH  X
    0CEC: 4F       MOV   X,SP
    0CED: 38 0A    ADD   SP,0xA
(0008) 
(0009) 
(0010) 	//get temp and humidity here		
(0011) 
(0012) 	int capdata07, capdata813, tempdata, humdata;
(0013) 	int i;
(0014) 	
(0015) 	I2Cm_fSendStart( 0x28, 1);	//Send Data Fetch
    0CEF: 10       PUSH  X
    0CF0: 57 01    MOV   X,0x1
    0CF2: 50 28    MOV   A,0x28
    0CF4: 7C 0B 75 LCALL _I2Cm_fSendStart
(0016) 	
(0017) 	// receive data
(0018) 	capdata813=I2Cm_bRead (I2Cm_ACKslave);
    0CF7: 50 01    MOV   A,0x1
    0CF9: 7C 0C 25 LCALL _I2Cm_bRead
    0CFC: 20       POP   X
    0CFD: 54 05    MOV   [X+5],A
    0CFF: 56 04 00 MOV   [X+4],0x0
(0019) 	capdata07 =I2Cm_bRead (I2Cm_ACKslave);
    0D02: 10       PUSH  X
    0D03: 50 01    MOV   A,0x1
    0D05: 7C 0C 25 LCALL _I2Cm_bRead
    0D08: 20       POP   X
    0D09: 54 09    MOV   [X+9],A
    0D0B: 56 08 00 MOV   [X+8],0x0
(0020) 	tempdata  =I2Cm_bRead (I2Cm_NAKslave);
    0D0E: 10       PUSH  X
    0D0F: 50 00    MOV   A,0x0
    0D11: 7C 0C 25 LCALL _I2Cm_bRead
    0D14: 20       POP   X
    0D15: 54 07    MOV   [X+7],A
    0D17: 56 06 00 MOV   [X+6],0x0
(0021) 	
(0022) 	I2Cm_SendStop();			//Stop I2C	
    0D1A: 10       PUSH  X
    0D1B: 7C 0C B8 LCALL _I2Cm_SendStop
    0D1E: 20       POP   X
(0023) 	
(0024) 	
(0025) 	// calculating temp and humidity
(0026) 	capdata813=capdata813<<8;
    0D1F: 52 05    MOV   A,[X+5]
    0D21: 54 04    MOV   [X+4],A
    0D23: 56 05 00 MOV   [X+5],0x0
(0027) 	humdata=capdata813|capdata07;
    0D26: 52 05    MOV   A,[X+5]
    0D28: 2B 09    OR    A,[X+9]
    0D2A: 54 03    MOV   [X+3],A
    0D2C: 52 04    MOV   A,[X+4]
    0D2E: 2B 08    OR    A,[X+8]
    0D30: 54 02    MOV   [X+2],A
(0028) 	humdata=humdata&0x3FFF;
    0D32: 27 02 3F AND   [X+2],0x3F
(0029) 	
(0030) 	humdata=( humdata / 163.83 ) - 48;
    0D35: 52 03    MOV   A,[X+3]
    0D37: 53 05    MOV   [__r3],A
    0D39: 52 02    MOV   A,[X+2]
    0D3B: 53 06    MOV   [__r2],A
    0D3D: 47 06 80 TST   [__r2],0x80
    0D40: A0 09    JZ    0x0D4A
    0D42: 55 07 FF MOV   [__r1],0xFF
    0D45: 55 08 FF MOV   [__r0],0xFF
    0D48: 80 07    JMP   0x0D50
    0D4A: 55 07 00 MOV   [__r1],0x0
    0D4D: 55 08 00 MOV   [__r0],0x0
    0D50: 51 08    MOV   A,[__r0]
    0D52: 08       PUSH  A
    0D53: 51 07    MOV   A,[__r1]
    0D55: 08       PUSH  A
    0D56: 51 06    MOV   A,[__r2]
    0D58: 08       PUSH  A
    0D59: 51 05    MOV   A,[__r3]
    0D5B: 08       PUSH  A
    0D5C: 7C 16 27 LCALL 0x1627
    0D5F: 18       POP   A
    0D60: 53 05    MOV   [__r3],A
    0D62: 18       POP   A
    0D63: 53 06    MOV   [__r2],A
    0D65: 18       POP   A
    0D66: 53 07    MOV   [__r1],A
    0D68: 18       POP   A
    0D69: 53 08    MOV   [__r0],A
    0D6B: 50 43    MOV   A,0x43
    0D6D: 08       PUSH  A
    0D6E: 50 23    MOV   A,0x23
    0D70: 08       PUSH  A
    0D71: 50 D4    MOV   A,0xD4
    0D73: 08       PUSH  A
    0D74: 50 7B    MOV   A,0x7B
    0D76: 08       PUSH  A
    0D77: 51 08    MOV   A,[__r0]
    0D79: 08       PUSH  A
    0D7A: 51 07    MOV   A,[__r1]
    0D7C: 08       PUSH  A
    0D7D: 51 06    MOV   A,[__r2]
    0D7F: 08       PUSH  A
    0D80: 51 05    MOV   A,[__r3]
    0D82: 08       PUSH  A
    0D83: 7C 14 F9 LCALL 0x14F9
    0D86: 18       POP   A
    0D87: 53 05    MOV   [__r3],A
    0D89: 18       POP   A
    0D8A: 53 06    MOV   [__r2],A
    0D8C: 18       POP   A
    0D8D: 53 07    MOV   [__r1],A
    0D8F: 18       POP   A
    0D90: 53 08    MOV   [__r0],A
    0D92: 38 FC    ADD   SP,0xFC
    0D94: 50 42    MOV   A,0x42
    0D96: 08       PUSH  A
    0D97: 50 40    MOV   A,0x40
    0D99: 08       PUSH  A
    0D9A: 50 00    MOV   A,0x0
    0D9C: 08       PUSH  A
    0D9D: 08       PUSH  A
    0D9E: 51 08    MOV   A,[__r0]
    0DA0: 08       PUSH  A
    0DA1: 51 07    MOV   A,[__r1]
    0DA3: 08       PUSH  A
    0DA4: 51 06    MOV   A,[__r2]
    0DA6: 08       PUSH  A
    0DA7: 51 05    MOV   A,[__r3]
    0DA9: 08       PUSH  A
    0DAA: 7C 15 D6 LCALL 0x15D6
    0DAD: 18       POP   A
    0DAE: 53 05    MOV   [__r3],A
    0DB0: 18       POP   A
    0DB1: 53 06    MOV   [__r2],A
    0DB3: 18       POP   A
    0DB4: 53 07    MOV   [__r1],A
    0DB6: 18       POP   A
    0DB7: 38 FC    ADD   SP,0xFC
    0DB9: 08       PUSH  A
    0DBA: 51 07    MOV   A,[__r1]
    0DBC: 08       PUSH  A
    0DBD: 51 06    MOV   A,[__r2]
    0DBF: 08       PUSH  A
    0DC0: 51 05    MOV   A,[__r3]
    0DC2: 08       PUSH  A
    0DC3: 7C 13 02 LCALL 0x1302
    0DC6: 18       POP   A
    0DC7: 54 03    MOV   [X+3],A
    0DC9: 18       POP   A
    0DCA: 54 02    MOV   [X+2],A
    0DCC: 38 FE    ADD   SP,0xFE
(0031) 	tempdata=-((tempdata / 99.2909 ) -24);
    0DCE: 52 07    MOV   A,[X+7]
    0DD0: 53 05    MOV   [__r3],A
    0DD2: 52 06    MOV   A,[X+6]
    0DD4: 53 06    MOV   [__r2],A
    0DD6: 47 06 80 TST   [__r2],0x80
    0DD9: A0 09    JZ    0x0DE3
    0DDB: 55 07 FF MOV   [__r1],0xFF
    0DDE: 55 08 FF MOV   [__r0],0xFF
    0DE1: 80 07    JMP   0x0DE9
    0DE3: 55 07 00 MOV   [__r1],0x0
    0DE6: 55 08 00 MOV   [__r0],0x0
    0DE9: 51 08    MOV   A,[__r0]
    0DEB: 08       PUSH  A
    0DEC: 51 07    MOV   A,[__r1]
    0DEE: 08       PUSH  A
    0DEF: 51 06    MOV   A,[__r2]
    0DF1: 08       PUSH  A
    0DF2: 51 05    MOV   A,[__r3]
    0DF4: 08       PUSH  A
    0DF5: 7C 16 27 LCALL 0x1627
    0DF8: 18       POP   A
    0DF9: 53 05    MOV   [__r3],A
    0DFB: 18       POP   A
    0DFC: 53 06    MOV   [__r2],A
    0DFE: 18       POP   A
    0DFF: 53 07    MOV   [__r1],A
    0E01: 18       POP   A
    0E02: 53 08    MOV   [__r0],A
    0E04: 50 42    MOV   A,0x42
    0E06: 08       PUSH  A
    0E07: 50 C6    MOV   A,0xC6
    0E09: 08       PUSH  A
    0E0A: 50 94    MOV   A,0x94
    0E0C: 08       PUSH  A
    0E0D: 50 F1    MOV   A,0xF1
    0E0F: 08       PUSH  A
    0E10: 51 08    MOV   A,[__r0]
    0E12: 08       PUSH  A
    0E13: 51 07    MOV   A,[__r1]
    0E15: 08       PUSH  A
    0E16: 51 06    MOV   A,[__r2]
    0E18: 08       PUSH  A
    0E19: 51 05    MOV   A,[__r3]
    0E1B: 08       PUSH  A
    0E1C: 7C 14 F9 LCALL 0x14F9
    0E1F: 18       POP   A
    0E20: 53 05    MOV   [__r3],A
    0E22: 18       POP   A
    0E23: 53 06    MOV   [__r2],A
    0E25: 18       POP   A
    0E26: 53 07    MOV   [__r1],A
    0E28: 18       POP   A
    0E29: 53 08    MOV   [__r0],A
    0E2B: 38 FC    ADD   SP,0xFC
    0E2D: 50 41    MOV   A,0x41
    0E2F: 08       PUSH  A
    0E30: 50 C0    MOV   A,0xC0
    0E32: 08       PUSH  A
    0E33: 50 00    MOV   A,0x0
    0E35: 08       PUSH  A
    0E36: 08       PUSH  A
    0E37: 51 08    MOV   A,[__r0]
    0E39: 08       PUSH  A
    0E3A: 51 07    MOV   A,[__r1]
    0E3C: 08       PUSH  A
    0E3D: 51 06    MOV   A,[__r2]
    0E3F: 08       PUSH  A
    0E40: 51 05    MOV   A,[__r3]
    0E42: 08       PUSH  A
    0E43: 7C 15 D6 LCALL 0x15D6
    0E46: 18       POP   A
    0E47: 53 05    MOV   [__r3],A
    0E49: 18       POP   A
    0E4A: 53 06    MOV   [__r2],A
    0E4C: 18       POP   A
    0E4D: 53 07    MOV   [__r1],A
    0E4F: 18       POP   A
    0E50: 53 08    MOV   [__r0],A
    0E52: 38 FC    ADD   SP,0xFC
    0E54: 36 08 80 XOR   [__r0],0x80
    0E57: 51 08    MOV   A,[__r0]
    0E59: 08       PUSH  A
    0E5A: 51 07    MOV   A,[__r1]
    0E5C: 08       PUSH  A
    0E5D: 51 06    MOV   A,[__r2]
    0E5F: 08       PUSH  A
    0E60: 51 05    MOV   A,[__r3]
    0E62: 08       PUSH  A
    0E63: 7C 13 02 LCALL 0x1302
    0E66: 18       POP   A
    0E67: 54 07    MOV   [X+7],A
    0E69: 18       POP   A
    0E6A: 54 06    MOV   [X+6],A
    0E6C: 38 FE    ADD   SP,0xFE
(0032) 	
(0033) 	//FIR filter for temperature  (not in funktion now)
(0034) 	for(i=0; i<4; i++) temperature[i] = temperature[i+1];
    0E6E: 56 01 00 MOV   [X+1],0x0
    0E71: 56 00 00 MOV   [X+0],0x0
    0E74: 52 01    MOV   A,[X+1]
    0E76: 01 01    ADD   A,0x1
    0E78: 64       ASL   A
    0E79: 53 07    MOV   [__r1],A
    0E7B: 52 FC    MOV   A,[X-4]
    0E7D: 04 07    ADD   [__r1],A
    0E7F: 3E 07    MVI   A,[__r1]
    0E81: 53 08    MOV   [__r0],A
    0E83: 3E 07    MVI   A,[__r1]
    0E85: 53 07    MOV   [__r1],A
    0E87: 52 01    MOV   A,[X+1]
    0E89: 64       ASL   A
    0E8A: 53 05    MOV   [__r3],A
    0E8C: 52 FC    MOV   A,[X-4]
    0E8E: 04 05    ADD   [__r3],A
    0E90: 51 08    MOV   A,[__r0]
    0E92: 3F 05    MVI   [__r3],A
    0E94: 51 07    MOV   A,[__r1]
    0E96: 3F 05    MVI   [__r3],A
    0E98: 77 01    INC   [X+1]
    0E9A: 0F 00 00 ADC   [X+0],0x0
    0E9D: 52 01    MOV   A,[X+1]
    0E9F: 11 04    SUB   A,0x4
    0EA1: 52 00    MOV   A,[X+0]
    0EA3: 31 80    XOR   A,0x80
    0EA5: 19 80    SBB   A,0x80
    0EA7: CF CC    JC    0x0E74
(0035) 	temperature[4] = tempdata;
    0EA9: 52 FC    MOV   A,[X-4]
    0EAB: 01 08    ADD   A,0x8
    0EAD: 53 07    MOV   [__r1],A
    0EAF: 52 06    MOV   A,[X+6]
    0EB1: 3F 07    MVI   [__r1],A
    0EB3: 52 07    MOV   A,[X+7]
    0EB5: 3F 07    MVI   [__r1],A
(0036) 	
(0037) 	//FIR filter for temperature (not in funktion now)
(0038) 	for(i=0; i<4; i++) humidity[i] = humidity[i+1];
    0EB7: 56 01 00 MOV   [X+1],0x0
    0EBA: 56 00 00 MOV   [X+0],0x0
    0EBD: 52 01    MOV   A,[X+1]
    0EBF: 01 01    ADD   A,0x1
    0EC1: 64       ASL   A
    0EC2: 53 07    MOV   [__r1],A
    0EC4: 52 FA    MOV   A,[X-6]
    0EC6: 04 07    ADD   [__r1],A
    0EC8: 3E 07    MVI   A,[__r1]
    0ECA: 53 08    MOV   [__r0],A
    0ECC: 3E 07    MVI   A,[__r1]
    0ECE: 53 07    MOV   [__r1],A
    0ED0: 52 01    MOV   A,[X+1]
    0ED2: 64       ASL   A
    0ED3: 53 05    MOV   [__r3],A
    0ED5: 52 FA    MOV   A,[X-6]
    0ED7: 04 05    ADD   [__r3],A
    0ED9: 51 08    MOV   A,[__r0]
    0EDB: 3F 05    MVI   [__r3],A
    0EDD: 51 07    MOV   A,[__r1]
    0EDF: 3F 05    MVI   [__r3],A
    0EE1: 77 01    INC   [X+1]
    0EE3: 0F 00 00 ADC   [X+0],0x0
    0EE6: 52 01    MOV   A,[X+1]
    0EE8: 11 04    SUB   A,0x4
    0EEA: 52 00    MOV   A,[X+0]
    0EEC: 31 80    XOR   A,0x80
    0EEE: 19 80    SBB   A,0x80
    0EF0: CF CC    JC    0x0EBD
(0039) 	humidity[4] = humdata;
    0EF2: 52 FA    MOV   A,[X-6]
    0EF4: 01 08    ADD   A,0x8
    0EF6: 53 07    MOV   [__r1],A
    0EF8: 52 02    MOV   A,[X+2]
    0EFA: 3F 07    MVI   [__r1],A
    0EFC: 52 03    MOV   A,[X+3]
    0EFE: 3F 07    MVI   [__r1],A
    0F00: 38 F6    ADD   SP,0xF6
    0F02: 20       POP   X
    0F03: 7F       RET   
(0040) 	
(0041) }
(0042) 
(0043) 
(0044) 
(0045) void printtemp (char *firstLine, char *secondLine, int*temperature) {
_printtemp:
  i                    --> X+2
  result               --> X+0
  temperature          --> X-9
  secondLine           --> X-7
  firstLine            --> X-5
    0F04: 10       PUSH  X
    0F05: 4F       MOV   X,SP
    0F06: 38 04    ADD   SP,0x4
(0046) 	//calculate the average of temperature (not in function nwo because to slow)
(0047) 	int result, i;
(0048) 	//result = 0;
(0049) 	//for(i=0; i<5; i++) result = result + temperature [i]; 
(0050) 	//result = result/5;
(0051) 	result=temperature[4];
    0F08: 52 F8    MOV   A,[X-8]
    0F0A: 01 08    ADD   A,0x8
    0F0C: 53 07    MOV   [__r1],A
    0F0E: 3E 07    MVI   A,[__r1]
    0F10: 54 00    MOV   [X+0],A
    0F12: 3E 07    MVI   A,[__r1]
    0F14: 54 01    MOV   [X+1],A
(0052) 	
(0053) 	//send to LCD
(0054) 	csprintf(firstLine, "Temperature:    ");
    0F16: 50 01    MOV   A,0x1
    0F18: 08       PUSH  A
    0F19: 50 83    MOV   A,0x83
    0F1B: 08       PUSH  A
    0F1C: 52 FB    MOV   A,[X-5]
    0F1E: 08       PUSH  A
    0F1F: 52 FC    MOV   A,[X-4]
    0F21: 08       PUSH  A
    0F22: 7C 19 E6 LCALL _csprintf
(0055) 	csprintf(secondLine,"%i C            ",result);
    0F25: 52 00    MOV   A,[X+0]
    0F27: 08       PUSH  A
    0F28: 52 01    MOV   A,[X+1]
    0F2A: 08       PUSH  A
    0F2B: 50 01    MOV   A,0x1
    0F2D: 08       PUSH  A
    0F2E: 50 72    MOV   A,0x72
    0F30: 08       PUSH  A
    0F31: 52 F9    MOV   A,[X-7]
    0F33: 08       PUSH  A
    0F34: 52 FA    MOV   A,[X-6]
    0F36: 08       PUSH  A
    0F37: 7C 19 E6 LCALL _csprintf
    0F3A: 38 F6    ADD   SP,0xF6
    0F3C: 38 FC    ADD   SP,0xFC
    0F3E: 20       POP   X
    0F3F: 7F       RET   
(0056) }
(0057) 			
(0058) 			
(0059) 			
(0060) 			
(0061) void printhum (char *firstLine, char *secondLine, int*humidity) {
_printhum:
  i                    --> X+2
  result               --> X+0
  humidity             --> X-9
  secondLine           --> X-7
  firstLine            --> X-5
    0F40: 10       PUSH  X
    0F41: 4F       MOV   X,SP
    0F42: 38 04    ADD   SP,0x4
(0062) 	//calculate the average of humidity (not in function nwo because to slow)
(0063) 	int result, i;
(0064) 	//result = 0;
(0065) 	//for(i=0; i<5; i++) result = result + humidity [i];
(0066) 	//result = result/5;
(0067) 	result =humidity[4];
    0F44: 52 F8    MOV   A,[X-8]
    0F46: 01 08    ADD   A,0x8
    0F48: 53 07    MOV   [__r1],A
    0F4A: 3E 07    MVI   A,[__r1]
    0F4C: 54 00    MOV   [X+0],A
    0F4E: 3E 07    MVI   A,[__r1]
    0F50: 54 01    MOV   [X+1],A
(0068) 	
(0069) 	//send to LCD
(0070) 	csprintf(firstLine, "Humidity:       ");
    0F52: 50 01    MOV   A,0x1
    0F54: 08       PUSH  A
    0F55: 50 61    MOV   A,0x61
    0F57: 08       PUSH  A
    0F58: 52 FB    MOV   A,[X-5]
    0F5A: 08       PUSH  A
    0F5B: 52 FC    MOV   A,[X-4]
    0F5D: 08       PUSH  A
    0F5E: 7C 19 E6 LCALL _csprintf
(0071) 	csprintf(secondLine,"%i %%           ",result);
    0F61: 52 00    MOV   A,[X+0]
(0072) 	//csprintf(secondLine[4], 0x25);
(0073) }
(0074) 				FILE: C:\Users\MATHIA~1\DOCUME~1\PSOCDE~1.2PR\WEATHE~1\WEATHE~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // Ports:
(0003) // P0_0 = MCLK
(0004) // P0_1 = XCLR adc reset
(0005) // P0_2 = Button SW
(0006) // P0_3 = windspeed input
(0007) // P0_4 = sunlight (solar) input
(0008) // P0_5 = rainsensor input
(0009) // P0_6 = I2C SDA
(0010) // P0_7 = I2C SCL
(0011) // P1_0 = Gray Code
(0012) // P1_1 = Gray Code
(0013) // P1_1 = Gray Code
(0014) // P2 = LCD
(0015) //----------------------------------------------------------------------------
(0016) 
(0017) #define LCD_LENGTH 16 // 16 plus \0 termination?
(0018) 
(0019) #include <m8c.h>        // part specific constants and macros
(0020) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0021) #include <stdio.h>
(0022) 
(0023) #include "HYT271.h"
(0024) #include "sunsensor.h"
(0025) #include "windspeed.h"
(0026) #include "overview.h"
(0027) 
(0028) void main(void)
(0029) {
_main:
  humidity             --> X+44
  temperature          --> X+34
  lcdSecondLine        --> X+18
  lcdFirstLine         --> X+2
  displaymode          --> X+0
    0F7C: 10       PUSH  X
    0F7D: 4F       MOV   X,SP
    0F7E: 38 36    ADD   SP,0x36
(0030) 	//Variables
(0031) 	char lcdFirstLine[LCD_LENGTH], lcdSecondLine[LCD_LENGTH];
(0032) 	unsigned int displaymode = 0;
    0F80: 56 01 00 MOV   [X+1],0x0
    0F83: 56 00 00 MOV   [X+0],0x0
(0033)  	int temperature[5];
(0034) 	int humidity[5];
(0035) 	
(0036) 	/** init **/
(0037) 	
(0038) 	// interrupt and SleepTimer init
(0039) 	M8C_EnableGInt ;                            // Turn on interrupts
    0F86: 71 01    OR    F,0x1
(0040) 	SleepTimer_Start();
    0F88: 10       PUSH  X
    0F89: 7C 05 A8 LCALL _SleepTimer_Start
(0041) 	SleepTimer_SetInterval(SleepTimer_8_HZ);    // Set interrupt to a
    0F8C: 50 10    MOV   A,0x10
    0F8E: 7C 05 BA LCALL _SleepTimer_SetInterval
(0042) 	SleepTimer_EnableInt();                     // 8 Hz rate
    0F91: 7C 05 A0 LCALL _SleepTimer_EnableInt
(0043) 	
(0044) 	// init PGA and SAR6 for sun and rain sensor
(0045) 	PGA_sun_SetGain(PGA_sun_G5_33);  // gain of 5,33
    0F94: 50 28    MOV   A,0x28
    0F96: 7C 06 CC LCALL _PGA_sun_SetGain
(0046) 	PGA_sun_Start(PGA_sun_HIGHPOWER);
    0F99: 50 03    MOV   A,0x3
    0F9B: 7C 06 BE LCALL _PGA_sun_Start|PGA_sun_SetPower|PGA_sun_Start|_PGA_sun_SetPower
(0047) 	SAR6_sun_Start(SAR6_sun_HIGHPOWER);
    0F9E: 50 03    MOV   A,0x3
    0FA0: 7C 06 50 LCALL _SAR6_sun_Start|SAR6_sun_SetPower|_SAR6_sun_SetPower
(0048) 	
(0049) 	// init PGA and SAR6 for windsensor
(0050) 	PGA_wind_SetGain(PGA_wind_G5_33);  // gain of 5,33
    0FA3: 50 28    MOV   A,0x28
    0FA5: 7C 06 98 LCALL _PGA_wind_SetGain
(0051) 	PGA_wind_Start(PGA_wind_HIGHPOWER);
    0FA8: 50 03    MOV   A,0x3
    0FAA: 7C 06 8A LCALL _PGA_wind_SetPower|PGA_wind_Start|PGA_wind_SetPower|_PGA_wind_Start
(0052) 	SAR6_wind_Start(SAR6_wind_HIGHPOWER);
    0FAD: 50 03    MOV   A,0x3
    0FAF: 7C 06 16 LCALL _SAR6_wind_Start|_SAR6_wind_SetPower|SAR6_wind_SetPower|SAR6_wind_Start
(0053) 
(0054) 	// LCD init
(0055) 	LCD_Init();
    0FB2: 7C 07 F3 LCALL _LCD_Init|LCD_Start|_LCD_Start|LCD_Init
    0FB5: 20       POP   X
(0056) 	
(0057) 	// print welcome screen to LCD
(0058) 	csprintf(lcdFirstLine,"   Welcome to   ");
    0FB6: 50 01    MOV   A,0x1
    0FB8: 08       PUSH  A
    0FB9: 50 C7    MOV   A,0xC7
    0FBB: 08       PUSH  A
    0FBC: 5A 07    MOV   [__r1],X
    0FBE: 06 07 02 ADD   [__r1],0x2
    0FC1: 51 08    MOV   A,[__r0]
    0FC3: 08       PUSH  A
    0FC4: 51 07    MOV   A,[__r1]
    0FC6: 08       PUSH  A
    0FC7: 7C 19 E6 LCALL _csprintf
(0059) 	csprintf(lcdSecondLine, " Weatherstation ");
    0FCA: 50 01    MOV   A,0x1
    0FCC: 08       PUSH  A
    0FCD: 50 B6    MOV   A,0xB6
    0FCF: 08       PUSH  A
    0FD0: 5A 07    MOV   [__r1],X
    0FD2: 06 07 12 ADD   [__r1],0x12
    0FD5: 51 08    MOV   A,[__r0]
    0FD7: 08       PUSH  A
    0FD8: 51 07    MOV   A,[__r1]
    0FDA: 08       PUSH  A
    0FDB: 7C 19 E6 LCALL _csprintf
    0FDE: 38 F8    ADD   SP,0xF8
(0060) 	LCD_Position(0,0);
    0FE0: 10       PUSH  X
    0FE1: 50 00    MOV   A,0x0
    0FE3: 57 00    MOV   X,0x0
    0FE5: 7C 08 63 LCALL _LCD_Position
    0FE8: 20       POP   X
(0061) 	LCD_PrString(lcdFirstLine);
    0FE9: 5A 07    MOV   [__r1],X
    0FEB: 06 07 02 ADD   [__r1],0x2
    0FEE: 10       PUSH  X
    0FEF: 51 08    MOV   A,[__r0]
    0FF1: 08       PUSH  A
    0FF2: 51 07    MOV   A,[__r1]
    0FF4: 5C       MOV   X,A
    0FF5: 18       POP   A
    0FF6: 7C 07 2E LCALL _LCD_PrString
(0062) 	LCD_Position(1,0);
    0FF9: 57 00    MOV   X,0x0
    0FFB: 50 01    MOV   A,0x1
    0FFD: 7C 08 63 LCALL _LCD_Position
    1000: 20       POP   X
(0063) 	LCD_PrString(lcdSecondLine);
    1001: 5A 07    MOV   [__r1],X
    1003: 06 07 12 ADD   [__r1],0x12
    1006: 10       PUSH  X
    1007: 51 08    MOV   A,[__r0]
    1009: 08       PUSH  A
    100A: 51 07    MOV   A,[__r1]
    100C: 5C       MOV   X,A
    100D: 18       POP   A
    100E: 7C 07 2E LCALL _LCD_PrString
(0064) 	
(0065) 	// just wait a bit
(0066) 	SleepTimer_SyncWait(4, SleepTimer_FORCE_RELOAD);
    1011: 57 01    MOV   X,0x1
    1013: 50 04    MOV   A,0x4
    1015: 7C 05 DB LCALL _SleepTimer_SyncWait
    1018: 20       POP   X
    1019: 81 A0    JMP   0x11BA
(0067) 	
(0068) 	while(1) {
(0069) 	
(0070) 		//checking if butten is prest 
(0071) 		if(PRT0DR & 0b00000100) { 
    101B: 5D 00    MOV   A,REG[0x0]
    101D: 53 08    MOV   [__r0],A
    101F: 47 08 04 TST   [__r0],0x4
    1022: A0 16    JZ    0x1039
(0072) 			//switches displaymode betwen 0 and 4
(0073) 		  	displaymode ++;
    1024: 77 01    INC   [X+1]
    1026: 0F 00 00 ADC   [X+0],0x0
(0074) 			if(displaymode>4)
    1029: 50 04    MOV   A,0x4
    102B: 13 01    SUB   A,[X+1]
    102D: 50 00    MOV   A,0x0
    102F: 1B 00    SBB   A,[X+0]
    1031: D0 07    JNC   0x1039
(0075) 			displaymode = 0;
    1033: 56 01 00 MOV   [X+1],0x0
    1036: 56 00 00 MOV   [X+0],0x0
(0076) 		}
(0077) 		
(0078) 		// get temp and humidity here
(0079) 		I2Cm_Start();				//Initialize I2C
    1039: 10       PUSH  X
    103A: 7C 09 A8 LCALL _I2Cm_Start
(0080) 		I2Cm_fSendStart( 0x28, 0);	//Send Measuring Request	
    103D: 57 00    MOV   X,0x0
    103F: 50 28    MOV   A,0x28
    1041: 7C 0B 75 LCALL _I2Cm_fSendStart
    1044: 20       POP   X
    1045: 53 08    MOV   [__r0],A
(0081) 		measuring(temperature, humidity); //measure temperature and humidity
    1047: 5A 07    MOV   [__r1],X
    1049: 06 07 2C ADD   [__r1],0x2C
    104C: 08       PUSH  A
    104D: 51 07    MOV   A,[__r1]
    104F: 08       PUSH  A
    1050: 5A 07    MOV   [__r1],X
    1052: 06 07 22 ADD   [__r1],0x22
    1055: 51 08    MOV   A,[__r0]
    1057: 08       PUSH  A
    1058: 51 07    MOV   A,[__r1]
    105A: 08       PUSH  A
    105B: 7C 0C EB LCALL __UserModules_end|__text_start|_measuring|_measuring
    105E: 38 FC    ADD   SP,0xFC
(0082) 		
(0083) 		switch(displaymode) {
    1060: 3D 00 00 CMP   [X+0],0x0
    1063: B0 06    JNZ   0x106A
    1065: 3D 01 00 CMP   [X+1],0x0
    1068: A0 2B    JZ    0x1094
    106A: 3D 00 00 CMP   [X+0],0x0
    106D: B0 06    JNZ   0x1074
    106F: 3D 01 01 CMP   [X+1],0x1
    1072: A0 54    JZ    0x10C7
    1074: 3D 00 00 CMP   [X+0],0x0
    1077: B0 06    JNZ   0x107E
    1079: 3D 01 02 CMP   [X+1],0x2
    107C: A0 72    JZ    0x10EF
    107E: 3D 00 00 CMP   [X+0],0x0
    1081: B0 06    JNZ   0x1088
    1083: 3D 01 03 CMP   [X+1],0x3
    1086: A0 90    JZ    0x1117
    1088: 3D 00 00 CMP   [X+0],0x0
    108B: B0 06    JNZ   0x1092
    108D: 3D 01 04 CMP   [X+1],0x4
    1090: A0 A3    JZ    0x1134
    1092: 80 BE    JMP   0x1151
(0084) 			case 0:
(0085) 				overview(lcdFirstLine, lcdSecondLine, temperature, humidity);
    1094: 5A 07    MOV   [__r1],X
    1096: 06 07 2C ADD   [__r1],0x2C
    1099: 51 08    MOV   A,[__r0]
    109B: 08       PUSH  A
    109C: 51 07    MOV   A,[__r1]
    109E: 08       PUSH  A
    109F: 5A 07    MOV   [__r1],X
    10A1: 06 07 22 ADD   [__r1],0x22
    10A4: 51 08    MOV   A,[__r0]
    10A6: 08       PUSH  A
    10A7: 51 07    MOV   A,[__r1]
    10A9: 08       PUSH  A
    10AA: 5A 07    MOV   [__r1],X
    10AC: 06 07 12 ADD   [__r1],0x12
    10AF: 51 08    MOV   A,[__r0]
    10B1: 08       PUSH  A
    10B2: 51 07    MOV   A,[__r1]
    10B4: 08       PUSH  A
    10B5: 5A 07    MOV   [__r1],X
    10B7: 06 07 02 ADD   [__r1],0x2
    10BA: 51 08    MOV   A,[__r0]
    10BC: 08       PUSH  A
    10BD: 51 07    MOV   A,[__r1]
    10BF: 08       PUSH  A
    10C0: 7C 11 C1 LCALL _overview
    10C3: 38 F8    ADD   SP,0xF8
(0086) 				break;
    10C5: 80 BB    JMP   0x1181
(0087) 				
(0088) 			case 1:
(0089) 				printtemp(lcdFirstLine, lcdSecondLine, temperature);  //write temp in the variable for the lcd
    10C7: 5A 07    MOV   [__r1],X
    10C9: 06 07 22 ADD   [__r1],0x22
    10CC: 51 08    MOV   A,[__r0]
    10CE: 08       PUSH  A
    10CF: 51 07    MOV   A,[__r1]
    10D1: 08       PUSH  A
    10D2: 5A 07    MOV   [__r1],X
    10D4: 06 07 12 ADD   [__r1],0x12
    10D7: 51 08    MOV   A,[__r0]
    10D9: 08       PUSH  A
    10DA: 51 07    MOV   A,[__r1]
    10DC: 08       PUSH  A
    10DD: 5A 07    MOV   [__r1],X
    10DF: 06 07 02 ADD   [__r1],0x2
    10E2: 51 08    MOV   A,[__r0]
    10E4: 08       PUSH  A
    10E5: 51 07    MOV   A,[__r1]
    10E7: 08       PUSH  A
    10E8: 7C 0F 04 LCALL _printtemp
    10EB: 38 FA    ADD   SP,0xFA
(0090) 				break;
    10ED: 80 93    JMP   0x1181
(0091) 				
(0092) 			case 2:
(0093) 				printhum(lcdFirstLine, lcdSecondLine, humidity);  //wirte humidity in the variable for the lcd
    10EF: 5A 07    MOV   [__r1],X
    10F1: 06 07 2C ADD   [__r1],0x2C
    10F4: 51 08    MOV   A,[__r0]
    10F6: 08       PUSH  A
    10F7: 51 07    MOV   A,[__r1]
    10F9: 08       PUSH  A
    10FA: 5A 07    MOV   [__r1],X
    10FC: 06 07 12 ADD   [__r1],0x12
    10FF: 51 08    MOV   A,[__r0]
    1101: 08       PUSH  A
    1102: 51 07    MOV   A,[__r1]
    1104: 08       PUSH  A
    1105: 5A 07    MOV   [__r1],X
    1107: 06 07 02 ADD   [__r1],0x2
    110A: 51 08    MOV   A,[__r0]
    110C: 08       PUSH  A
    110D: 51 07    MOV   A,[__r1]
    110F: 08       PUSH  A
    1110: 7C 0F 40 LCALL _printhum
    1113: 38 FA    ADD   SP,0xFA
(0094) 				break;
    1115: 80 6B    JMP   0x1181
(0095) 				
(0096) 			case 3:
(0097) 				sunsensor(lcdFirstLine, lcdSecondLine); // is it day or night and is it rainy?
    1117: 5A 07    MOV   [__r1],X
    1119: 06 07 12 ADD   [__r1],0x12
    111C: 51 08    MOV   A,[__r0]
    111E: 08       PUSH  A
    111F: 51 07    MOV   A,[__r1]
    1121: 08       PUSH  A
    1122: 5A 07    MOV   [__r1],X
    1124: 06 07 02 ADD   [__r1],0x2
    1127: 51 08    MOV   A,[__r0]
    1129: 08       PUSH  A
    112A: 51 07    MOV   A,[__r1]
    112C: 08       PUSH  A
    112D: 7C 12 0D LCALL _sunsensor
    1130: 38 FC    ADD   SP,0xFC
(0098) 				break;
    1132: 80 4E    JMP   0x1181
(0099) 				
(0100) 			case 4:
(0101) 				windsensor(lcdFirstLine, lcdSecondLine); // write windspeed here
    1134: 5A 07    MOV   [__r1],X
    1136: 06 07 12 ADD   [__r1],0x12
    1139: 51 08    MOV   A,[__r0]
    113B: 08       PUSH  A
    113C: 51 07    MOV   A,[__r1]
    113E: 08       PUSH  A
    113F: 5A 07    MOV   [__r1],X
    1141: 06 07 02 ADD   [__r1],0x2
    1144: 51 08    MOV   A,[__r0]
    1146: 08       PUSH  A
    1147: 51 07    MOV   A,[__r1]
    1149: 08       PUSH  A
    114A: 7C 12 96 LCALL _windsensor
    114D: 38 FC    ADD   SP,0xFC
(0102) 				break;
    114F: 80 31    JMP   0x1181
(0103) 		
(0104) 			default:
(0105) 				displaymode = 0;
    1151: 56 01 00 MOV   [X+1],0x0
    1154: 56 00 00 MOV   [X+0],0x0
(0106) 				csprintf(lcdFirstLine,"     Error      ");
    1157: 50 01    MOV   A,0x1
    1159: 08       PUSH  A
    115A: 50 A5    MOV   A,0xA5
    115C: 08       PUSH  A
    115D: 5A 07    MOV   [__r1],X
    115F: 06 07 02 ADD   [__r1],0x2
    1162: 51 08    MOV   A,[__r0]
    1164: 08       PUSH  A
    1165: 51 07    MOV   A,[__r1]
    1167: 08       PUSH  A
    1168: 7C 19 E6 LCALL _csprintf
(0107) 				csprintf(lcdSecondLine,"                ");
    116B: 50 01    MOV   A,0x1
    116D: 08       PUSH  A
    116E: 50 94    MOV   A,0x94
    1170: 08       PUSH  A
    1171: 5A 07    MOV   [__r1],X
    1173: 06 07 12 ADD   [__r1],0x12
    1176: 51 08    MOV   A,[__r0]
    1178: 08       PUSH  A
    1179: 51 07    MOV   A,[__r1]
    117B: 08       PUSH  A
    117C: 7C 19 E6 LCALL _csprintf
    117F: 38 F8    ADD   SP,0xF8
(0108) 		}
(0109) 		
(0110) 		// lets see what we've got
(0111) 		LCD_Position(0,0);
    1181: 10       PUSH  X
    1182: 50 00    MOV   A,0x0
    1184: 57 00    MOV   X,0x0
    1186: 7C 08 63 LCALL _LCD_Position
    1189: 20       POP   X
(0112) 		LCD_PrString(lcdFirstLine);
    118A: 5A 07    MOV   [__r1],X
    118C: 06 07 02 ADD   [__r1],0x2
    118F: 10       PUSH  X
    1190: 51 08    MOV   A,[__r0]
    1192: 08       PUSH  A
    1193: 51 07    MOV   A,[__r1]
    1195: 5C       MOV   X,A
    1196: 18       POP   A
    1197: 7C 07 2E LCALL _LCD_PrString
(0113) 		LCD_Position(1,0);
    119A: 57 00    MOV   X,0x0
    119C: 50 01    MOV   A,0x1
    119E: 7C 08 63 LCALL _LCD_Position
    11A1: 20       POP   X
(0114) 		LCD_PrString(lcdSecondLine);
    11A2: 5A 07    MOV   [__r1],X
    11A4: 06 07 12 ADD   [__r1],0x12
    11A7: 10       PUSH  X
    11A8: 51 08    MOV   A,[__r0]
    11AA: 08       PUSH  A
    11AB: 51 07    MOV   A,[__r1]
    11AD: 5C       MOV   X,A
    11AE: 18       POP   A
    11AF: 7C 07 2E LCALL _LCD_PrString
(0115) 		
(0116) 		// lets sleep for a while
(0117) 		SleepTimer_SyncWait(8, SleepTimer_WAIT_RELOAD);
    11B2: 57 00    MOV   X,0x0
    11B4: 50 08    MOV   A,0x8
    11B6: 7C 05 DB LCALL _SleepTimer_SyncWait
    11B9: 20       POP   X
(0118) 	}
    11BA: 8E 60    JMP   0x101B
(0119) }
FILE: C:\Users\MATHIA~1\DOCUME~1\PSOCDE~1.2PR\WEATHE~1\WEATHE~1\overview.c
(0001) 
(0002) #include <stdio.h>
(0003) 
(0004) void overview(char *firstLine, char *secondLine, int *temp, int *humid) {
_overview:
  humid                --> X-11
  temp                 --> X-9
  secondLine           --> X-7
  firstLine            --> X-5
    11C1: 10       PUSH  X
    11C2: 4F       MOV   X,SP
(0005) 
(0006) 	csprintf(firstLine,"Temp & Humidity ");
    11C3: 50 01    MOV   A,0x1
    11C5: 08       PUSH  A
    11C6: 50 EA    MOV   A,0xEA
    11C8: 08       PUSH  A
    11C9: 52 FB    MOV   A,[X-5]
    11CB: 08       PUSH  A
    11CC: 52 FC    MOV   A,[X-4]
    11CE: 08       PUSH  A
    11CF: 7C 19 E6 LCALL _csprintf
(0007) 	csprintf(secondLine,"%i C      %i %%  ", temp[4], humid[4]);
    11D2: 52 F6    MOV   A,[X-10]
    11D4: 01 08    ADD   A,0x8
    11D6: 53 07    MOV   [__r1],A
    11D8: 3E 07    MVI   A,[__r1]
    11DA: 53 08    MOV   [__r0],A
    11DC: 3E 07    MVI   A,[__r1]
    11DE: 53 07    MOV   [__r1],A
    11E0: 51 08    MOV   A,[__r0]
    11E2: 08       PUSH  A
    11E3: 51 07    MOV   A,[__r1]
    11E5: 08       PUSH  A
    11E6: 52 F8    MOV   A,[X-8]
    11E8: 01 08    ADD   A,0x8
    11EA: 53 07    MOV   [__r1],A
    11EC: 3E 07    MVI   A,[__r1]
    11EE: 53 08    MOV   [__r0],A
    11F0: 3E 07    MVI   A,[__r1]
    11F2: 53 07    MOV   [__r1],A
    11F4: 51 08    MOV   A,[__r0]
    11F6: 08       PUSH  A
    11F7: 51 07    MOV   A,[__r1]
    11F9: 08       PUSH  A
    11FA: 50 01    MOV   A,0x1
    11FC: 08       PUSH  A
    11FD: 50 D8    MOV   A,0xD8
    11FF: 08       PUSH  A
    1200: 52 F9    MOV   A,[X-7]
    1202: 08       PUSH  A
    1203: 52 FA    MOV   A,[X-6]
    1205: 08       PUSH  A
    1206: 7C 19 E6 LCALL _csprintf
    1209: 38 F4    ADD   SP,0xF4
    120B: 20       POP   X
    120C: 7F       RET   
FILE: C:\Users\MATHIA~1\DOCUME~1\PSOCDE~1.2PR\WEATHE~1\WEATHE~1\sunsensor.c
(0001) /**
(0002) Measuring the lightintensity with an active PV on an ADC.
(0003) We also measure if it is rainy or not.
(0004) 
(0005) ADC: SAR6
(0006) 
(0007) +31 entspricht 5V
(0008) -31 entspricht 0V
(0009) 
(0010) 5V/63 = 0,079V
(0011) 
(0012) Solarpanel max V: 0,9V
(0013) 
(0014) Night:  < 0,1V * 5,33 gain = 0,533V
(0015) 				0,533V/0,079V = 7
(0016) Cloudy: 0,35V * 5,33 gain = 1,8655V
(0017) 				1,8655/0,079V = 24
(0018) max:    0,9V * 5,33 gain = 4,797V
(0019) 				4,797V/0,079V = 61
(0020) ____________________________________
(0021) rain: high on P0_5
(0022) no rain: low
(0023) 
(0024) **/
(0025) 
(0026) #define PORT PRT0DR
(0027) #define RAINPIN 0b00100000 // P0_5
(0028) 
(0029) #include "PSoCAPI.h"
(0030) #include <stdio.h>
(0031) #include <stdlib.h>
(0032) 
(0033) void sunsensor(char *firstLine, char *secondLine) {
_sunsensor:
  sunSample            --> X+0
  secondLine           --> X-7
  firstLine            --> X-5
    120D: 10       PUSH  X
    120E: 4F       MOV   X,SP
    120F: 38 01    ADD   SP,0x1
(0034) 	char sunSample = 0x00;
    1211: 56 00 00 MOV   [X+0],0x0
(0035) 
(0036) 	sunSample = SAR6_sun_cGetSample();
    1214: 10       PUSH  X
    1215: 7C 06 5E LCALL SAR6_sun_GetSample|SAR6_sun_cGetSample|_SAR6_sun_GetSample|_SAR6_sun_cGetSample
    1218: 20       POP   X
    1219: 54 00    MOV   [X+0],A
(0037) 	sunSample += 31;
    121B: 07 00 1F ADD   [X+0],0x1F
(0038) 	
(0039) 	csprintf(firstLine, "Sun and rain    ");
    121E: 50 02    MOV   A,0x2
    1220: 08       PUSH  A
    1221: 50 34    MOV   A,0x34
    1223: 08       PUSH  A
    1224: 52 FB    MOV   A,[X-5]
    1226: 08       PUSH  A
    1227: 52 FC    MOV   A,[X-4]
    1229: 08       PUSH  A
    122A: 7C 19 E6 LCALL _csprintf
    122D: 38 FC    ADD   SP,0xFC
(0040) 	
(0041) 	if( sunSample >= 24 ) {
    122F: 3D 00 18 CMP   [X+0],0x18
    1232: C0 14    JC    0x1247
(0042) 		// sunshine!
(0043) 		csprintf(secondLine, "sunny           ");
    1234: 50 02    MOV   A,0x2
    1236: 08       PUSH  A
    1237: 50 23    MOV   A,0x23
    1239: 08       PUSH  A
    123A: 52 F9    MOV   A,[X-7]
    123C: 08       PUSH  A
    123D: 52 FA    MOV   A,[X-6]
    123F: 08       PUSH  A
    1240: 7C 19 E6 LCALL _csprintf
    1243: 38 FC    ADD   SP,0xFC
(0044) 	} else if( sunSample >= 5 ) {
    1245: 80 2A    JMP   0x1270
    1247: 3D 00 05 CMP   [X+0],0x5
    124A: C0 14    JC    0x125F
(0045) 		// cloudy!
(0046) 		csprintf(secondLine, "cloudy          ");
    124C: 50 02    MOV   A,0x2
    124E: 08       PUSH  A
    124F: 50 12    MOV   A,0x12
    1251: 08       PUSH  A
    1252: 52 F9    MOV   A,[X-7]
    1254: 08       PUSH  A
    1255: 52 FA    MOV   A,[X-6]
    1257: 08       PUSH  A
    1258: 7C 19 E6 LCALL _csprintf
    125B: 38 FC    ADD   SP,0xFC
(0047) 	} else {
    125D: 80 12    JMP   0x1270
(0048) 		// good night!
(0049) 		csprintf(secondLine, "night           ");
    125F: 50 02    MOV   A,0x2
    1261: 08       PUSH  A
    1262: 50 01    MOV   A,0x1
    1264: 08       PUSH  A
    1265: 52 F9    MOV   A,[X-7]
    1267: 08       PUSH  A
    1268: 52 FA    MOV   A,[X-6]
    126A: 08       PUSH  A
    126B: 7C 19 E6 LCALL _csprintf
    126E: 38 FC    ADD   SP,0xFC
(0050) 	}
(0051) 	
(0052) 	if (PORT & RAINPIN) {
    1270: 5D 00    MOV   A,REG[0x0]
    1272: 53 08    MOV   [__r0],A
    1274: 47 08 20 TST   [__r0],0x20
    1277: A0 1A    JZ    0x1292
(0053) 		// rainy!
(0054) 		csprintf(&secondLine[11], "rainy");
    1279: 50 01    MOV   A,0x1
    127B: 08       PUSH  A
    127C: 50 FB    MOV   A,0xFB
    127E: 08       PUSH  A
    127F: 52 FA    MOV   A,[X-6]
    1281: 01 0B    ADD   A,0xB
    1283: 53 07    MOV   [__r1],A
    1285: 52 F9    MOV   A,[X-7]
    1287: 09 00    ADC   A,0x0
    1289: 08       PUSH  A
    128A: 51 07    MOV   A,[__r1]
    128C: 08       PUSH  A
    128D: 7C 19 E6 LCALL _csprintf
    1290: 38 FC    ADD   SP,0xFC
(0055) 	}
    1292: 38 FF    ADD   SP,0xFF
    1294: 20       POP   X
    1295: 7F       RET   
FILE: C:\Users\MATHIA~1\DOCUME~1\PSOCDE~1.2PR\WEATHE~1\WEATHE~1\windspeed.c
(0001) /*
(0002) #define PORT PRT1DR
(0003) #define PIN1 0b00000001 // P1_0
(0004) #define PIN2 0b00000010 // P1_1
(0005) #define PIN3 0b00000100 // P1_2
(0006) */
(0007) 
(0008) #include "PSoCAPI.h"
(0009) #include <stdio.h>
(0010) #include <stdlib.h>
(0011) 
(0012) void windsensor(char *firstLine, char *secondLine) {
_windsensor:
  windSample           --> X+0
  secondLine           --> X-7
  firstLine            --> X-5
    1296: 10       PUSH  X
    1297: 4F       MOV   X,SP
    1298: 38 02    ADD   SP,0x2
(0013) 	int windSample = 0x00;
    129A: 56 01 00 MOV   [X+1],0x0
    129D: 56 00 00 MOV   [X+0],0x0
(0014) 
(0015) 	// get windspeed
(0016) 	windSample = SAR6_wind_cGetSample();
    12A0: 10       PUSH  X
    12A1: 7C 06 24 LCALL SAR6_wind_GetSample|_SAR6_wind_cGetSample|SAR6_wind_cGetSample|_SAR6_wind_GetSample
    12A4: 20       POP   X
    12A5: 54 01    MOV   [X+1],A
    12A7: 56 00 00 MOV   [X+0],0x0
    12AA: 48 01 80 TST   [X+1],0x80
    12AD: A0 04    JZ    0x12B2
    12AF: 56 00 FF MOV   [X+0],0xFF
(0017) 	windSample += 30; // make unsigned int
    12B2: 07 01 1E ADD   [X+1],0x1E
    12B5: 0F 00 00 ADC   [X+0],0x0
(0018) 	windSample *= 5; // to get km/h
    12B8: 52 00    MOV   A,[X+0]
    12BA: 08       PUSH  A
    12BB: 52 01    MOV   A,[X+1]
    12BD: 08       PUSH  A
    12BE: 50 00    MOV   A,0x0
    12C0: 08       PUSH  A
    12C1: 50 05    MOV   A,0x5
    12C3: 08       PUSH  A
    12C4: 7C 16 85 LCALL 0x1685
    12C7: 38 FC    ADD   SP,0xFC
    12C9: 51 02    MOV   A,[__rX]
    12CB: 54 01    MOV   [X+1],A
    12CD: 51 01    MOV   A,[__rY]
    12CF: 54 00    MOV   [X+0],A
(0019) 	
(0020) 	csprintf(firstLine, "Windspeed       ");
    12D1: 50 02    MOV   A,0x2
    12D3: 08       PUSH  A
    12D4: 50 55    MOV   A,0x55
    12D6: 08       PUSH  A
    12D7: 52 FB    MOV   A,[X-5]
    12D9: 08       PUSH  A
    12DA: 52 FC    MOV   A,[X-4]
    12DC: 08       PUSH  A
    12DD: 7C 19 E6 LCALL _csprintf
(0021) 	csprintf(secondLine, "%i km/h        ", windSample);
    12E0: 52 00    MOV   A,[X+0]
(0022) 	
(0023) 	// get wind direction
(0024) 	/*
(0025) 	if( (PORT & PIN1) &&
(0026) 		(PORT & PIN2) &&
(0027) 		(PORT & PIN3) )
(0028) 	{ csprintf(&secondLine[13], "NO");
(0029) 	} else if( !(PORT & PIN1) &&
(0030) 				(PORT & PIN2) &&
(0031) 				(PORT & PIN3) )
(0032) 	{ csprintf(&secondLine[13], "NE");
(0033) 	}else if( !(PORT & PIN1) &&
(0034) 				(PORT & PIN2) &&
(0035) 				!(PORT & PIN3) )
(0036) 	{ csprintf(&secondLine[13], "EA");
(0037) 	}else if(  (PORT & PIN1) &&
(0038) 				(PORT & PIN2) &&
(0039) 				!(PORT & PIN3) )
(0040) 	{ csprintf(&secondLine[13], "SE");
(0041) 	}else if(  (PORT & PIN1) &&
(0042) 				!(PORT & PIN2) &&
(0043) 				!(PORT & PIN3) )
(0044) 	{ csprintf(&secondLine[13], "SO");
(0045) 	}else if( !(PORT & PIN1) &&
(0046) 				!(PORT & PIN2) &&
(0047) 				!(PORT & PIN3) )
(0048) 	{ csprintf(&secondLine[13], "SW");
(0049) 	}else if( !(PORT & PIN1) &&
(0050) 				!(PORT & PIN2) &&
(0051) 				(PORT & PIN3) )
(0052) 	{ csprintf(&secondLine[13], "WE");
(0053) 	}else if(  (PORT & PIN1) &&
(0054) 				!(PORT & PIN2) &&
(0055) 				(PORT & PIN3) )
(0056) 	{ csprintf(&secondLine[13], "NW");
(0057) 	}
(0058) 	*/
(0059) }    12E2: 08       PUSH  A
    12E3: 52 01    MOV   A,[X+1]
    12E5: 08       PUSH  A
    12E6: 50 02    MOV   A,0x2
    12E8: 08       PUSH  A
    12E9: 50 45    MOV   A,0x45
    12EB: 08       PUSH  A
    12EC: 52 F9    MOV   A,[X-7]
    12EE: 08       PUSH  A
    12EF: 52 FA    MOV   A,[X-6]
    12F1: 08       PUSH  A
    12F2: 7C 19 E6 LCALL _csprintf
    12F5: 38 F6    ADD   SP,0xF6
    12F7: 38 FE    ADD   SP,0xFE
    12F9: 20       POP   X
    12FA: 7F       RET   
__plcall:
    16B6: 53 02    MOV   [__rX],A
    16B8: 28       ROMX  
    16B9: 08       PUSH  A
    16BA: 51 02    MOV   A,[__rX]
    16BC: 75       INC   X
    16BD: 09 00    ADC   A,0x0
    16BF: 28       ROMX  
    16C0: 08       PUSH  A
    16C1: 7F       RET   
_itoa:
    16C2: 10       PUSH  X
    16C3: 4F       MOV   X,SP
    16C4: 38 09    ADD   SP,0x9
    16C6: 52 FA    MOV   A,[X-6]
    16C8: 54 03    MOV   [X+3],A
    16CA: 52 F9    MOV   A,[X-7]
    16CC: 54 02    MOV   [X+2],A
    16CE: 3D F9 00 CMP   [X-7],0x0
    16D1: B0 22    JNZ   0x16F4
    16D3: 3D FA 00 CMP   [X-6],0x0
    16D6: B0 1D    JNZ   0x16F4
    16D8: 52 FC    MOV   A,[X-4]
    16DA: 53 07    MOV   [__r1],A
    16DC: 50 30    MOV   A,0x30
    16DE: 3F 07    MVI   [__r1],A
    16E0: 52 FC    MOV   A,[X-4]
    16E2: 01 01    ADD   A,0x1
    16E4: 53 07    MOV   [__r1],A
    16E6: 50 00    MOV   A,0x0
    16E8: 3F 07    MVI   [__r1],A
    16EA: 52 FC    MOV   A,[X-4]
    16EC: 53 07    MOV   [__r1],A
    16EE: 52 FB    MOV   A,[X-5]
    16F0: 53 08    MOV   [__r0],A
    16F2: 81 48    JMP   0x183B
    16F4: 52 FA    MOV   A,[X-6]
    16F6: 11 00    SUB   A,0x0
    16F8: 52 F9    MOV   A,[X-7]
    16FA: 31 80    XOR   A,0x80
    16FC: 19 80    SBB   A,0x80
    16FE: D0 26    JNC   0x1725
    1700: 3D F7 00 CMP   [X-9],0x0
    1703: B0 21    JNZ   0x1725
    1705: 3D F8 0A CMP   [X-8],0xA
    1708: B0 1C    JNZ   0x1725
    170A: 56 06 01 MOV   [X+6],0x1
    170D: 52 03    MOV   A,[X+3]
    170F: 73       CPL   A
    1710: 53 07    MOV   [__r1],A
    1712: 52 02    MOV   A,[X+2]
    1714: 73       CPL   A
    1715: 53 08    MOV   [__r0],A
    1717: 51 07    MOV   A,[__r1]
    1719: 01 01    ADD   A,0x1
    171B: 54 03    MOV   [X+3],A
    171D: 51 08    MOV   A,[__r0]
    171F: 09 00    ADC   A,0x0
    1721: 54 02    MOV   [X+2],A
    1723: 80 04    JMP   0x1728
    1725: 56 06 00 MOV   [X+6],0x0
    1728: 52 FC    MOV   A,[X-4]
    172A: 54 01    MOV   [X+1],A
    172C: 52 F7    MOV   A,[X-9]
    172E: 08       PUSH  A
    172F: 52 F8    MOV   A,[X-8]
    1731: 08       PUSH  A
    1732: 52 02    MOV   A,[X+2]
    1734: 08       PUSH  A
    1735: 52 03    MOV   A,[X+3]
    1737: 08       PUSH  A
    1738: 7C 12 FB LCALL 0x12FB
    173B: 38 FE    ADD   SP,0xFE
    173D: 18       POP   A
    173E: 53 07    MOV   [__r1],A
    1740: 18       POP   A
    1741: 53 08    MOV   [__r0],A
    1743: 51 07    MOV   A,[__r1]
    1745: 54 08    MOV   [X+8],A
    1747: 51 08    MOV   A,[__r0]
    1749: 54 07    MOV   [X+7],A
    174B: 50 09    MOV   A,0x9
    174D: 13 08    SUB   A,[X+8]
    174F: 52 07    MOV   A,[X+7]
    1751: 31 80    XOR   A,0x80
    1753: 53 02    MOV   [__rX],A
    1755: 50 80    MOV   A,0x80
    1757: 1A 02    SBB   A,[__rX]
    1759: C0 1D    JC    0x1777
    175B: 52 01    MOV   A,[X+1]
    175D: 53 07    MOV   [__r1],A
    175F: 52 00    MOV   A,[X+0]
    1761: 53 08    MOV   [__r0],A
    1763: 51 07    MOV   A,[__r1]
    1765: 01 01    ADD   A,0x1
    1767: 54 01    MOV   [X+1],A
    1769: 51 08    MOV   A,[__r0]
    176B: 09 00    ADC   A,0x0
    176D: 54 00    MOV   [X+0],A
    176F: 52 08    MOV   A,[X+8]
    1771: 01 30    ADD   A,0x30
    1773: 3F 07    MVI   [__r1],A
    1775: 80 1B    JMP   0x1791
    1777: 52 01    MOV   A,[X+1]
    1779: 53 07    MOV   [__r1],A
    177B: 52 00    MOV   A,[X+0]
    177D: 53 08    MOV   [__r0],A
    177F: 51 07    MOV   A,[__r1]
    1781: 01 01    ADD   A,0x1
    1783: 54 01    MOV   [X+1],A
    1785: 51 08    MOV   A,[__r0]
    1787: 09 00    ADC   A,0x0
    1789: 54 00    MOV   [X+0],A
    178B: 52 08    MOV   A,[X+8]
    178D: 01 57    ADD   A,0x57
    178F: 3F 07    MVI   [__r1],A
    1791: 52 F7    MOV   A,[X-9]
    1793: 08       PUSH  A
    1794: 52 F8    MOV   A,[X-8]
    1796: 08       PUSH  A
    1797: 52 02    MOV   A,[X+2]
    1799: 08       PUSH  A
    179A: 52 03    MOV   A,[X+3]
    179C: 08       PUSH  A
    179D: 7C 12 FB LCALL 0x12FB
    17A0: 18       POP   A
    17A1: 54 03    MOV   [X+3],A
    17A3: 18       POP   A
    17A4: 54 02    MOV   [X+2],A
    17A6: 38 FE    ADD   SP,0xFE
    17A8: 3D 02 00 CMP   [X+2],0x0
    17AB: BF 80    JNZ   0x172C
    17AD: 3D 03 00 CMP   [X+3],0x0
    17B0: BF 7B    JNZ   0x172C
    17B2: 3D 06 00 CMP   [X+6],0x0
    17B5: A0 19    JZ    0x17CF
    17B7: 52 01    MOV   A,[X+1]
    17B9: 53 07    MOV   [__r1],A
    17BB: 52 00    MOV   A,[X+0]
    17BD: 53 08    MOV   [__r0],A
    17BF: 51 07    MOV   A,[__r1]
    17C1: 01 01    ADD   A,0x1
    17C3: 54 01    MOV   [X+1],A
    17C5: 51 08    MOV   A,[__r0]
    17C7: 09 00    ADC   A,0x0
    17C9: 54 00    MOV   [X+0],A
    17CB: 50 2D    MOV   A,0x2D
    17CD: 3F 07    MVI   [__r1],A
    17CF: 52 01    MOV   A,[X+1]
    17D1: 53 07    MOV   [__r1],A
    17D3: 52 00    MOV   A,[X+0]
    17D5: 53 08    MOV   [__r0],A
    17D7: 51 07    MOV   A,[__r1]
    17D9: 01 FF    ADD   A,0xFF
    17DB: 54 01    MOV   [X+1],A
    17DD: 51 08    MOV   A,[__r0]
    17DF: 09 FF    ADC   A,0xFF
    17E1: 54 00    MOV   [X+0],A
    17E3: 50 00    MOV   A,0x0
    17E5: 3F 07    MVI   [__r1],A
    17E7: 52 FC    MOV   A,[X-4]
    17E9: 54 05    MOV   [X+5],A
    17EB: 80 3D    JMP   0x1829
    17ED: 52 05    MOV   A,[X+5]
    17EF: 53 07    MOV   [__r1],A
    17F1: 3E 07    MVI   A,[__r1]
    17F3: 54 06    MOV   [X+6],A
    17F5: 52 05    MOV   A,[X+5]
    17F7: 53 07    MOV   [__r1],A
    17F9: 52 04    MOV   A,[X+4]
    17FB: 53 08    MOV   [__r0],A
    17FD: 51 07    MOV   A,[__r1]
    17FF: 01 01    ADD   A,0x1
    1801: 54 05    MOV   [X+5],A
    1803: 51 08    MOV   A,[__r0]
    1805: 09 00    ADC   A,0x0
    1807: 54 04    MOV   [X+4],A
    1809: 52 01    MOV   A,[X+1]
    180B: 53 05    MOV   [__r3],A
    180D: 3E 05    MVI   A,[__r3]
    180F: 3F 07    MVI   [__r1],A
    1811: 52 01    MOV   A,[X+1]
    1813: 53 07    MOV   [__r1],A
    1815: 52 00    MOV   A,[X+0]
    1817: 53 08    MOV   [__r0],A
    1819: 51 07    MOV   A,[__r1]
    181B: 01 FF    ADD   A,0xFF
    181D: 54 01    MOV   [X+1],A
    181F: 51 08    MOV   A,[__r0]
    1821: 09 FF    ADC   A,0xFF
    1823: 54 00    MOV   [X+0],A
    1825: 52 06    MOV   A,[X+6]
    1827: 3F 07    MVI   [__r1],A
    1829: 52 01    MOV   A,[X+1]
    182B: 53 08    MOV   [__r0],A
    182D: 52 05    MOV   A,[X+5]
    182F: 3A 08    CMP   A,[__r0]
    1831: CF BB    JC    0x17ED
    1833: 52 FC    MOV   A,[X-4]
    1835: 53 07    MOV   [__r1],A
    1837: 52 FB    MOV   A,[X-5]
    1839: 53 08    MOV   [__r0],A
    183B: 38 F7    ADD   SP,0xF7
    183D: 20       POP   X
    183E: 7F       RET   
_utoa:
    183F: 10       PUSH  X
    1840: 4F       MOV   X,SP
    1841: 38 07    ADD   SP,0x7
    1843: 52 FC    MOV   A,[X-4]
    1845: 54 01    MOV   [X+1],A
    1847: 52 F7    MOV   A,[X-9]
    1849: 08       PUSH  A
    184A: 52 F8    MOV   A,[X-8]
    184C: 08       PUSH  A
    184D: 52 F9    MOV   A,[X-7]
    184F: 08       PUSH  A
    1850: 52 FA    MOV   A,[X-6]
    1852: 08       PUSH  A
    1853: 7C 12 FB LCALL 0x12FB
    1856: 38 FE    ADD   SP,0xFE
    1858: 18       POP   A
    1859: 53 07    MOV   [__r1],A
    185B: 18       POP   A
    185C: 53 08    MOV   [__r0],A
    185E: 51 07    MOV   A,[__r1]
    1860: 54 06    MOV   [X+6],A
    1862: 51 08    MOV   A,[__r0]
    1864: 54 05    MOV   [X+5],A
    1866: 50 09    MOV   A,0x9
    1868: 13 06    SUB   A,[X+6]
    186A: 52 05    MOV   A,[X+5]
    186C: 31 80    XOR   A,0x80
    186E: 53 02    MOV   [__rX],A
    1870: 50 80    MOV   A,0x80
    1872: 1A 02    SBB   A,[__rX]
    1874: C0 1D    JC    0x1892
    1876: 52 01    MOV   A,[X+1]
    1878: 53 07    MOV   [__r1],A
    187A: 52 00    MOV   A,[X+0]
    187C: 53 08    MOV   [__r0],A
    187E: 51 07    MOV   A,[__r1]
    1880: 01 01    ADD   A,0x1
    1882: 54 01    MOV   [X+1],A
    1884: 51 08    MOV   A,[__r0]
    1886: 09 00    ADC   A,0x0
    1888: 54 00    MOV   [X+0],A
    188A: 52 06    MOV   A,[X+6]
    188C: 01 30    ADD   A,0x30
    188E: 3F 07    MVI   [__r1],A
    1890: 80 1B    JMP   0x18AC
    1892: 52 01    MOV   A,[X+1]
    1894: 53 07    MOV   [__r1],A
    1896: 52 00    MOV   A,[X+0]
    1898: 53 08    MOV   [__r0],A
    189A: 51 07    MOV   A,[__r1]
    189C: 01 01    ADD   A,0x1
    189E: 54 01    MOV   [X+1],A
    18A0: 51 08    MOV   A,[__r0]
    18A2: 09 00    ADC   A,0x0
    18A4: 54 00    MOV   [X+0],A
    18A6: 52 06    MOV   A,[X+6]
    18A8: 01 57    ADD   A,0x57
    18AA: 3F 07    MVI   [__r1],A
    18AC: 52 F7    MOV   A,[X-9]
    18AE: 08       PUSH  A
    18AF: 52 F8    MOV   A,[X-8]
    18B1: 08       PUSH  A
    18B2: 52 F9    MOV   A,[X-7]
    18B4: 08       PUSH  A
    18B5: 52 FA    MOV   A,[X-6]
    18B7: 08       PUSH  A
    18B8: 7C 12 FB LCALL 0x12FB
    18BB: 18       POP   A
    18BC: 54 FA    MOV   [X-6],A
    18BE: 18       POP   A
    18BF: 54 F9    MOV   [X-7],A
    18C1: 38 FE    ADD   SP,0xFE
    18C3: 3D F9 00 CMP   [X-7],0x0
    18C6: BF 80    JNZ   0x1847
    18C8: 3D FA 00 CMP   [X-6],0x0
    18CB: BF 7B    JNZ   0x1847
    18CD: 52 01    MOV   A,[X+1]
    18CF: 53 07    MOV   [__r1],A
    18D1: 52 00    MOV   A,[X+0]
    18D3: 53 08    MOV   [__r0],A
    18D5: 51 07    MOV   A,[__r1]
    18D7: 01 FF    ADD   A,0xFF
    18D9: 54 01    MOV   [X+1],A
    18DB: 51 08    MOV   A,[__r0]
    18DD: 09 FF    ADC   A,0xFF
    18DF: 54 00    MOV   [X+0],A
    18E1: 50 00    MOV   A,0x0
    18E3: 3F 07    MVI   [__r1],A
    18E5: 52 FC    MOV   A,[X-4]
    18E7: 54 03    MOV   [X+3],A
    18E9: 80 3D    JMP   0x1927
    18EB: 52 03    MOV   A,[X+3]
    18ED: 53 07    MOV   [__r1],A
    18EF: 3E 07    MVI   A,[__r1]
    18F1: 54 04    MOV   [X+4],A
    18F3: 52 03    MOV   A,[X+3]
    18F5: 53 07    MOV   [__r1],A
    18F7: 52 02    MOV   A,[X+2]
    18F9: 53 08    MOV   [__r0],A
    18FB: 51 07    MOV   A,[__r1]
    18FD: 01 01    ADD   A,0x1
    18FF: 54 03    MOV   [X+3],A
    1901: 51 08    MOV   A,[__r0]
    1903: 09 00    ADC   A,0x0
    1905: 54 02    MOV   [X+2],A
    1907: 52 01    MOV   A,[X+1]
    1909: 53 05    MOV   [__r3],A
    190B: 3E 05    MVI   A,[__r3]
    190D: 3F 07    MVI   [__r1],A
    190F: 52 01    MOV   A,[X+1]
    1911: 53 07    MOV   [__r1],A
    1913: 52 00    MOV   A,[X+0]
    1915: 53 08    MOV   [__r0],A
    1917: 51 07    MOV   A,[__r1]
    1919: 01 FF    ADD   A,0xFF
    191B: 54 01    MOV   [X+1],A
    191D: 51 08    MOV   A,[__r0]
    191F: 09 FF    ADC   A,0xFF
    1921: 54 00    MOV   [X+0],A
    1923: 52 04    MOV   A,[X+4]
    1925: 3F 07    MVI   [__r1],A
    1927: 52 01    MOV   A,[X+1]
    1929: 53 08    MOV   [__r0],A
    192B: 52 03    MOV   A,[X+3]
    192D: 3A 08    CMP   A,[__r0]
    192F: CF BB    JC    0x18EB
    1931: 52 FC    MOV   A,[X-4]
    1933: 53 07    MOV   [__r1],A
    1935: 52 FB    MOV   A,[X-5]
    1937: 53 08    MOV   [__r0],A
    1939: 38 F9    ADD   SP,0xF9
    193B: 20       POP   X
    193C: 7F       RET   
_isdigit:
    193D: 10       PUSH  X
    193E: 4F       MOV   X,SP
    193F: 52 FC    MOV   A,[X-4]
    1941: 01 D5    ADD   A,0xD5
    1943: 53 07    MOV   [__r1],A
    1945: 52 FB    MOV   A,[X-5]
    1947: 09 02    ADC   A,0x2
    1949: 10       PUSH  X
    194A: 58 07    MOV   X,[__r1]
    194C: 28       ROMX  
    194D: 20       POP   X
    194E: 53 07    MOV   [__r1],A
    1950: 55 08 00 MOV   [__r0],0x0
    1953: 26 07 04 AND   [__r1],0x4
    1956: 26 08 00 AND   [__r0],0x0
    1959: 20       POP   X
    195A: 7F       RET   
_islower:
    195B: 10       PUSH  X
    195C: 4F       MOV   X,SP
    195D: 52 FC    MOV   A,[X-4]
    195F: 01 D5    ADD   A,0xD5
    1961: 53 07    MOV   [__r1],A
    1963: 52 FB    MOV   A,[X-5]
    1965: 09 02    ADC   A,0x2
    1967: 10       PUSH  X
    1968: 58 07    MOV   X,[__r1]
    196A: 28       ROMX  
    196B: 20       POP   X
    196C: 53 07    MOV   [__r1],A
    196E: 55 08 00 MOV   [__r0],0x0
    1971: 26 07 02 AND   [__r1],0x2
    1974: 26 08 00 AND   [__r0],0x0
    1977: 20       POP   X
    1978: 7F       RET   
_isspace:
    1979: 10       PUSH  X
    197A: 4F       MOV   X,SP
    197B: 52 FC    MOV   A,[X-4]
    197D: 01 D5    ADD   A,0xD5
    197F: 53 07    MOV   [__r1],A
    1981: 52 FB    MOV   A,[X-5]
    1983: 09 02    ADC   A,0x2
    1985: 10       PUSH  X
    1986: 58 07    MOV   X,[__r1]
    1988: 28       ROMX  
    1989: 20       POP   X
    198A: 53 07    MOV   [__r1],A
    198C: 55 08 00 MOV   [__r0],0x0
    198F: 26 07 10 AND   [__r1],0x10
    1992: 26 08 00 AND   [__r0],0x0
    1995: 20       POP   X
    1996: 7F       RET   
_toupper:
    1997: 10       PUSH  X
    1998: 4F       MOV   X,SP
    1999: 52 FB    MOV   A,[X-5]
    199B: 08       PUSH  A
    199C: 52 FC    MOV   A,[X-4]
    199E: 08       PUSH  A
    199F: 7C 19 5B LCALL _islower
    19A2: 38 FE    ADD   SP,0xFE
    19A4: 3C 08 00 CMP   [__r0],0x0
    19A7: B0 06    JNZ   0x19AE
    19A9: 3C 07 00 CMP   [__r1],0x0
    19AC: A0 15    JZ    0x19C2
    19AE: 52 FC    MOV   A,[X-4]
    19B0: 11 61    SUB   A,0x61
    19B2: 53 07    MOV   [__r1],A
    19B4: 52 FB    MOV   A,[X-5]
    19B6: 19 00    SBB   A,0x0
    19B8: 53 08    MOV   [__r0],A
    19BA: 06 07 41 ADD   [__r1],0x41
    19BD: 0E 08 00 ADC   [__r0],0x0
    19C0: 80 09    JMP   0x19CA
    19C2: 52 FC    MOV   A,[X-4]
    19C4: 53 07    MOV   [__r1],A
    19C6: 52 FB    MOV   A,[X-5]
    19C8: 53 08    MOV   [__r0],A
    19CA: 20       POP   X
    19CB: 7F       RET   
__csdepi:
    19CC: 10       PUSH  X
    19CD: 4F       MOV   X,SP
    19CE: 5F 07 17 MOV   [__r1],[0x17]
    19D1: 5F 08 16 MOV   [__r0],[0x16]
    19D4: 51 07    MOV   A,[__r1]
    19D6: 01 01    ADD   A,0x1
    19D8: 53 17    MOV   [0x17],A
    19DA: 51 08    MOV   A,[__r0]
    19DC: 09 00    ADC   A,0x0
    19DE: 53 16    MOV   [0x16],A
    19E0: 52 FC    MOV   A,[X-4]
    19E2: 3F 07    MVI   [__r1],A
    19E4: 20       POP   X
    19E5: 7F       RET   
_csprintf:
    19E6: 10       PUSH  X
    19E7: 4F       MOV   X,SP
    19E8: 38 02    ADD   SP,0x2
    19EA: 52 FC    MOV   A,[X-4]
    19EC: 53 17    MOV   [0x17],A
    19EE: 5A 08    MOV   [__r0],X
    19F0: 16 08 07 SUB   [__r0],0x7
    19F3: 51 08    MOV   A,[__r0]
    19F5: 54 01    MOV   [X+1],A
    19F7: 52 00    MOV   A,[X+0]
    19F9: 08       PUSH  A
    19FA: 52 01    MOV   A,[X+1]
    19FC: 08       PUSH  A
    19FD: 52 F9    MOV   A,[X-7]
    19FF: 08       PUSH  A
    1A00: 52 FA    MOV   A,[X-6]
    1A02: 08       PUSH  A
    1A03: 50 04    MOV   A,0x4
    1A05: 08       PUSH  A
    1A06: 50 49    MOV   A,0x49
    1A08: 08       PUSH  A
    1A09: 7C 1A 25 LCALL __cprint
    1A0C: 38 FA    ADD   SP,0xFA
    1A0E: 5F 07 17 MOV   [__r1],[0x17]
    1A11: 50 00    MOV   A,0x0
    1A13: 3F 07    MVI   [__r1],A
    1A15: 51 17    MOV   A,[0x17]
    1A17: 13 FC    SUB   A,[X-4]
    1A19: 53 07    MOV   [__r1],A
    1A1B: 51 16    MOV   A,[0x16]
    1A1D: 1B FB    SBB   A,[X-5]
    1A1F: 53 08    MOV   [__r0],A
    1A21: 38 FE    ADD   SP,0xFE
    1A23: 20       POP   X
    1A24: 7F       RET   
__cprint:
    1A25: 10       PUSH  X
    1A26: 4F       MOV   X,SP
    1A27: 38 11    ADD   SP,0x11
    1A29: 56 05 00 MOV   [X+5],0x0
    1A2C: 56 04 00 MOV   [X+4],0x0
    1A2F: 83 4A    JMP   0x1D7A
    1A31: 52 FA    MOV   A,[X-6]
    1A33: 53 07    MOV   [__r1],A
    1A35: 52 F9    MOV   A,[X-7]
    1A37: 10       PUSH  X
    1A38: 58 07    MOV   X,[__r1]
    1A3A: 28       ROMX  
    1A3B: 20       POP   X
    1A3C: 39 25    CMP   A,0x25
    1A3E: A0 23    JZ    0x1A62
    1A40: 52 FA    MOV   A,[X-6]
    1A42: 53 07    MOV   [__r1],A
    1A44: 52 F9    MOV   A,[X-7]
    1A46: 10       PUSH  X
    1A47: 58 07    MOV   X,[__r1]
    1A49: 28       ROMX  
    1A4A: 20       POP   X
    1A4B: 10       PUSH  X
    1A4C: 08       PUSH  A
    1A4D: 52 FC    MOV   A,[X-4]
    1A4F: 53 07    MOV   [__r1],A
    1A51: 52 FB    MOV   A,[X-5]
    1A53: 58 07    MOV   X,[__r1]
    1A55: 7C 16 B6 LCALL __plcall
    1A58: 38 FF    ADD   SP,0xFF
    1A5A: 20       POP   X
    1A5B: 77 05    INC   [X+5]
    1A5D: 0F 04 00 ADC   [X+4],0x0
    1A60: 83 14    JMP   0x1D75
    1A62: 56 0A 00 MOV   [X+10],0x0
    1A65: 56 09 00 MOV   [X+9],0x0
    1A68: 56 07 18 MOV   [X+7],0x18
    1A6B: 56 06 00 MOV   [X+6],0x0
    1A6E: 56 08 20 MOV   [X+8],0x20
    1A71: 77 FA    INC   [X-6]
    1A73: 0F F9 00 ADC   [X-7],0x0
    1A76: 52 FA    MOV   A,[X-6]
    1A78: 53 07    MOV   [__r1],A
    1A7A: 52 F9    MOV   A,[X-7]
    1A7C: 10       PUSH  X
    1A7D: 58 07    MOV   X,[__r1]
    1A7F: 28       ROMX  
    1A80: 20       POP   X
    1A81: 54 10    MOV   [X+16],A
    1A83: 56 0F 00 MOV   [X+15],0x0
    1A86: 52 10    MOV   A,[X+16]
    1A88: 11 58    SUB   A,0x58
    1A8A: 53 01    MOV   [__rY],A
    1A8C: 52 0F    MOV   A,[X+15]
    1A8E: 31 80    XOR   A,0x80
    1A90: 19 80    SBB   A,0x80
    1A92: 2A 01    OR    A,[__rY]
    1A94: A0 E0    JZ    0x1B75
    1A96: D0 1F    JNC   0x1AB6
    1A98: 52 10    MOV   A,[X+16]
    1A9A: 11 45    SUB   A,0x45
    1A9C: 53 01    MOV   [__rY],A
    1A9E: 52 0F    MOV   A,[X+15]
    1AA0: 31 80    XOR   A,0x80
    1AA2: 19 80    SBB   A,0x80
    1AA4: C0 83    JC    0x1B28
    1AA6: 2A 01    OR    A,[__rY]
    1AA8: A2 C4    JZ    0x1D6D
    1AAA: 3D 0F 00 CMP   [X+15],0x0
    1AAD: B0 06    JNZ   0x1AB4
    1AAF: 3D 10 53 CMP   [X+16],0x53
    1AB2: A1 EE    JZ    0x1CA1
    1AB4: 80 73    JMP   0x1B28
    1AB6: 3D 0F 00 CMP   [X+15],0x0
    1AB9: B0 06    JNZ   0x1AC0
    1ABB: 3D 10 63 CMP   [X+16],0x63
    1ABE: A1 B9    JZ    0x1C78
    1AC0: 3D 0F 00 CMP   [X+15],0x0
    1AC3: B0 06    JNZ   0x1ACA
    1AC5: 3D 10 64 CMP   [X+16],0x64
    1AC8: A0 81    JZ    0x1B4A
    1ACA: 3D 0F 00 CMP   [X+15],0x0
    1ACD: B0 06    JNZ   0x1AD4
    1ACF: 3D 10 65 CMP   [X+16],0x65
    1AD2: A2 9A    JZ    0x1D6D
    1AD4: 3D 0F 00 CMP   [X+15],0x0
    1AD7: B0 06    JNZ   0x1ADE
    1AD9: 3D 10 66 CMP   [X+16],0x66
    1ADC: A2 90    JZ    0x1D6D
    1ADE: 3D 0F 00 CMP   [X+15],0x0
    1AE1: B0 06    JNZ   0x1AE8
    1AE3: 3D 10 69 CMP   [X+16],0x69
    1AE6: A0 63    JZ    0x1B4A
    1AE8: 3D 0F 00 CMP   [X+15],0x0
    1AEB: B0 06    JNZ   0x1AF2
    1AED: 3D 10 6F CMP   [X+16],0x6F
    1AF0: A0 84    JZ    0x1B75
    1AF2: 3D 0F 00 CMP   [X+15],0x0
    1AF5: B0 06    JNZ   0x1AFC
    1AF7: 3D 10 70 CMP   [X+16],0x70
    1AFA: A0 7A    JZ    0x1B75
    1AFC: 52 10    MOV   A,[X+16]
    1AFE: 11 63    SUB   A,0x63
    1B00: 52 0F    MOV   A,[X+15]
    1B02: 31 80    XOR   A,0x80
    1B04: 19 80    SBB   A,0x80
    1B06: C0 21    JC    0x1B28
    1B08: 3D 0F 00 CMP   [X+15],0x0
    1B0B: B0 06    JNZ   0x1B12
    1B0D: 3D 10 73 CMP   [X+16],0x73
    1B10: A1 F6    JZ    0x1D07
    1B12: 3D 0F 00 CMP   [X+15],0x0
    1B15: B0 06    JNZ   0x1B1C
    1B17: 3D 10 75 CMP   [X+16],0x75
    1B1A: A0 5A    JZ    0x1B75
    1B1C: 3D 0F 00 CMP   [X+15],0x0
    1B1F: B0 06    JNZ   0x1B26
    1B21: 3D 10 78 CMP   [X+16],0x78
    1B24: A0 50    JZ    0x1B75
    1B26: 80 01    JMP   0x1B28
    1B28: 52 FA    MOV   A,[X-6]
    1B2A: 53 07    MOV   [__r1],A
    1B2C: 52 F9    MOV   A,[X-7]
    1B2E: 10       PUSH  X
    1B2F: 58 07    MOV   X,[__r1]
    1B31: 28       ROMX  
    1B32: 20       POP   X
    1B33: 10       PUSH  X
    1B34: 08       PUSH  A
    1B35: 52 FC    MOV   A,[X-4]
    1B37: 53 07    MOV   [__r1],A
    1B39: 52 FB    MOV   A,[X-5]
    1B3B: 58 07    MOV   X,[__r1]
    1B3D: 7C 16 B6 LCALL __plcall
    1B40: 38 FF    ADD   SP,0xFF
    1B42: 20       POP   X
    1B43: 77 05    INC   [X+5]
    1B45: 0F 04 00 ADC   [X+4],0x0
    1B48: 82 2C    JMP   0x1D75
    1B4A: 52 F8    MOV   A,[X-8]
    1B4C: 01 FE    ADD   A,0xFE
    1B4E: 54 F8    MOV   [X-8],A
    1B50: 52 F8    MOV   A,[X-8]
    1B52: 53 07    MOV   [__r1],A
    1B54: 3E 07    MVI   A,[__r1]
    1B56: 54 0B    MOV   [X+11],A
    1B58: 3E 07    MVI   A,[__r1]
    1B5A: 54 0C    MOV   [X+12],A
    1B5C: 50 00    MOV   A,0x0
    1B5E: 08       PUSH  A
    1B5F: 50 0A    MOV   A,0xA
    1B61: 08       PUSH  A
    1B62: 52 0B    MOV   A,[X+11]
    1B64: 08       PUSH  A
    1B65: 52 0C    MOV   A,[X+12]
    1B67: 08       PUSH  A
    1B68: 52 06    MOV   A,[X+6]
    1B6A: 08       PUSH  A
    1B6B: 52 07    MOV   A,[X+7]
    1B6D: 08       PUSH  A
    1B6E: 7C 16 C2 LCALL _itoa
    1B71: 38 FA    ADD   SP,0xFA
    1B73: 80 FC    JMP   0x1C70
    1B75: 52 F8    MOV   A,[X-8]
    1B77: 01 FE    ADD   A,0xFE
    1B79: 54 F8    MOV   [X-8],A
    1B7B: 52 F8    MOV   A,[X-8]
    1B7D: 53 07    MOV   [__r1],A
    1B7F: 3E 07    MVI   A,[__r1]
    1B81: 53 08    MOV   [__r0],A
    1B83: 3E 07    MVI   A,[__r1]
    1B85: 54 0C    MOV   [X+12],A
    1B87: 51 08    MOV   A,[__r0]
    1B89: 54 0B    MOV   [X+11],A
    1B8B: 52 FA    MOV   A,[X-6]
    1B8D: 53 07    MOV   [__r1],A
    1B8F: 52 F9    MOV   A,[X-7]
    1B91: 10       PUSH  X
    1B92: 58 07    MOV   X,[__r1]
    1B94: 28       ROMX  
    1B95: 20       POP   X
    1B96: 39 75    CMP   A,0x75
    1B98: B0 1A    JNZ   0x1BB3
    1B9A: 50 00    MOV   A,0x0
    1B9C: 08       PUSH  A
    1B9D: 50 0A    MOV   A,0xA
    1B9F: 08       PUSH  A
    1BA0: 52 0B    MOV   A,[X+11]
    1BA2: 08       PUSH  A
    1BA3: 52 0C    MOV   A,[X+12]
    1BA5: 08       PUSH  A
    1BA6: 52 06    MOV   A,[X+6]
    1BA8: 08       PUSH  A
    1BA9: 52 07    MOV   A,[X+7]
    1BAB: 08       PUSH  A
    1BAC: 7C 18 3F LCALL _utoa
    1BAF: 38 FA    ADD   SP,0xFA
    1BB1: 80 BE    JMP   0x1C70
    1BB3: 52 FA    MOV   A,[X-6]
    1BB5: 53 07    MOV   [__r1],A
    1BB7: 52 F9    MOV   A,[X-7]
    1BB9: 10       PUSH  X
    1BBA: 58 07    MOV   X,[__r1]
    1BBC: 28       ROMX  
    1BBD: 20       POP   X
    1BBE: 39 6F    CMP   A,0x6F
    1BC0: B0 1A    JNZ   0x1BDB
    1BC2: 50 00    MOV   A,0x0
    1BC4: 08       PUSH  A
    1BC5: 50 08    MOV   A,0x8
    1BC7: 08       PUSH  A
    1BC8: 52 0B    MOV   A,[X+11]
    1BCA: 08       PUSH  A
    1BCB: 52 0C    MOV   A,[X+12]
    1BCD: 08       PUSH  A
    1BCE: 52 06    MOV   A,[X+6]
    1BD0: 08       PUSH  A
    1BD1: 52 07    MOV   A,[X+7]
    1BD3: 08       PUSH  A
    1BD4: 7C 18 3F LCALL _utoa
    1BD7: 38 FA    ADD   SP,0xFA
    1BD9: 80 96    JMP   0x1C70
    1BDB: 52 FA    MOV   A,[X-6]
    1BDD: 53 07    MOV   [__r1],A
    1BDF: 52 F9    MOV   A,[X-7]
    1BE1: 10       PUSH  X
    1BE2: 58 07    MOV   X,[__r1]
    1BE4: 28       ROMX  
    1BE5: 20       POP   X
    1BE6: 39 70    CMP   A,0x70
    1BE8: B0 31    JNZ   0x1C1A
    1BEA: 52 07    MOV   A,[X+7]
    1BEC: 53 07    MOV   [__r1],A
    1BEE: 52 06    MOV   A,[X+6]
    1BF0: 53 08    MOV   [__r0],A
    1BF2: 51 07    MOV   A,[__r1]
    1BF4: 01 01    ADD   A,0x1
    1BF6: 54 07    MOV   [X+7],A
    1BF8: 51 08    MOV   A,[__r0]
    1BFA: 09 00    ADC   A,0x0
    1BFC: 54 06    MOV   [X+6],A
    1BFE: 50 30    MOV   A,0x30
    1C00: 3F 07    MVI   [__r1],A
    1C02: 52 07    MOV   A,[X+7]
    1C04: 53 07    MOV   [__r1],A
    1C06: 52 06    MOV   A,[X+6]
    1C08: 53 08    MOV   [__r0],A
    1C0A: 51 07    MOV   A,[__r1]
    1C0C: 01 01    ADD   A,0x1
    1C0E: 54 07    MOV   [X+7],A
    1C10: 51 08    MOV   A,[__r0]
    1C12: 09 00    ADC   A,0x0
    1C14: 54 06    MOV   [X+6],A
    1C16: 50 78    MOV   A,0x78
    1C18: 3F 07    MVI   [__r1],A
    1C1A: 50 00    MOV   A,0x0
    1C1C: 08       PUSH  A
    1C1D: 50 10    MOV   A,0x10
    1C1F: 08       PUSH  A
    1C20: 52 0B    MOV   A,[X+11]
    1C22: 08       PUSH  A
    1C23: 52 0C    MOV   A,[X+12]
    1C25: 08       PUSH  A
    1C26: 52 06    MOV   A,[X+6]
    1C28: 08       PUSH  A
    1C29: 52 07    MOV   A,[X+7]
    1C2B: 08       PUSH  A
    1C2C: 7C 18 3F LCALL _utoa
    1C2F: 38 FA    ADD   SP,0xFA
    1C31: 52 FA    MOV   A,[X-6]
    1C33: 53 07    MOV   [__r1],A
    1C35: 52 F9    MOV   A,[X-7]
    1C37: 10       PUSH  X
    1C38: 58 07    MOV   X,[__r1]
    1C3A: 28       ROMX  
    1C3B: 20       POP   X
    1C3C: 39 58    CMP   A,0x58
    1C3E: B0 31    JNZ   0x1C70
    1C40: 56 01 18 MOV   [X+1],0x18
    1C43: 56 00 00 MOV   [X+0],0x0
    1C46: 80 21    JMP   0x1C68
    1C48: 52 01    MOV   A,[X+1]
    1C4A: 53 07    MOV   [__r1],A
    1C4C: 3E 07    MVI   A,[__r1]
    1C4E: 53 07    MOV   [__r1],A
    1C50: 50 00    MOV   A,0x0
    1C52: 08       PUSH  A
    1C53: 51 07    MOV   A,[__r1]
    1C55: 08       PUSH  A
    1C56: 7C 19 97 LCALL _toupper
    1C59: 38 FE    ADD   SP,0xFE
    1C5B: 52 01    MOV   A,[X+1]
    1C5D: 53 05    MOV   [__r3],A
    1C5F: 51 07    MOV   A,[__r1]
    1C61: 3F 05    MVI   [__r3],A
    1C63: 77 01    INC   [X+1]
    1C65: 0F 00 00 ADC   [X+0],0x0
    1C68: 52 01    MOV   A,[X+1]
    1C6A: 53 07    MOV   [__r1],A
    1C6C: 3E 07    MVI   A,[__r1]
    1C6E: BF D9    JNZ   0x1C48
    1C70: 56 01 18 MOV   [X+1],0x18
    1C73: 56 00 00 MOV   [X+0],0x0
    1C76: 80 AE    JMP   0x1D25
    1C78: 52 F8    MOV   A,[X-8]
    1C7A: 01 FE    ADD   A,0xFE
    1C7C: 54 F8    MOV   [X-8],A
    1C7E: 52 F8    MOV   A,[X-8]
    1C80: 53 07    MOV   [__r1],A
    1C82: 3E 07    MVI   A,[__r1]
    1C84: 3E 07    MVI   A,[__r1]
    1C86: 54 0D    MOV   [X+13],A
    1C88: 10       PUSH  X
    1C89: 52 0D    MOV   A,[X+13]
    1C8B: 08       PUSH  A
    1C8C: 52 FC    MOV   A,[X-4]
    1C8E: 53 07    MOV   [__r1],A
    1C90: 52 FB    MOV   A,[X-5]
    1C92: 58 07    MOV   X,[__r1]
    1C94: 7C 16 B6 LCALL __plcall
    1C97: 38 FF    ADD   SP,0xFF
    1C99: 20       POP   X
    1C9A: 77 05    INC   [X+5]
    1C9C: 0F 04 00 ADC   [X+4],0x0
    1C9F: 80 D5    JMP   0x1D75
    1CA1: 52 F8    MOV   A,[X-8]
    1CA3: 01 FE    ADD   A,0xFE
    1CA5: 54 F8    MOV   [X-8],A
    1CA7: 52 F8    MOV   A,[X-8]
    1CA9: 53 07    MOV   [__r1],A
    1CAB: 3E 07    MVI   A,[__r1]
    1CAD: 54 02    MOV   [X+2],A
    1CAF: 3E 07    MVI   A,[__r1]
    1CB1: 54 03    MOV   [X+3],A
    1CB3: 3D 08 2D CMP   [X+8],0x2D
    1CB6: B0 3F    JNZ   0x1CF6
    1CB8: 10       PUSH  X
    1CB9: 50 2D    MOV   A,0x2D
    1CBB: 08       PUSH  A
    1CBC: 52 FC    MOV   A,[X-4]
    1CBE: 53 07    MOV   [__r1],A
    1CC0: 52 FB    MOV   A,[X-5]
    1CC2: 58 07    MOV   X,[__r1]
    1CC4: 7C 16 B6 LCALL __plcall
    1CC7: 38 FF    ADD   SP,0xFF
    1CC9: 20       POP   X
    1CCA: 77 05    INC   [X+5]
    1CCC: 0F 04 00 ADC   [X+4],0x0
    1CCF: 80 26    JMP   0x1CF6
    1CD1: 52 03    MOV   A,[X+3]
    1CD3: 53 07    MOV   [__r1],A
    1CD5: 52 02    MOV   A,[X+2]
    1CD7: 10       PUSH  X
    1CD8: 58 07    MOV   X,[__r1]
    1CDA: 28       ROMX  
    1CDB: 20       POP   X
    1CDC: 10       PUSH  X
    1CDD: 08       PUSH  A
    1CDE: 52 FC    MOV   A,[X-4]
    1CE0: 53 07    MOV   [__r1],A
    1CE2: 52 FB    MOV   A,[X-5]
    1CE4: 58 07    MOV   X,[__r1]
    1CE6: 7C 16 B6 LCALL __plcall
    1CE9: 38 FF    ADD   SP,0xFF
    1CEB: 20       POP   X
    1CEC: 77 05    INC   [X+5]
    1CEE: 0F 04 00 ADC   [X+4],0x0
    1CF1: 77 03    INC   [X+3]
    1CF3: 0F 02 00 ADC   [X+2],0x0
    1CF6: 52 03    MOV   A,[X+3]
    1CF8: 53 07    MOV   [__r1],A
    1CFA: 52 02    MOV   A,[X+2]
    1CFC: 10       PUSH  X
    1CFD: 58 07    MOV   X,[__r1]
    1CFF: 28       ROMX  
    1D00: 20       POP   X
    1D01: 39 00    CMP   A,0x0
    1D03: BF CD    JNZ   0x1CD1
    1D05: 80 6F    JMP   0x1D75
    1D07: 52 F8    MOV   A,[X-8]
    1D09: 01 FE    ADD   A,0xFE
    1D0B: 54 F8    MOV   [X-8],A
    1D0D: 52 F8    MOV   A,[X-8]
    1D0F: 53 07    MOV   [__r1],A
    1D11: 3E 07    MVI   A,[__r1]
    1D13: 54 00    MOV   [X+0],A
    1D15: 3E 07    MVI   A,[__r1]
    1D17: 54 01    MOV   [X+1],A
    1D19: 52 01    MOV   A,[X+1]
    1D1B: B0 09    JNZ   0x1D25
    1D1D: 56 03 D5 MOV   [X+3],0xD5
    1D20: 56 02 03 MOV   [X+2],0x3
    1D23: 8F 8F    JMP   0x1CB3
    1D25: 3D 08 2D CMP   [X+8],0x2D
    1D28: B0 3A    JNZ   0x1D63
    1D2A: 10       PUSH  X
    1D2B: 50 2D    MOV   A,0x2D
    1D2D: 08       PUSH  A
    1D2E: 52 FC    MOV   A,[X-4]
    1D30: 53 07    MOV   [__r1],A
    1D32: 52 FB    MOV   A,[X-5]
    1D34: 58 07    MOV   X,[__r1]
    1D36: 7C 16 B6 LCALL __plcall
    1D39: 38 FF    ADD   SP,0xFF
    1D3B: 20       POP   X
    1D3C: 77 05    INC   [X+5]
    1D3E: 0F 04 00 ADC   [X+4],0x0
    1D41: 80 21    JMP   0x1D63
    1D43: 52 01    MOV   A,[X+1]
    1D45: 53 07    MOV   [__r1],A
    1D47: 3E 07    MVI   A,[__r1]
    1D49: 10       PUSH  X
    1D4A: 08       PUSH  A
    1D4B: 52 FC    MOV   A,[X-4]
    1D4D: 53 07    MOV   [__r1],A
    1D4F: 52 FB    MOV   A,[X-5]
    1D51: 58 07    MOV   X,[__r1]
    1D53: 7C 16 B6 LCALL __plcall
    1D56: 38 FF    ADD   SP,0xFF
    1D58: 20       POP   X
    1D59: 77 05    INC   [X+5]
    1D5B: 0F 04 00 ADC   [X+4],0x0
    1D5E: 77 01    INC   [X+1]
    1D60: 0F 00 00 ADC   [X+0],0x0
    1D63: 52 01    MOV   A,[X+1]
    1D65: 53 07    MOV   [__r1],A
    1D67: 3E 07    MVI   A,[__r1]
    1D69: BF D9    JNZ   0x1D43
    1D6B: 80 09    JMP   0x1D75
    1D6D: 56 03 E7 MOV   [X+3],0xE7
    1D70: 56 02 03 MOV   [X+2],0x3
    1D73: 8F 3F    JMP   0x1CB3
    1D75: 77 FA    INC   [X-6]
    1D77: 0F F9 00 ADC   [X-7],0x0
    1D7A: 52 FA    MOV   A,[X-6]
    1D7C: 53 07    MOV   [__r1],A
    1D7E: 52 F9    MOV   A,[X-7]
    1D80: 10       PUSH  X
    1D81: 58 07    MOV   X,[__r1]
    1D83: 28       ROMX  
    1D84: 20       POP   X
    1D85: 39 00    CMP   A,0x0
    1D87: BC A9    JNZ   0x1A31
    1D89: 52 05    MOV   A,[X+5]
    1D8B: 53 07    MOV   [__r1],A
    1D8D: 52 04    MOV   A,[X+4]
    1D8F: 53 08    MOV   [__r0],A
    1D91: 38 EF    ADD   SP,0xEF
    1D93: 20       POP   X
    1D94: 7F       RET   
    1D95: 10       PUSH  X
    1D96: 4F       MOV   X,SP
    1D97: 38 04    ADD   SP,0x4
    1D99: 80 06    JMP   0x1DA0
    1D9B: 77 FC    INC   [X-4]
    1D9D: 0F FB 00 ADC   [X-5],0x0
    1DA0: 52 FC    MOV   A,[X-4]
    1DA2: 53 07    MOV   [__r1],A
    1DA4: 52 FB    MOV   A,[X-5]
    1DA6: 10       PUSH  X
    1DA7: 58 07    MOV   X,[__r1]
    1DA9: 28       ROMX  
    1DAA: 20       POP   X
    1DAB: 53 07    MOV   [__r1],A
    1DAD: 50 00    MOV   A,0x0
    1DAF: 08       PUSH  A
    1DB0: 51 07    MOV   A,[__r1]
    1DB2: 08       PUSH  A
    1DB3: 7C 19 79 LCALL _isspace
    1DB6: 38 FE    ADD   SP,0xFE
    1DB8: 3C 08 00 CMP   [__r0],0x0
    1DBB: BF DF    JNZ   0x1D9B
    1DBD: 3C 07 00 CMP   [__r1],0x0
    1DC0: BF DA    JNZ   0x1D9B
    1DC2: 56 03 00 MOV   [X+3],0x0
    1DC5: 56 02 00 MOV   [X+2],0x0
    1DC8: 52 FC    MOV   A,[X-4]
    1DCA: 53 07    MOV   [__r1],A
    1DCC: 52 FB    MOV   A,[X-5]
    1DCE: 10       PUSH  X
    1DCF: 58 07    MOV   X,[__r1]
    1DD1: 28       ROMX  
    1DD2: 20       POP   X
    1DD3: 39 2D    CMP   A,0x2D
    1DD5: B0 0E    JNZ   0x1DE4
    1DD7: 56 03 01 MOV   [X+3],0x1
    1DDA: 56 02 00 MOV   [X+2],0x0
    1DDD: 77 FC    INC   [X-4]
    1DDF: 0F FB 00 ADC   [X-5],0x0
    1DE2: 80 15    JMP   0x1DF8
    1DE4: 52 FC    MOV   A,[X-4]
    1DE6: 53 07    MOV   [__r1],A
    1DE8: 52 FB    MOV   A,[X-5]
    1DEA: 10       PUSH  X
    1DEB: 58 07    MOV   X,[__r1]
    1DED: 28       ROMX  
    1DEE: 20       POP   X
    1DEF: 39 2B    CMP   A,0x2B
    1DF1: B0 06    JNZ   0x1DF8
    1DF3: 77 FC    INC   [X-4]
    1DF5: 0F FB 00 ADC   [X-5],0x0
    1DF8: 56 01 00 MOV   [X+1],0x0
    1DFB: 56 00 00 MOV   [X+0],0x0
    1DFE: 80 73    JMP   0x1E72
    1E00: 52 FC    MOV   A,[X-4]
    1E02: 53 07    MOV   [__r1],A
    1E04: 52 FB    MOV   A,[X-5]
    1E06: 53 08    MOV   [__r0],A
    1E08: 51 07    MOV   A,[__r1]
    1E0A: 01 01    ADD   A,0x1
    1E0C: 54 FC    MOV   [X-4],A
    1E0E: 51 08    MOV   A,[__r0]
    1E10: 09 00    ADC   A,0x0
    1E12: 54 FB    MOV   [X-5],A
    1E14: 52 01    MOV   A,[X+1]
    1E16: 53 05    MOV   [__r3],A
    1E18: 52 00    MOV   A,[X+0]
    1E1A: 53 06    MOV   [__r2],A
    1E1C: 55 03 0A MOV   [__r5],0xA
    1E1F: 55 04 00 MOV   [__r4],0x0
    1E22: 55 02 00 MOV   [__rX],0x0
    1E25: 55 01 00 MOV   [__rY],0x0
    1E28: 3C 04 00 CMP   [__r4],0x0
    1E2B: B0 06    JNZ   0x1E32
    1E2D: 3C 03 00 CMP   [__r5],0x0
    1E30: A0 17    JZ    0x1E48
    1E32: 70 FB    AND   F,0xFB
    1E34: 6E 04    RRC   [__r4]
    1E36: 6E 03    RRC   [__r5]
    1E38: D0 09    JNC   0x1E42
    1E3A: 51 05    MOV   A,[__r3]
    1E3C: 04 02    ADD   [__rX],A
    1E3E: 51 06    MOV   A,[__r2]
    1E40: 0C 01    ADC   [__rY],A
    1E42: 65 05    ASL   [__r3]
    1E44: 6B 06    RLC   [__r2]
    1E46: 8F E1    JMP   0x1E28
    1E48: 5F 05 02 MOV   [__r3],[__rX]
    1E4B: 5F 06 01 MOV   [__r2],[__rY]
    1E4E: 51 08    MOV   A,[__r0]
    1E50: 10       PUSH  X
    1E51: 58 07    MOV   X,[__r1]
    1E53: 28       ROMX  
    1E54: 20       POP   X
    1E55: 53 07    MOV   [__r1],A
    1E57: 55 08 00 MOV   [__r0],0x0
    1E5A: 51 05    MOV   A,[__r3]
    1E5C: 02 07    ADD   A,[__r1]
    1E5E: 53 07    MOV   [__r1],A
    1E60: 51 06    MOV   A,[__r2]
    1E62: 0A 08    ADC   A,[__r0]
    1E64: 53 08    MOV   [__r0],A
    1E66: 51 07    MOV   A,[__r1]
    1E68: 11 30    SUB   A,0x30
    1E6A: 54 01    MOV   [X+1],A
    1E6C: 51 08    MOV   A,[__r0]
    1E6E: 19 00    SBB   A,0x0
    1E70: 54 00    MOV   [X+0],A
    1E72: 52 FC    MOV   A,[X-4]
    1E74: 53 07    MOV   [__r1],A
    1E76: 52 FB    MOV   A,[X-5]
    1E78: 10       PUSH  X
    1E79: 58 07    MOV   X,[__r1]
    1E7B: 28       ROMX  
    1E7C: 20       POP   X
    1E7D: 53 07    MOV   [__r1],A
    1E7F: 50 00    MOV   A,0x0
    1E81: 08       PUSH  A
    1E82: 51 07    MOV   A,[__r1]
    1E84: 08       PUSH  A
    1E85: 7C 19 3D LCALL _isdigit
    1E88: 38 FE    ADD   SP,0xFE
    1E8A: 3C 08 00 CMP   [__r0],0x0
    1E8D: BF 72    JNZ   0x1E00
    1E8F: 3C 07 00 CMP   [__r1],0x0
    1E92: BF 6D    JNZ   0x1E00
    1E94: 3D 02 00 CMP   [X+2],0x0
    1E97: B0 06    JNZ   0x1E9E
    1E99: 3D 03 00 CMP   [X+3],0x0
    1E9C: A0 11    JZ    0x1EAE
    1E9E: 52 01    MOV   A,[X+1]
    1EA0: 73       CPL   A
    1EA1: 11 FF    SUB   A,0xFF
    1EA3: 53 07    MOV   [__r1],A
    1EA5: 52 00    MOV   A,[X+0]
    1EA7: 73       CPL   A
    1EA8: 19 FF    SBB   A,0xFF
    1EAA: 53 08    MOV   [__r0],A
    1EAC: 80 09    JMP   0x1EB6
    1EAE: 52 01    MOV   A,[X+1]
    1EB0: 53 07    MOV   [__r1],A
    1EB2: 52 00    MOV   A,[X+0]
    1EB4: 53 08    MOV   [__r0],A
    1EB6: 38 FC    ADD   SP,0xFC
    1EB8: 20       POP   X
    1EB9: 7F       RET   
